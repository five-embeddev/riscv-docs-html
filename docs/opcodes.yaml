---
opcodes:
  "@c.addi16sp":
    opcode:
    - "@c.addi16sp"
    - 1..0=1
    - 15..13=3
    - 12=ignore
    - 11..7=2
    - 6..2=ignore
    opcode_group: opcodes-rvc-pseudo
    opcode_args: &1 []
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-constant-generation-instructions"
    desc:
      c:
        "#integer-constant-generation-instructions":
          text:
          - correspond to the C.ADDI16SP instruction.
        "#integer-register-immediate-operations":
          text:
          - C.ADDI16SP shares the opcode with C.LUI, but has a destination field of
          - ". C.ADDI16SP adds the non-zero sign-extended 6-bit immediate to the value
            in the stack pointer ("
          - C.ADDI16SP is used to adjust the stack pointer in procedure prologues
            and epilogues
          - ". C.ADDI16SP is only valid when nzimm &acirc;\x89&nbsp;"
  "@c.addiw":
    opcode:
    - "@c.addiw"
    - 1..0=1
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.jal
    - for
    - RV32
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - C.ADDIW is an RV64C/RV128C-only instruction that performs the same computation
            but produces a 32-bit result, then sign-extends result to 64 bits
          - C.ADDIW expands into
          - ". The immediate can be zero for C.ADDIW, where this corresponds to"
          - ". C.ADDIW is only valid when rd &acirc;\x89&nbsp;"
  "@c.ebreak":
    opcode:
    - "@c.ebreak"
    - 1..0=2
    - 15..13=4
    - 12=1
    - 11..7=0
    - 6..2=0
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - ". C.JALR is only valid when rs1 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code point with rs1 &acirc;\x80\x84=&acirc;\x80\x84 x0 corresponds
            to the C.EBREAK instruction."
        "#integer-register-register-operations":
          text:
          - ". C.ADD is only valid when rs2 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rs2 &acirc;\x80\x84=&acirc;\x80\x84 x0 correspond
            to the C.JALR and C.EBREAK instructions"
        "#breakpoint-instruction":
          text:
          - Debuggers can use the C.EBREAK instruction, which expands to
          - C.EBREAK shares the opcode with the C.ADD instruction, but with rd and
            rs2 both zero, thus can also use the CR format.
      machine:
        "#environment-call-and-breakpoint":
          text:
          - "As described in the &acirc;\x80\x9CC&acirc;\x80\x9D Standard Extension
            for Compressed Instructions in Volume I of this manual, the C.EBREAK instruction
            performs the same operation as the EBREAK instruction."
  "@c.jalr":
    opcode:
    - "@c.jalr"
    - 1..0=2
    - 15..13=4
    - 12=1
    - 11..7=ignore
    - 6..2=0
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - C.JALR (jump and link register) performs the same operation as C.JR, but
            additionally writes the address of the instruction following the jump
            (
          - ". C.JALR expands to"
          - ". C.JALR is only valid when rs1 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code point with rs1 &acirc;\x80\x84=&acirc;\x80\x84 x0 corresponds
            to the C.EBREAK instruction."
          - Strictly speaking, C.JALR does not expand exactly to a base RVI instruction
            as the value added to the PC to form the link address is 2 rather than
            4 as in the base ISA, but supporting both offsets of 2 and 4 bytes is
            only a very minor change to the base microarchitecture.
        "#integer-register-register-operations":
          text:
          - ". C.ADD is only valid when rs2 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rs2 &acirc;\x80\x84=&acirc;\x80\x84 x0 correspond
            to the C.JALR and C.EBREAK instructions"
  "@c.jr":
    opcode:
    - "@c.jr"
    - 1..0=2
    - 15..13=4
    - 12=0
    - 11..7=ignore
    - 6..2=0
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - C.JR (jump register) performs an unconditional control transfer to the
            address in register rs1
          - C.JR expands to
          - ". C.JR is only valid when rs1 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code point with rs1 &acirc;\x80\x84=&acirc;\x80\x84 x0 is reserved."
          - C.JALR (jump and link register) performs the same operation as C.JR, but
            additionally writes the address of the instruction following the jump
            (
        "#integer-register-register-operations":
          text:
          - ". C.MV is only valid when rs2 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rs2 &acirc;\x80\x84=&acirc;\x80\x84 x0 correspond
            to the C.JR instruction"
  "@c.ld":
    opcode:
    - "@c.ld"
    - 1..0=0
    - 15..13=3
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.flw
    - for
    - RV32
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.LD is an RV64C/RV128C-only instruction that loads a 64-bit value from
            memory into register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
  "@c.ldsp":
    opcode:
    - "@c.ldsp"
    - 1..0=2
    - 15..13=3
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.flwsp
    - for
    - RV32
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.LDSP is an RV64C/RV128C-only instruction that loads a 64-bit value from
            memory into register rd
          - ". C.LDSP is only valid when rd &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rd &acirc;\x80\x84=&acirc;\x80\x84 x0 are reserved."
  "@c.lq":
    opcode:
    - "@c.lq"
    - 1..0=0
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fld
    - for
    - RV32/64
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.LQ is an RV128C-only instruction that loads a 128-bit value from memory
            into register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
  "@c.lqsp":
    opcode:
    - "@c.lqsp"
    - 1..0=2
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fldsp
    - for
    - RV32/64
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.LQSP is an RV128C-only instruction that loads a 128-bit value from memory
            into register rd
          - ". C.LQSP is only valid when rd &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rd &acirc;\x80\x84=&acirc;\x80\x84 x0 are reserved."
  "@c.nop":
    opcode:
    - "@c.nop"
    - 1..0=1
    - 15..13=0
    - 12=0
    - 11..7=0
    - 6..2=0
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - encode the C.NOP instruction; the remaining code points with nzimm =0
            encode HINTs.
        "#nop-instruction":
          text:
          - C.NOP is a CI-format instruction that does not change any user-visible
            state, except for advancing the
          - C.NOP expands to
          - ". C.NOP is only valid when imm =0; the code points with imm &acirc;\x89&nbsp;"
  "@c.sd":
    opcode:
    - "@c.sd"
    - 1..0=0
    - 15..13=7
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fsw
    - for
    - RV32
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.SD is an RV64C/RV128C-only instruction that stores a 64-bit value in
            register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
  "@c.sdsp":
    opcode:
    - "@c.sdsp"
    - 1..0=2
    - 15..13=7
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fswsp
    - for
    - RV32
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.SDSP is an RV64C/RV128C-only instruction that stores a 64-bit value
            in register rs2 to memory
  "@c.sq":
    opcode:
    - "@c.sq"
    - 1..0=0
    - 15..13=5
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fsd
    - for
    - RV32/64
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.SQ is an RV128C-only instruction that stores a 128-bit value in register
            rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
  "@c.sqsp":
    opcode:
    - "@c.sqsp"
    - 1..0=2
    - 15..13=5
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.fsdsp
    - for
    - RV32/64
    opcode_group: opcodes-rvc-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.SQSP is an RV128C-only instruction that stores a 128-bit value in register
            rs2 to memory
  "@custom0":
    opcode:
    - "@custom0"
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: &2
    - rd
    - rs1
    - imm12
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom0.rd":
    opcode:
    - "@custom0.rd"
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom0.rd.rs1":
    opcode:
    - "@custom0.rd.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom0.rd.rs1.rs2":
    opcode:
    - "@custom0.rd.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom0.rs1":
    opcode:
    - "@custom0.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom0.rs1.rs2":
    opcode:
    - "@custom0.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x02
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1":
    opcode:
    - "@custom1"
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1.rd":
    opcode:
    - "@custom1.rd"
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1.rd.rs1":
    opcode:
    - "@custom1.rd.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1.rd.rs1.rs2":
    opcode:
    - "@custom1.rd.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1.rs1":
    opcode:
    - "@custom1.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom1.rs1.rs2":
    opcode:
    - "@custom1.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x0A
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2":
    opcode:
    - "@custom2"
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2.rd":
    opcode:
    - "@custom2.rd"
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2.rd.rs1":
    opcode:
    - "@custom2.rd.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2.rd.rs1.rs2":
    opcode:
    - "@custom2.rd.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2.rs1":
    opcode:
    - "@custom2.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom2.rs1.rs2":
    opcode:
    - "@custom2.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x16
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3":
    opcode:
    - "@custom3"
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3.rd":
    opcode:
    - "@custom3.rd"
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3.rd.rs1":
    opcode:
    - "@custom3.rd.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3.rd.rs1.rs2":
    opcode:
    - "@custom3.rd.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3.rs1":
    opcode:
    - "@custom3.rs1"
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@custom3.rs1.rs2":
    opcode:
    - "@custom3.rs1.rs2"
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x1E
    - 1..0=3
    opcode_group: opcodes-custom
    opcode_args: *2
    main_desc: custom
    main_id: "#"
    desc:
      custom:
        "#":
          text: []
  "@fence.tso":
    opcode:
    - "@fence.tso"
    - 31..28=8
    - 27..24=3
    - 23..20=3
    - 19..15=ignore
    - 14..12=0
    - 11..7=ignore
    - 6..2=0x03
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *1
  "@fmv.s.x":
    opcode:
    - "@fmv.s.x"
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1E
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: &3
    - rd
    - rs1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - The FMV.W.X and FMV.X.W instructions were previously called FMV.S.X and
            FMV.X.S
  "@fmv.x.s":
    opcode:
    - "@fmv.x.s"
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - The FMV.W.X and FMV.X.W instructions were previously called FMV.S.X and
            FMV.X.S
  "@frcsr":
    opcode:
    - "@frcsr"
    - rd
    - 19..15=0
    - 31..20=0x003
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: &4
    - rd
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - register can be read and written with the FRCSR and FSCSR instructions,
            which are assembler pseudoinstructions built on the underlying CSR access
            instructions
          - FRCSR reads
  "@frflags":
    opcode:
    - "@frflags"
    - rd
    - 19..15=0
    - 31..20=0x001
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - ". FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception
            Flags field"
  "@frrm":
    opcode:
    - "@frrm"
    - rd
    - 19..15=0
    - 31..20=0x002
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - The FRRM instruction reads the Rounding Mode field
  "@fscsr":
    opcode:
    - "@fscsr"
    - rd
    - rs1
    - 31..20=0x003
    - 14..12=1
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - register can be read and written with the FRCSR and FSCSR instructions,
            which are assembler pseudoinstructions built on the underlying CSR access
            instructions
          - FSCSR swaps the value in
  "@fsflags":
    opcode:
    - "@fsflags"
    - rd
    - rs1
    - 31..20=0x001
    - 14..12=1
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - ". FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception
            Flags field"
  "@fsflagsi":
    opcode:
    - "@fsflagsi"
    - rd
    - zimm
    - 31..20=0x001
    - 14..12=5
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: &5
    - rd
    - zimm
  "@fsrm":
    opcode:
    - "@fsrm"
    - rd
    - rs1
    - 31..20=0x002
    - 14..12=1
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#floating-point-control-and-status-register"
    desc:
      f:
        "#floating-point-control-and-status-register":
          text:
          - FSRM swaps the value in
  "@fsrmi":
    opcode:
    - "@fsrmi"
    - rd
    - zimm
    - 31..20=0x002
    - 14..12=5
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *5
  "@rdcycle":
    opcode:
    - "@rdcycle"
    - rd
    - 19..15=0
    - 31..20=0xC00
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - In particular, the RDCYCLE, RDTIME, and RDINSTRET pseudoinstructions read
            the full 64 bits of the
          - The RDCYCLE pseudoinstruction reads the low XLEN bits of the
          - RDCYCLE is intended to return the number of cycles executed by the processor
            core, not the hart
          - "Precisely defining what is a &acirc;\x80\x9Cclock cycle&acirc;\x80\x9D
            is also difficult given the range of implementations (including software
            emulations), but the intent is that RDCYCLE is used for performance monitoring
            along with the other performance counters"
          - The intent of RDCYCLE was primarily performance monitoring/tuning, and
            the specification was written with that goal in mind.
          - On some simple platforms, cycle count might represent a valid implementation
            of RDTIME, in which case RDTIME and RDCYCLE may return the same result.
  "@rdcycleh":
    opcode:
    - "@rdcycleh"
    - rd
    - 19..15=0
    - 31..20=0xC80
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - Hence, the RDCYCLEH, RDTIMEH, and RDINSTRETH instructions are RV32I-only.
          - "RDCYCLEH is an RV32I-only instruction that reads bits 63&acirc;\x80\x9332
            of the same cycle counter"
  "@rdinstret":
    opcode:
    - "@rdinstret"
    - rd
    - 19..15=0
    - 31..20=0xC02
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - In particular, the RDCYCLE, RDTIME, and RDINSTRET pseudoinstructions read
            the full 64 bits of the
          - The RDINSTRET pseudoinstruction reads the low XLEN bits of the
  "@rdinstreth":
    opcode:
    - "@rdinstreth"
    - rd
    - 19..15=0
    - 31..20=0xC82
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - Hence, the RDCYCLEH, RDTIMEH, and RDINSTRETH instructions are RV32I-only.
          - "RDINSTRETH is an RV32I-only instruction that reads bits 63&acirc;\x80\x9332
            of the same instruction counter"
  "@rdtime":
    opcode:
    - "@rdtime"
    - rd
    - 19..15=0
    - 31..20=0xC01
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - In particular, the RDCYCLE, RDTIME, and RDINSTRET pseudoinstructions read
            the full 64 bits of the
          - The RDTIME pseudoinstruction reads the low XLEN bits of the
          - On some simple platforms, cycle count might represent a valid implementation
            of RDTIME, in which case RDTIME and RDCYCLE may return the same result.
  "@rdtimeh":
    opcode:
    - "@rdtimeh"
    - rd
    - 19..15=0
    - 31..20=0xC81
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *4
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    main_desc: counters
    main_id: "#zicntr-standard-extension-for-base-counters-and-timers"
    desc:
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - Hence, the RDCYCLEH, RDTIMEH, and RDINSTRETH instructions are RV32I-only.
          - "RDTIMEH is an RV32I-only instruction that reads bits 63&acirc;\x80\x9332
            of the same real-time counter"
  "@sbreak":
    opcode:
    - "@sbreak"
    - 11..7=0
    - 19..15=0
    - 31..20=0x001
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#environment-call-and-breakpoints"
    desc:
      rv32:
        "#environment-call-and-breakpoints":
          text:
          - ECALL and EBREAK were previously named SCALL and SBREAK
  "@scall":
    opcode:
    - "@scall"
    - 11..7=0
    - 19..15=0
    - 31..20=0x000
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#environment-call-and-breakpoints"
    desc:
      rv32:
        "#environment-call-and-breakpoints":
          text:
          - ECALL and EBREAK were previously named SCALL and SBREAK
  "@slli.rv32":
    opcode:
    - "@slli.rv32"
    - rd
    - rs1
    - 31..25=0
    - shamtw
    - 14..12=1
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
  "@srai.rv32":
    opcode:
    - "@srai.rv32"
    - rd
    - rs1
    - 31..25=32
    - shamtw
    - 14..12=5
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
  "@srli.rv32":
    opcode:
    - "@srli.rv32"
    - rd
    - rs1
    - 31..25=0
    - shamtw
    - 14..12=5
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes-pseudo
    opcode_args: *3
  add:
    opcode:
    - add
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=0
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &6
    - rd
    - rs1
    - rs2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-computational-instructions"
    desc:
      rv32:
        "#integer-computational-instructions":
          text:
          - add t0, t1, t2 slti t3, t2, 0 slt t4, t0, t1 bne t3, t4, overflow In RV64I,
            checks of 32-bit signed additions can be optimized further by comparing
            the results of ADD and ADDW on the operands.
        "#integer-register-register-operations":
          text:
          - ADD performs the addition of rs1 and rs2
        "#nop-instruction":
          text:
          - In particular, address-generation functional units can execute ADDI using
            the same hardware needed for base+offset address calculations, while register-register
            ADD or logical/shift operations require additional hardware.
        "#sec:rv32i-hints":
          text:
          - For example, ADD is a HINT if the destination register is
          - However, a simple implementation can simply execute the HINT as an ADD
            of rs1 and rs2 that writes
      rv64:
        "#integer-computational-instructions":
          text:
          - A few new instructions (ADD[I]W/SUBW/SxxW) are required for addition and
            shifts to ensure reasonable performance for 32-bit values.
        "#integer-register-register-operations":
          text:
          - ADDW and SUBW are RV64I-only instructions that are defined analogously
            to ADD and SUB but operate on 32-bit values and produce signed 32-bit
            results
      rv128:
        "#rv128":
          text:
          - To improve compatibility with RV64, in a reverse of how RV32 to RV64 was
            handled, we might change the decoding around to rename RV64I ADD as a
            64-bit ADDD, and add a 128-bit ADDQ in what was previously the OP-64 major
            opcode (now renamed the OP-128 major opcode).
      c:
        "#integer-register-register-operations":
          text:
          - using register-renaming hardware, may find it more convenient to expand
            C.MV to MV instead of ADD, at slight additional hardware cost.
        "#sec:rvc-hints":
          text:
          - ADD x0 , x0 , t0 .
  addi:
    opcode:
    - addi
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ADDI adds the sign-extended 12-bit immediate to register rs1
          - ADDI rd, rs1, 0 is used to implement the MV rd, rs1 assembler pseudoinstruction.
        "#nop-instruction":
          text:
          - NOP is encoded as ADDI x0, x0, 0 .
          - ADDI was chosen for the NOP encoding as this is most likely to take fewest
            resources to execute across a range of systems (if not optimized away
            in decode)
          - Also, an ADDI functional unit is more likely to be available in a superscalar
            design as adds are the most common operation
          - In particular, address-generation functional units can execute ADDI using
            the same hardware needed for base+offset address calculations, while register-register
            ADD or logical/shift operations require additional hardware.
      c:
        "#integer-register-register-operations":
          text:
          - C.MV expands to a different instruction than the canonical MV pseudoinstruction,
            which instead uses ADDI
  addiw:
    opcode:
    - addiw
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x06
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - ADDIW is an RV64I instruction that adds the sign-extended 12-bit immediate
            to register rs1 and produces the proper sign-extension of a 32-bit result
            in rd
          - Note, ADDIW rd, rs1, 0 writes the sign-extension of the lower 32 bits
            of register rs1 into register rd (assembler pseudoinstruction SEXT.W).
      c:
        "#overview":
          text:
          - In addition, RV32C includes a compressed jump and link instruction to
            compress short-range subroutine calls, where the same opcode is used to
            compress ADDIW for RV64C and RV128C.
  addw:
    opcode:
    - addw
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=0
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-computational-instructions"
    desc:
      rv32:
        "#integer-computational-instructions":
          text:
          - add t0, t1, t2 slti t3, t2, 0 slt t4, t0, t1 bne t3, t4, overflow In RV64I,
            checks of 32-bit signed additions can be optimized further by comparing
            the results of ADD and ADDW on the operands.
      rv64:
        "#integer-register-register-operations":
          text:
          - ADDW and SUBW are RV64I-only instructions that are defined analogously
            to ADD and SUB but operate on 32-bit values and produce signed 32-bit
            results
  amoadd.d:
    opcode:
    - amoadd.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoadd.w:
    opcode:
    - amoadd.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoand.d:
    opcode:
    - amoand.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=3
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoand.w:
    opcode:
    - amoand.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=3
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomax.d:
    opcode:
    - amomax.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=5
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomax.w:
    opcode:
    - amomax.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=5
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomaxu.d:
    opcode:
    - amomaxu.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=7
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomaxu.w:
    opcode:
    - amomaxu.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=7
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomin.d:
    opcode:
    - amomin.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=4
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amomin.w:
    opcode:
    - amomin.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=4
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amominu.d:
    opcode:
    - amominu.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=6
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amominu.w:
    opcode:
    - amominu.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=6
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoor.d:
    opcode:
    - amoor.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=2
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoor.w:
    opcode:
    - amoor.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=2
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoswap.d:
    opcode:
    - amoswap.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=1
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoswap.w:
    opcode:
    - amoswap.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=1
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoxor.d:
    opcode:
    - amoxor.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=1
    - 28..27=0
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  amoxor.w:
    opcode:
    - amoxor.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=1
    - 28..27=0
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:amo"
    desc:
      a:
        "#sec:amo":
          text:
          - These AMO instructions atomically load a data value from the address in
            rs1 , place the value into register rd , apply a binary operator to the
            loaded value and the original value in rs2 , then store the result back
            to the original address in rs1
      machine:
        "#sec:mcause":
          text:
          - 64 Reserved Note that load and load-reserved instructions generate load
            exceptions, whereas store, store-conditional, and AMO instructions generate
            store/AMO exceptions.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - As enumerated in the table, a synchronous exception may write to the trap
            instruction register a standard transformation of the trapping instruction
            only for exceptions that arise from explicit memory accesses (from loads,
            stores, and AMO instructions)
  and:
    opcode:
    - and
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=7
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
        "#integer-register-register-operations":
          text:
          - AND, OR, and XOR perform bitwise logical operations.
      a:
        "#sec:amo":
          text:
          - The operations supported are swap, integer add, bitwise AND, bitwise OR,
            bitwise XOR, and signed and unsigned integer maximum and minimum
      c:
        "#integer-register-immediate-operations":
          text:
          - "C.ANDI is a CB-format instruction that computes the bitwise AND of the
            value in register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
        "#integer-register-register-operations":
          text:
          - "C.AND computes the bitwise AND of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
      hypervisor:
        "#sec:hinterruptregs":
          text:
          - ", and is 1 if and only if the bitwise logical-AND of CSRs"
      v:
        "#_vector_integer_compare_instructions":
          text:
          - Compares effectively AND in the mask under a mask-undisturbed policy e.g,
  andi:
    opcode:
    - andi
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
  auipc:
    opcode:
    - auipc
    - rd
    - imm20
    - 6..2=0x05
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &11
    - rd
    - imm20
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - AUIPC (add upper immediate to
          - AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest
            12 bits with zeros, adds this offset to the address of the AUIPC instruction,
            then places the result in register rd .
          - The AUIPC instruction supports two-instruction sequences to access arbitrary
            offsets from the PC for both control-flow transfers and data accesses
          - The combination of an AUIPC and the 12-bit immediate in a JALR can transfer
            control to any 32-bit PC-relative address, while an AUIPC plus the 12-bit
            immediate offset in regular load or store instructions can access any
            32-bit PC-relative data address.
        "#unconditional-jumps":
          text:
          - Similarly, AUIPC then JALR can jump anywhere in a 32-bit
          - In practice, most uses of JALR will have either a zero immediate or be
            paired with a LUI or AUIPC, so the slight reduction in range is not significant.
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - AUIPC (add upper immediate to
          - AUIPC is used to build
          - AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest
            12 bits with zeros, sign-extends the result to 64 bits, adds it to the
            address of the AUIPC instruction, then places the result in register rd
            .
          - Note that the set of address offsets that can be formed by pairing LUI
            with LD, AUIPC with JALR, etc.in RV64I is [
  beq:
    opcode:
    - beq
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=0
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &7
    - rs1
    - rs2
    - bimm12
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BEQ and BNE take the branch if registers rs1 and rs2 are equal or unequal
            respectively
  bge:
    opcode:
    - bge
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=5
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *7
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BGE and BGEU take the branch if rs1 is greater than or equal to rs2 ,
            using signed and unsigned comparison respectively
          - Note, BGT, BGTU, BLE, and BLEU can be synthesized by reversing the operands
            to BLT, BLTU, BGE, and BGEU, respectively.
  bgeu:
    opcode:
    - bgeu
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=7
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *7
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BGE and BGEU take the branch if rs1 is greater than or equal to rs2 ,
            using signed and unsigned comparison respectively
          - Note, BGT, BGTU, BLE, and BLEU can be synthesized by reversing the operands
            to BLT, BLTU, BGE, and BGEU, respectively.
  blt:
    opcode:
    - blt
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=4
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *7
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BLT and BLTU take the branch if rs1 is less than rs2 , using signed and
            unsigned comparison respectively
          - Note, BGT, BGTU, BLE, and BLEU can be synthesized by reversing the operands
            to BLT, BLTU, BGE, and BGEU, respectively.
  bltu:
    opcode:
    - bltu
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=6
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *7
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BLT and BLTU take the branch if rs1 is less than rs2 , using signed and
            unsigned comparison respectively
          - Note, BGT, BGTU, BLE, and BLEU can be synthesized by reversing the operands
            to BLT, BLTU, BGE, and BGEU, respectively.
          - Signed array bounds may be checked with a single BLTU instruction, since
            any negative index will compare greater than any nonnegative bound.
  bne:
    opcode:
    - bne
    - bimm12hi
    - rs1
    - rs2
    - bimm12lo
    - 14..12=1
    - 6..2=0x18
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *7
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#conditional-branches"
    desc:
      rv32:
        "#conditional-branches":
          text:
          - BEQ and BNE take the branch if registers rs1 and rs2 are equal or unequal
            respectively
  c.add:
    opcode:
    - c.add
    - 1..0=2
    - 15..13=4
    - 12=1
    - 11..2=ignore
    - "#"
    - "!rs1"
    - "="
    - c.ebreak;
    - "!rs2=c.jalr"
    opcode_group: opcodes-rvc
    opcode_args: &29
    - "!rs1"
    - "!rs2=c.jalr"
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - C.ADD adds the values in registers rd and rs2 and writes the result to
            register rd
          - C.ADD expands into
          - ". C.ADD is only valid when rs2 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rs2 &acirc;\x80\x84=&acirc;\x80\x84 x0 correspond
            to the C.JALR and C.EBREAK instructions"
        "#breakpoint-instruction":
          text:
          - C.EBREAK shares the opcode with the C.ADD instruction, but with rd and
            rs2 both zero, thus can also use the CR format.
        "#sec:rvc-hints":
          text:
          - C.ADD x0 , t0 ), or because rd is overwritten with a copy of itself (e.g
          - C.ADD x0 , t0 might not encode the same HINT as
  c.addi:
    opcode:
    - c.addi
    - 1..0=1
    - 15..13=0
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - C.ADDI adds the non-zero sign-extended 6-bit immediate to the value in
            register rd then writes the result to rd
          - C.ADDI expands into
          - ". C.ADDI is only valid when rd &acirc;\x89&nbsp;"
        "#sec:rvc-hints":
          text:
          - C.ADDI t0 , 0
  c.addi4spn:
    opcode:
    - c.addi4spn
    - 1..0=0
    - 15..13=0
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - C.ADDI4SPN is a CIW-format instruction that adds a zero -extended non-zero
            immediate, scaled by 4, to the stack pointer,
          - ". C.ADDI4SPN is only valid when nzuimm &acirc;\x89&nbsp;"
  c.addw:
    opcode:
    - c.addw
    - 1..0=1
    - 15..13=4
    - 12=1
    - 11..10=3
    - 9..7=ignore
    - 6..5=1
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.ADDW is an RV64C/RV128C-only instruction that adds the values in registers
            rd&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.ADDW expands into"
  c.and:
    opcode:
    - c.and
    - 1..0=1
    - 15..13=4
    - 12=0
    - 11..10=3
    - 9..7=ignore
    - 6..5=3
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.AND computes the bitwise AND of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.AND expands into"
  c.andi:
    opcode:
    - c.andi
    - 1..0=1
    - 15..13=4
    - 12=ignore
    - 11..10=2
    - 9..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - "C.ANDI is a CB-format instruction that computes the bitwise AND of the
            value in register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.ANDI expands to"
  c.beqz:
    opcode:
    - c.beqz
    - 1..0=1
    - 15..13=6
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - C.BEQZ performs conditional control transfers
          - "C.BEQZ takes the branch if the value in register rs1&acirc;\x80\x86 &acirc;\x80&sup2;"
  c.bnez:
    opcode:
    - c.bnez
    - 1..0=1
    - 15..13=7
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - "C.BNEZ is defined analogously, but it takes the branch if rs1&acirc;\x80\x86
            &acirc;\x80&sup2;"
  c.fld:
    opcode:
    - c.fld
    - 1..0=0
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.lq
    - for
    - RV128
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.FLD is an RV32DC/RV64DC-only instruction that loads a double-precision
            floating-point value from memory into floating-point register rd&acirc;\x80\x86
            &acirc;\x80&sup2;"
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
  c.fldsp:
    opcode:
    - c.fldsp
    - 1..0=2
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.lqsp
    - for
    - RV128
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.FLDSP is an RV32DC/RV64DC-only instruction that loads a double-precision
            floating-point value from memory into floating-point register rd
  c.flw:
    opcode:
    - c.flw
    - 1..0=0
    - 15..13=3
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.ld
    - for
    - RV64
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.FLW is an RV32FC-only instruction that loads a single-precision floating-point
            value from memory into floating-point register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
  c.flwsp:
    opcode:
    - c.flwsp
    - 1..0=2
    - 15..13=3
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.ldsp
    - for
    - RV64
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.FLWSP is an RV32FC-only instruction that loads a single-precision floating-point
            value from memory into floating-point register rd
  c.fsd:
    opcode:
    - c.fsd
    - 1..0=0
    - 15..13=5
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.sq
    - for
    - RV128
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.FSD is an RV32DC/RV64DC-only instruction that stores a double-precision
            floating-point value in floating-point register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
  c.fsdsp:
    opcode:
    - c.fsdsp
    - 1..0=2
    - 15..13=5
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.sqsp
    - for
    - RV128
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.FSDSP is an RV32DC/RV64DC-only instruction that stores a double-precision
            floating-point value in floating-point register rs2 to memory
  c.fsw:
    opcode:
    - c.fsw
    - 1..0=0
    - 15..13=7
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.sd
    - for
    - RV64
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.FSW is an RV32FC-only instruction that stores a single-precision floating-point
            value in floating-point register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
  c.fswsp:
    opcode:
    - c.fswsp
    - 1..0=2
    - 15..13=7
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.sdsp
    - for
    - RV64
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.FSWSP is an RV32FC-only instruction that stores a single-precision floating-point
            value in floating-point register rs2 to memory
  c.j:
    opcode:
    - c.j
    - 1..0=1
    - 15..13=5
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - C.J performs an unconditional control transfer
          - C.J can therefore target a
          - C.J expands to
          - C.JAL is an RV32C-only instruction that performs the same operation as
            C.J, but additionally writes the address of the instruction following
            the jump (
  c.jal:
    opcode:
    - c.jal
    - 1..0=1
    - 15..13=1
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.addiw
    - for
    - RV64
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#control-transfer-instructions"
    desc:
      c:
        "#control-transfer-instructions":
          text:
          - C.JAL is an RV32C-only instruction that performs the same operation as
            C.J, but additionally writes the address of the instruction following
            the jump (
          - ". C.JAL expands to"
  c.li:
    opcode:
    - c.li
    - 1..0=1
    - 15..13=2
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-constant-generation-instructions"
    desc:
      c:
        "#integer-constant-generation-instructions":
          text:
          - C.LI loads the sign-extended 6-bit immediate, imm , into register rd
          - C.LI expands into
          - ". C.LI is only valid when rd &acirc;\x89&nbsp;"
  c.lui:
    opcode:
    - c.lui
    - 1..0=1
    - 15..13=3
    - 12=ignore
    - 11..2=ignore
    - "#"
    - c.addi16sp
    - when
    - rd=2
    opcode_group: opcodes-rvc
    opcode_args: &27
    - rd=2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-constant-generation-instructions"
    desc:
      c:
        "#integer-constant-generation-instructions":
          text:
          - "C.LUI loads the non-zero 6-bit immediate field into bits 17&acirc;\x80\x9312
            of the destination register, clears the bottom 12 bits, and sign-extends
            bit 17 into all higher bits of the destination"
          - C.LUI expands into
          - ". C.LUI is only valid when rd &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84{
            x0 , x2 }"
        "#integer-register-immediate-operations":
          text:
          - C.ADDI16SP shares the opcode with C.LUI, but has a destination field of
  c.lw:
    opcode:
    - c.lw
    - 1..0=0
    - 15..13=2
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.LW loads a 32-bit value from memory into register rd&acirc;\x80\x86
            &acirc;\x80&sup2;"
  c.lwsp:
    opcode:
    - c.lwsp
    - 1..0=2
    - 15..13=2
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.LWSP loads a 32-bit value from memory into register rd
          - ". C.LWSP is only valid when rd &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rd &acirc;\x80\x84=&acirc;\x80\x84 x0 are reserved."
  c.mv:
    opcode:
    - c.mv
    - 1..0=2
    - 15..13=4
    - 12=0
    - 11..2=ignore
    - "#"
    - "!rs2"
    - "="
    - c.jr
    opcode_group: opcodes-rvc
    opcode_args: &28
    - "!rs2"
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - C.MV copies the value in register rs2 into register rd
          - C.MV expands into
          - ". C.MV is only valid when rs2 &acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x84
            x0 ; the code points with rs2 &acirc;\x80\x84=&acirc;\x80\x84 x0 correspond
            to the C.JR instruction"
          - C.MV expands to a different instruction than the canonical MV pseudoinstruction,
            which instead uses ADDI
          - using register-renaming hardware, may find it more convenient to expand
            C.MV to MV instead of ADD, at slight additional hardware cost.
  c.or:
    opcode:
    - c.or
    - 1..0=1
    - 15..13=4
    - 12=0
    - 11..10=3
    - 9..7=ignore
    - 6..5=2
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.OR computes the bitwise OR of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.OR expands into"
  c.slli:
    opcode:
    - c.slli
    - 1..0=2
    - 15..13=0
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - C.SLLI is a CI-format instruction that performs a logical left shift of
            the value in register rd then writes the result to rd
          - For RV128C, a shift amount of zero is used to encode a shift of 64. C.SLLI
            expands into
  c.srai:
    opcode:
    - c.srai
    - 1..0=1
    - 15..13=4
    - 12=ignore
    - 11..10=1
    - 9..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - C.SRAI is defined analogously to C.SRLI, but instead performs an arithmetic
            right shift
          - C.SRAI expands to
  c.srli:
    opcode:
    - c.srli
    - 1..0=1
    - 15..13=4
    - 12=ignore
    - 11..10=0
    - 9..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-immediate-operations"
    desc:
      c:
        "#integer-register-immediate-operations":
          text:
          - "C.SRLI is a CB-format instruction that performs a logical right shift
            of the value in register rd&acirc;\x80\x86 &acirc;\x80&sup2;"
          - "For RV128C, a shift amount of zero is used to encode a shift of 64. Furthermore,
            the shift amount is sign-extended for RV128C, and so the legal shift amounts
            are 1&acirc;\x80\x9331, 64, and 96&acirc;\x80\x93127. C.SRLI expands into"
          - C.SRAI is defined analogously to C.SRLI, but instead performs an arithmetic
            right shift
  c.sub:
    opcode:
    - c.sub
    - 1..0=1
    - 15..13=4
    - 12=0
    - 11..10=3
    - 9..7=ignore
    - 6..5=0
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.SUB subtracts the value in register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.SUB expands into"
  c.subw:
    opcode:
    - c.subw
    - 1..0=1
    - 15..13=4
    - 12=1
    - 11..10=3
    - 9..7=ignore
    - 6..5=0
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.SUBW is an RV64C/RV128C-only instruction that subtracts the value in
            register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.SUBW expands into"
  c.sw:
    opcode:
    - c.sw
    - 1..0=0
    - 15..13=6
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#register-based-loads-and-stores"
    desc:
      c:
        "#register-based-loads-and-stores":
          text:
          - "C.SW stores a 32-bit value in register rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
  c.swsp:
    opcode:
    - c.swsp
    - 1..0=2
    - 15..13=6
    - 12=ignore
    - 11..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#stack-pointer-based-loads-and-stores"
    desc:
      c:
        "#stack-pointer-based-loads-and-stores":
          text:
          - C.SWSP stores a 32-bit value in register rs2 to memory
  c.xor:
    opcode:
    - c.xor
    - 1..0=1
    - 15..13=4
    - 12=0
    - 11..10=3
    - 9..7=ignore
    - 6..5=1
    - 4..2=ignore
    opcode_group: opcodes-rvc
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    main_desc: c
    main_id: "#integer-register-register-operations"
    desc:
      c:
        "#integer-register-register-operations":
          text:
          - "C.XOR computes the bitwise XOR of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
          - ". C.XOR expands into"
  csrrc:
    opcode:
    - csrrc
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRC (Atomic Read and Clear Bits in CSR) instruction reads the value
            of the CSR, zero-extends the value to XLEN bits, and writes it to integer
            register rd
          - For both CSRRS and CSRRC, if rs1 =
          - Both CSRRS and CSRRC always read the addressed CSR and cause any read
            side effects regardless of rs1 and rd fields
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - In the opcode of i , rd is set to r i is a CSR instruction, and in the
            opcode of i , csr is set to r , unless i is CSRRS or CSRRC and rs1 is
            set to
      machine:
        "#machine-interrupt-registers-mip-and-mie":
          text:
          - Only the software-writable SEIP bit participates in the read-modify-write
            sequence of a CSRRS or CSRRC instruction.
  csrrci:
    opcode:
    - csrrci
    - rd
    - rs1
    - imm12
    - 14..12=7
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
          - For CSRRSI and CSRRCI, if the uimm[4:0] field is zero, then these instructions
            will not write to the CSR, and shall not cause any of the side effects
            that might otherwise occur on a CSR write, nor raise illegal instruction
            exceptions on accesses to read-only CSRs
          - Both CSRRSI and CSRRCI will always read the CSR and cause any read side
            effects regardless of rd and rs1 fields.
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - or i is CSRRSI or CSRRCI and uimm[4:0] is set to zero
  csrrs:
    opcode:
    - csrrs
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRS (Atomic Read and Set Bits in CSR) instruction reads the value
            of the CSR, zero-extends the value to XLEN bits, and writes it to integer
            register rd
          - For both CSRRS and CSRRC, if rs1 =
          - Both CSRRS and CSRRC always read the addressed CSR and cause any read
            side effects regardless of rs1 and rd fields
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
          - The assembler pseudoinstruction to read a CSR, CSRR rd, csr , is encoded
            as CSRRS rd, csr, x0
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - RV32I provides a number of 64-bit read-only user-level counters, which
            are mapped into the 12-bit CSR address space and accessed in 32-bit pieces
            using CSRRS instructions
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - In the opcode of i , rd is set to r i is a CSR instruction, and in the
            opcode of i , csr is set to r , unless i is CSRRS or CSRRC and rs1 is
            set to
      machine:
        "#machine-interrupt-registers-mip-and-mie":
          text:
          - Only the software-writable SEIP bit participates in the read-modify-write
            sequence of a CSRRS or CSRRC instruction.
  csrrsi:
    opcode:
    - csrrsi
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
          - For CSRRSI and CSRRCI, if the uimm[4:0] field is zero, then these instructions
            will not write to the CSR, and shall not cause any of the side effects
            that might otherwise occur on a CSR write, nor raise illegal instruction
            exceptions on accesses to read-only CSRs
          - Both CSRRSI and CSRRCI will always read the CSR and cause any read side
            effects regardless of rd and rs1 fields.
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - or i is CSRRSI or CSRRCI and uimm[4:0] is set to zero
  csrrw:
    opcode:
    - csrrw
    - rd
    - rs1
    - imm12
    - 14..12=1
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRW (Atomic Read/Write CSR) instruction atomically swaps values
            in the CSRs and integer registers
          - CSRRW reads the old value of the CSR, zero-extends the value to XLEN bits,
            then writes it to integer register rd
          - A CSRRW with rs1 =
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
          - The assembler pseudoinstruction to write a CSR, CSRW csr, rs1 , is encoded
            as CSRRW x0, csr, rs1 , while CSRWI csr, uimm , is encoded as CSRRWI x0,
            csr, uimm .
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - In the opcode of i , rs1 , rs2 , or rs3 is set to r i is a CSR instruction,
            and in the opcode of i , csr is set to r , unless i is CSRRW or CSRRWI
            and rd is set to
  csrrwi:
    opcode:
    - csrrwi
    - rd
    - rs1
    - imm12
    - 14..12=5
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    main_desc: csr
    main_id: "#csr-instructions"
    desc:
      csr:
        "#csr-instructions":
          text:
          - The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and
            CSRRC respectively, except they update the CSR using an XLEN-bit value
            obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field
            encoded in the rs1 field instead of a value from an integer register
          - For CSRRWI, if rd =
          - The assembler pseudoinstruction to write a CSR, CSRW csr, rs1 , is encoded
            as CSRRW x0, csr, rs1 , while CSRWI csr, uimm , is encoded as CSRRWI x0,
            csr, uimm .
      rvwmo:
        "#sec:memorymodel:dependencies":
          text:
          - In the opcode of i , rs1 , rs2 , or rs3 is set to r i is a CSR instruction,
            and in the opcode of i , csr is set to r , unless i is CSRRW or CSRRWI
            and rd is set to
  div:
    opcode:
    - div
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=4
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - DIV and DIVU perform an XLEN bits by XLEN bits signed and unsigned integer
            division of rs1 by rs2 , rounding towards zero
          - 'If both the quotient and remainder are required from the same division,
            the recommended code sequence is: DIV[U] rdq, rs1, rs2 ; REM[U] rdr, rs1,
            rs2 ( rdq rs1 or rs2 )'
          - DIV[W]
  divu:
    opcode:
    - divu
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=5
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - DIV and DIVU perform an XLEN bits by XLEN bits signed and unsigned integer
            division of rs1 by rs2 , rounding towards zero
          - DIVU[W]
  divuw:
    opcode:
    - divuw
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=5
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - DIVW and DIVUW are RV64 instructions that divide the lower 32 bits of
            rs1 by the lower 32 bits of rs2 , treating them as signed and unsigned
            integers respectively, placing the 32-bit quotient in rd , sign-extended
            to 64 bits
  divw:
    opcode:
    - divw
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=4
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - DIVW and DIVUW are RV64 instructions that divide the lower 32 bits of
            rs1 by the lower 32 bits of rs2 , treating them as signed and unsigned
            integers respectively, placing the 32-bit quotient in rd , sign-extended
            to 64 bits
  dret:
    opcode:
    - dret
    - 11..7=0
    - 19..15=0
    - 31..20=0x7b2
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
  ebreak:
    opcode:
    - ebreak
    - 11..7=0
    - 19..15=0
    - 31..20=0x001
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#rv32"
    desc:
      rv32:
        "#rv32":
          text:
          - RV32I contains 40 unique instructions, though a simple implementation
            might cover the ECALL/EBREAK instructions with a single SYSTEM hardware
            instruction that always traps and might be able to implement the FENCE
            instruction as a NOP, reducing base instruction count to 38 total
        "#environment-call-and-breakpoints":
          text:
          - The EBREAK instruction is used to return control to a debugging environment.
          - ECALL and EBREAK were previously named SCALL and SBREAK
          - EBREAK was primarily designed to be used by a debugger to cause execution
            to stop and fall back into the debugger
          - EBREAK is also used by the standard gcc compiler to mark code paths that
            should not be executed.
          - "Another use of EBREAK is to support &acirc;\x80\x9Csemihosting&acirc;\x80\x9D,
            where the execution environment includes a debugger that can provide services
            over an alternate system call interface built around the EBREAK instruction"
          - Because the RISC-V base ISAs do not provide more than one EBREAK instruction,
            RISC-V semihosting uses a special sequence of instructions to distinguish
            a semihosting EBREAK from a debugger inserted EBREAK
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - Instructions that cause synchronous exceptions, including ECALL and EBREAK,
            are not considered to retire and hence do not increment the
      machine:
        "#sec:mcause":
          text:
          - watchpoints) and environment break exceptions (which are raised by the
            EBREAK instruction).
        "#environment-call-and-breakpoint":
          text:
          - The EBREAK instruction is used by debuggers to cause control to be transferred
            back to a debugging environment
          - "As described in the &acirc;\x80\x9CC&acirc;\x80\x9D Standard Extension
            for Compressed Instructions in Volume I of this manual, the C.EBREAK instruction
            performs the same operation as the EBREAK instruction."
          - "ECALL and EBREAK cause the receiving privilege mode&acirc;\x80\x99s"
          - register to be set to the address of the ECALL or EBREAK instruction itself,
            not minstret
  ecall:
    opcode:
    - ecall
    - 11..7=0
    - 19..15=0
    - 31..20=0x000
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#rv32"
    desc:
      rv32:
        "#rv32":
          text:
          - RV32I contains 40 unique instructions, though a simple implementation
            might cover the ECALL/EBREAK instructions with a single SYSTEM hardware
            instruction that always traps and might be able to implement the FENCE
            instruction as a NOP, reducing base instruction count to 38 total
        "#environment-call-and-breakpoints":
          text:
          - The ECALL instruction is used to make a service request to the execution
            environment
          - ECALL and EBREAK were previously named SCALL and SBREAK
          - Semihosting is a form of service call and would be more naturally encoded
            as an ECALL using an existing ABI, but this would require the debugger
            to be able to intercept ECALLs, which is a newer addition to the debug
            standard
      counters:
        "#zicntr-standard-extension-for-base-counters-and-timers":
          text:
          - Instructions that cause synchronous exceptions, including ECALL and EBREAK,
            are not considered to retire and hence do not increment the
      machine:
        "#environment-call-and-breakpoint":
          text:
          - The ECALL instruction is used to make a request to the supporting execution
            environment
          - ECALL generates a different exception for each originating privilege mode
            so that environment call exceptions can be selectively delegated
          - "ECALL and EBREAK cause the receiving privilege mode&acirc;\x80\x99s"
          - register to be set to the address of the ECALL or EBREAK instruction itself,
            not minstret
  fadd.d:
    opcode:
    - fadd.d
    - rd
    - rs1
    - rs2
    - 31..27=0x00
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fadd.q:
    opcode:
    - fadd.q
    - rd
    - rs1
    - rs2
    - 31..27=0x00
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fadd.s:
    opcode:
    - fadd.s
    - rd
    - rs1
    - rs2
    - 31..27=0x00
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fclass.d:
    opcode:
    - fclass.d
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=1
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-classify-instruction"
    desc:
      d:
        "#double-precision-floating-point-classify-instruction":
          text:
          - The double-precision floating-point classify instruction, FCLASS.D, is
            defined analogously to its single-precision counterpart, but operates
            on double-precision operands.
  fclass.q:
    opcode:
    - fclass.q
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=1
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-floating-point-classify-instruction"
    desc:
      q:
        "#quad-precision-floating-point-classify-instruction":
          text:
          - The quad-precision floating-point classify instruction, FCLASS.Q, is defined
            analogously to its double-precision counterpart, but operates on quad-precision
            operands.
  fclass.s:
    opcode:
    - fclass.s
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=1
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-classify-instruction"
    desc:
      f:
        "#single-precision-floating-point-classify-instruction":
          text:
          - The FCLASS.S instruction examines the value in floating-point register
            rs1 and writes to integer register rd a 10-bit mask that indicates the
            class of the floating-point number
          - FCLASS.S does not set the floating-point exception flags
  fcvt.d.l:
    opcode:
    - fcvt.d.l
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x1A
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.D.W or FCVT.D.L converts a 32-bit or 64-bit signed integer, respectively,
            in integer register rs1 into a double-precision floating-point number
            in floating-point register rd
          - FCVT.L[U].D and FCVT.D.L[U] are RV64-only instructions
  fcvt.d.lu:
    opcode:
    - fcvt.d.lu
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x1A
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.D, FCVT.LU.D, FCVT.D.WU, and FCVT.D.LU variants convert to or
            from unsigned integer values
  fcvt.d.q:
    opcode:
    - fcvt.d.q
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x08
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.D.Q or FCVT.Q.D converts a quad-precision floating-point number to
            a double-precision floating-point number, or vice-versa, respectively.
  fcvt.d.s:
    opcode:
    - fcvt.d.s
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x08
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - The double-precision to single-precision and single-precision to double-precision
            conversion instructions, FCVT.S.D and FCVT.D.S, are encoded in the OP-FP
            major opcode space and both the source and destination are floating-point
            registers
          - FCVT.S.D rounds according to the RM field; FCVT.D.S will never round.
  fcvt.d.w:
    opcode:
    - fcvt.d.w
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1A
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.D.W or FCVT.D.L converts a 32-bit or 64-bit signed integer, respectively,
            in integer register rs1 into a double-precision floating-point number
            in floating-point register rd
          - Note FCVT.D.W[U] always produces an exact result and is unaffected by
            rounding mode.
  fcvt.d.wu:
    opcode:
    - fcvt.d.wu
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x1A
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.D, FCVT.LU.D, FCVT.D.WU, and FCVT.D.LU variants convert to or
            from unsigned integer values
  fcvt.l.d:
    opcode:
    - fcvt.l.d
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x18
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.W.D or FCVT.L.D converts a double-precision floating-point number
            in floating-point register rs1 to a signed 32-bit or 64-bit integer, respectively,
            in integer register rd
  fcvt.l.q:
    opcode:
    - fcvt.l.q
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x18
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.W.Q or FCVT.L.Q converts a quad-precision floating-point number to
            a signed 32-bit or 64-bit integer, respectively
  fcvt.l.s:
    opcode:
    - fcvt.l.s
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x18
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.W.S or FCVT.L.S converts a floating-point number in floating-point
            register rs1 to a signed 32-bit or 64-bit integer, respectively, in integer
            register rd
          - FCVT.L.S
  fcvt.lu.d:
    opcode:
    - fcvt.lu.d
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x18
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.D, FCVT.LU.D, FCVT.D.WU, and FCVT.D.LU variants convert to or
            from unsigned integer values
  fcvt.lu.q:
    opcode:
    - fcvt.lu.q
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x18
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.WU.Q, FCVT.LU.Q, FCVT.Q.WU, and FCVT.Q.LU variants convert to or
            from unsigned integer values
  fcvt.lu.s:
    opcode:
    - fcvt.lu.s
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x18
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.S, FCVT.LU.S, FCVT.S.WU, and FCVT.S.LU variants convert to or
            from unsigned integer values
          - FCVT.LU.S
  fcvt.q.d:
    opcode:
    - fcvt.q.d
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x08
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.D.Q or FCVT.Q.D converts a quad-precision floating-point number to
            a double-precision floating-point number, or vice-versa, respectively.
  fcvt.q.l:
    opcode:
    - fcvt.q.l
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x1A
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.Q.W or FCVT.Q.L converts a 32-bit or 64-bit signed integer, respectively,
            into a quad-precision floating-point number
          - FCVT.L[U].Q and FCVT.Q.L[U] are RV64-only instructions.
  fcvt.q.lu:
    opcode:
    - fcvt.q.lu
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x1A
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.WU.Q, FCVT.LU.Q, FCVT.Q.WU, and FCVT.Q.LU variants convert to or
            from unsigned integer values
  fcvt.q.s:
    opcode:
    - fcvt.q.s
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x08
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.S.Q or FCVT.Q.S converts a quad-precision floating-point number to
            a single-precision floating-point number, or vice-versa, respectively
  fcvt.q.w:
    opcode:
    - fcvt.q.w
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1A
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.Q.W or FCVT.Q.L converts a 32-bit or 64-bit signed integer, respectively,
            into a quad-precision floating-point number
  fcvt.q.wu:
    opcode:
    - fcvt.q.wu
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x1A
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.WU.Q, FCVT.LU.Q, FCVT.Q.WU, and FCVT.Q.LU variants convert to or
            from unsigned integer values
  fcvt.s.d:
    opcode:
    - fcvt.s.d
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x08
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - The double-precision to single-precision and single-precision to double-precision
            conversion instructions, FCVT.S.D and FCVT.D.S, are encoded in the OP-FP
            major opcode space and both the source and destination are floating-point
            registers
          - FCVT.S.D rounds according to the RM field; FCVT.D.S will never round.
  fcvt.s.l:
    opcode:
    - fcvt.s.l
    - rd
    - rs1
    - 24..20=2
    - 31..27=0x1A
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.S.W or FCVT.S.L converts a 32-bit or 64-bit signed integer, respectively,
            in integer register rs1 into a floating-point number in floating-point
            register rd
          - FCVT.L[U].S and FCVT.S.L[U] are RV64-only instructions
  fcvt.s.lu:
    opcode:
    - fcvt.s.lu
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x1A
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.S, FCVT.LU.S, FCVT.S.WU, and FCVT.S.LU variants convert to or
            from unsigned integer values
  fcvt.s.q:
    opcode:
    - fcvt.s.q
    - rd
    - rs1
    - 24..20=3
    - 31..27=0x08
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.S.Q or FCVT.Q.S converts a quad-precision floating-point number to
            a single-precision floating-point number, or vice-versa, respectively
  fcvt.s.w:
    opcode:
    - fcvt.s.w
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1A
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.S.W or FCVT.S.L converts a 32-bit or 64-bit signed integer, respectively,
            in integer register rs1 into a floating-point number in floating-point
            register rd
          - A floating-point register can be initialized to floating-point positive
            zero using FCVT.S.W rd ,
  fcvt.s.wu:
    opcode:
    - fcvt.s.wu
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x1A
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.S, FCVT.LU.S, FCVT.S.WU, and FCVT.S.LU variants convert to or
            from unsigned integer values
  fcvt.w.d:
    opcode:
    - fcvt.w.d
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x18
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.W.D or FCVT.L.D converts a double-precision floating-point number
            in floating-point register rs1 to a signed 32-bit or 64-bit integer, respectively,
            in integer register rd
  fcvt.w.q:
    opcode:
    - fcvt.w.q
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x18
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.W.Q or FCVT.L.Q converts a quad-precision floating-point number to
            a signed 32-bit or 64-bit integer, respectively
  fcvt.w.s:
    opcode:
    - fcvt.w.s
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x18
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.W.S or FCVT.L.S converts a floating-point number in floating-point
            register rs1 to a signed 32-bit or 64-bit integer, respectively, in integer
            register rd
          - FCVT.W.S
  fcvt.wu.d:
    opcode:
    - fcvt.wu.d
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x18
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.D, FCVT.LU.D, FCVT.D.WU, and FCVT.D.LU variants convert to or
            from unsigned integer values
  fcvt.wu.q:
    opcode:
    - fcvt.wu.q
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x18
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FCVT.WU.Q, FCVT.LU.Q, FCVT.Q.WU, and FCVT.Q.LU variants convert to or
            from unsigned integer values
  fcvt.wu.s:
    opcode:
    - fcvt.wu.s
    - rd
    - rs1
    - 24..20=1
    - 31..27=0x18
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FCVT.WU.S, FCVT.LU.S, FCVT.S.WU, and FCVT.S.LU variants convert to or
            from unsigned integer values
          - FCVT.WU.S
  fdiv.d:
    opcode:
    - fdiv.d
    - rd
    - rs1
    - rs2
    - 31..27=0x03
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FDIV.S performs the single-precision floating-point division of rs1 by
            rs2
  fdiv.q:
    opcode:
    - fdiv.q
    - rd
    - rs1
    - rs2
    - 31..27=0x03
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FDIV.S performs the single-precision floating-point division of rs1 by
            rs2
  fdiv.s:
    opcode:
    - fdiv.s
    - rd
    - rs1
    - rs2
    - 31..27=0x03
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FDIV.S performs the single-precision floating-point division of rs1 by
            rs2
  fence:
    opcode:
    - fence
    - fm
    - pred
    - succ
    - rs1
    - 14..12=0
    - rd
    - 6..2=0x03
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &25
    - rs1
    - rd
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#rv32"
    desc:
      rv32:
        "#rv32":
          text:
          - RV32I contains 40 unique instructions, though a simple implementation
            might cover the ECALL/EBREAK instructions with a single SYSTEM hardware
            instruction that always traps and might be able to implement the FENCE
            instruction as a NOP, reducing base instruction count to 38 total
        "#sec:fence":
          text:
          - The FENCE instruction is used to order device I/O and memory accesses
            as viewed by other RISC-V harts and external devices or coprocessors
          - Informally, no other RISC-V hart or external device can observe any operation
            in the successor set following a FENCE before any operation in the predecessor
            set preceding the FENCE
          - The FENCE instruction also orders memory reads and writes made by the
            hart as observed by memory reads and writes made by an external device
          - However, FENCE does not order observations of events made by an external
            device using any other signaling mechanism.
          - This communication is outside the scope of the FENCE ordering mechanism
            and hence the FENCE instruction can provide no guarantee on when a change
            in the interrupt signal is visible to the interrupt controller
          - Instruction-set extensions might also describe new I/O instructions that
            will also be ordered using the I and O bits in a FENCE.
          - The fence mode field fm defines the semantics of the FENCE
          - A FENCE with fm =0000 orders all memory operations in its predecessor
            set before all memory operations in its successor set.
          - The FENCE.TSO instruction is encoded as a FENCE instruction with fm =1000,
            predecessor =RW, and successor =RW
          - FENCE.TSO orders all load operations in its predecessor set before all
            memory operations in its successor set, and all store operations in its
            predecessor set before all store operations in its successor set
          - "This leaves non-AMO store operations in the FENCE.TSO&acirc;\x80\x99s
            predecessor set unordered with non-AMO loads in its successor set."
          - FENCE RW,RW
          - imposes a superset of the orderings that FENCE.TSO imposes, it is correct
            to ignore the fm field and implement FENCE.TSO as
          - "The unused fields in the FENCE instructions&acirc;\x80\x94 rs1 and rd
            &acirc;\x80\x94are reserved for finer-grain fences in future extensions"
        "#sec:rv32i-hints":
          text:
          - ". The other RV32I HINTs are encoded as FENCE instructions with a null
            predecessor or successor set and with fm =0."
          - As another example, a FENCE instruction with a zero pred field and a zero
            fm field is a HINT; the succ , rs1 , and rd succ field
      zifencei:
        "#chap:zifencei":
          text:
          - "This chapter defines the &acirc;\x80\x9CZifencei&acirc;\x80\x9D extension,
            which includes the FENCE.I instruction that provides explicit synchronization
            between writes to instruction memory and instruction fetches on the same
            hart"
          - JIT compilers may generate a large trace of instructions before a single
            FENCE.I, and amortize any instruction cache snooping/invalidation overhead
            by writing translated instructions to memory regions that are known not
            to reside in the I-cache.
          - The FENCE.I instruction was designed to support a wide variety of implementations
          - A simple implementation can flush the local instruction cache and the
            instruction pipeline when the FENCE.I is executed
          - If instruction and data caches are kept coherent in this way, or if the
            memory system consists of only uncached RAMs, then just the fetch pipeline
            needs to be flushed at a FENCE.I.
          - The FENCE.I instruction was previously part of the base I instruction
            set
          - First, it has been recognized that on some systems, FENCE.I will be expensive
            to implement and alternate mechanisms are being discussed in the memory
            model task group
          - In particular, for designs that have an incoherent instruction cache and
            an incoherent data cache, or where the instruction cache refill does not
            snoop a coherent data cache, both caches must be completely flushed when
            a FENCE.I instruction is encountered
          - The FENCE.I only synchronizes the local hart, and the OS can reschedule
            the user hart to a different physical hart after the FENCE.I
          - This would require the OS to execute an additional FENCE.I as part of
            every context migration
          - For this reason, the standard Linux ABI has removed FENCE.I from user-level
            and now requires a system call to maintain instruction-fetch coherence,
            which allows the OS to minimize the number of FENCE.I executions required
            on current systems and provides forward-compatibility with future improved
            instruction-fetch coherence mechanisms.
          - Future approaches to instruction-fetch coherence under discussion include
            providing more restricted versions of FENCE.I that only target a given
            address specified in rs1 , and/or allowing software to use an ABI that
            relies on machine-mode cache-maintenance operations.
          - The FENCE.I instruction is used to synchronize the instruction and data
            streams
          - RISC-V does not guarantee that stores to instruction memory will be made
            visible to instruction fetches on a RISC-V hart until that hart executes
            a FENCE.I instruction
          - A FENCE.I instruction ensures that a subsequent instruction fetch on a
            RISC-V hart will see any previous data stores already visible to the same
            RISC-V hart
          - "FENCE.I does not ensure that other RISC-V harts&acirc;\x80\x99 instruction
            fetches will observe the local hart&acirc;\x80\x99s stores in a multiprocessor
            system"
          - To make a store to instruction memory visible to all RISC-V harts, the
            writing hart also has to execute a data FENCE before requesting that all
            remote RISC-V harts execute a FENCE.I.
          - The unused fields in the FENCE.I instruction, imm[11:0] , rs1 , and rd
            , are reserved for finer-grain fences in future extensions
          - "Because FENCE.I only orders stores with a hart&acirc;\x80\x99s own instruction
            fetches, application code should only rely upon FENCE.I if the application
            thread will not be migrated to a different hart"
      zihintpause:
        "#chap:zihintpause":
          text:
          - PAUSE is encoded as a FENCE instruction with pred =W, succ =0, fm =0,
            rd =
          - PAUSE is encoded as a hint within the FENCE opcode because some implementations
            are expected to deliberately stall the PAUSE instruction until outstanding
            memory transactions have completed
          - Like other FENCE instructions, PAUSE cannot be used within LR/SC sequences
            without voiding the forward-progress guarantee.
      a:
        "#specifying-ordering-of-atomic-instructions":
          text:
          - The base RISC-V ISA has a relaxed memory model, with the FENCE instruction
            used to impose additional ordering constraints
          - The address space is divided by the execution environment into memory
            and I/O domains, and the FENCE instruction provides options to order accesses
            to one or both of these two address domains.
          - No ordering constraint is implied to accesses to the other domain, and
            a FENCE instruction should be used to order across both domains.
        "#sec:lrscseq":
          text:
          - "The dynamic code executed between the LR and SC instructions can only
            contain instructions from the base &acirc;\x80\x9CI&acirc;\x80\x9D instruction
            set, excluding loads, stores, backward jumps, taken backward branches,
            JALR, FENCE, and SYSTEM instructions"
        "#sec:amo":
          text:
          - Although the FENCE R, RW instruction suffices to implement the acquire
            operation and FENCE RW, W suffices to implement release , both imply additional
            unnecessary ordering as compared to AMOs with the corresponding aq or
            rl bit set.
      csr:
        "#csr-access-ordering":
          text:
          - To enforce ordering in all other cases, software should execute a FENCE
            instruction between the relevant accesses
          - For the purposes of the FENCE instruction, CSR read accesses are classified
            as device input (I), and CSR write accesses are classified as device output
            (O).
          - ") are not visible to other harts; their accesses can be freely reordered
            in the global memory order with respect to FENCE instructions without
            violating this specification."
      rvwmo:
        "#ch:memorymodel":
          text:
          - The base RISC-V ISA provides a FENCE instruction for this purpose, described
            in Section&Acirc;&nbsp;
          - The interaction of the memory model with I/O memory, instruction fetches,
            FENCE.I, page table walks, and SFENCE.VMA is not (yet) formalized
        "#preserved-program-order":
          text:
          - There is a FENCE instruction that orders a before b [ppo:acquire] a has
            an acquire annotation
      machine:
        "#machine-environment-configuration-registers-menvcfg-and-menvcfgh":
          text:
          - ", FENCE instructions executed in modes less privileged than M are modified
            so the requirement to order accesses to device I/O implies also the requirement
            to order main memory accesses"
          - details the modified interpretation of FENCE instruction bits PI, PO,
            SI, and SO for modes less privileged than M when FIOM=1.
        "#memory-ordering-pmas":
          text:
          - Regions of the address space are classified as either main memory or I/O
            for the purposes of ordering by the FENCE instruction and atomic-instruction
            ordering bits.
      supervisor:
        "#supervisor-environment-configuration-register-senvcfg":
          text:
          - ", FENCE instructions executed in U-mode are modified so the requirement
            to order accesses to device I/O implies also the requirement to order
            main memory accesses"
          - details the modified interpretation of FENCE instruction bits PI, PO,
            SI, and SO in U-mode when FIOM=1.
        "#sec:translation":
          text:
          - The ordering on loads and stores provided by FENCE instructions and the
            acquire/release bits on atomic instructions also orders the PTE updates
            associated with those loads and stores as observed by remote harts.
        "#svpbmt":
          text:
          - However, accesses to such pages are considered to be both I/O and main
            memory accesses for the purposes of FENCE, .aq , and .rl .
      hypervisor:
        "#hypervisor-environment-configuration-registers-henvcfg-and-henvcfgh":
          text:
          - ", FENCE instructions executed when V=1 are modified so the requirement
            to order accesses to device I/O implies also the requirement to order
            main memory accesses"
          - details the modified interpretation of FENCE instruction bits PI, PO,
            SI, and SO when FIOM=1 and V=1.
  fence.i:
    opcode:
    - fence.i
    - imm12
    - rs1
    - 14..12=1
    - rd
    - 6..2=0x03
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &26
    - imm12
    - rs1
    - rd
  feq.d:
    opcode:
    - feq.d
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=2
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      d:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FEQ.S performs a quiet comparison: it only sets the invalid operation
            exception flag if either input is a signaling NaN'
  feq.q:
    opcode:
    - feq.q
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=2
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      q:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FEQ.S performs a quiet comparison: it only sets the invalid operation
            exception flag if either input is a signaling NaN'
  feq.s:
    opcode:
    - feq.s
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=2
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      f:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FEQ.S performs a quiet comparison: it only sets the invalid operation
            exception flag if either input is a signaling NaN'
  fld:
    opcode:
    - fld
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x01
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#fld_fsd"
    desc:
      d:
        "#fld_fsd":
          text:
          - The FLD instruction loads a double-precision floating-point value from
            memory into floating-point register rd
          - FLD and FSD are only guaranteed to execute atomically if the effective
            address is naturally aligned and XLEN
          - FLD and FSD do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      rvwmo:
        "#sec:rvwmo:primitives":
          text:
          - Second, FLD and FSD instructions may each give rise to multiple memory
            operations if XLEN
          - An FLD or FSD instruction for which XLEN
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLD/FSD
  fle.d:
    opcode:
    - fle.d
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=0
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      d:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  fle.q:
    opcode:
    - fle.q
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=0
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      q:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  fle.s:
    opcode:
    - fle.s
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      f:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  flq:
    opcode:
    - flq
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x01
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-load-and-store-instructions"
    desc:
      q:
        "#quad-precision-load-and-store-instructions":
          text:
          - FLQ and FSQ are only guaranteed to execute atomically if the effective
            address is naturally aligned and XLEN=128.
          - FLQ and FSQ do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLQ/FSQ
  flt.d:
    opcode:
    - flt.d
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=1
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      d:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  flt.q:
    opcode:
    - flt.q
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=1
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      q:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  flt.s:
    opcode:
    - flt.s
    - rd
    - rs1
    - rs2
    - 31..27=0x14
    - 14..12=1
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-compare-instructions"
    desc:
      f:
        "#single-precision-floating-point-compare-instructions":
          text:
          - Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the
            specified comparison between floating-point registers (
          - 'FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as
            signaling comparisons: that is, they set the invalid operation exception
            flag if either input is NaN'
  flw:
    opcode:
    - flw
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x01
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-load-and-store-instructions"
    desc:
      f:
        "#single-precision-load-and-store-instructions":
          text:
          - The FLW instruction loads a single-precision floating-point value from
            memory into floating-point register rd
          - FLW and FSW are only guaranteed to execute atomically if the effective
            address is naturally aligned.
          - FLW and FSW do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLW/FSW
  fmadd.d:
    opcode:
    - fmadd.d
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=1
    - 6..2=0x10
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &8
    - rd
    - rs1
    - rs2
    - rs3
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FMADD.S multiplies the values in rs1 and rs2 , adds the value in rs3 ,
            and writes the final result to rd
          - "FMADD.S computes (rs1 &Atilde;\x97 rs2)+rs3 ."
  fmadd.q:
    opcode:
    - fmadd.q
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=3
    - 6..2=0x10
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FMADD.S multiplies the values in rs1 and rs2 , adds the value in rs3 ,
            and writes the final result to rd
          - "FMADD.S computes (rs1 &Atilde;\x97 rs2)+rs3 ."
  fmadd.s:
    opcode:
    - fmadd.s
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=0
    - 6..2=0x10
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FMADD.S multiplies the values in rs1 and rs2 , adds the value in rs3 ,
            and writes the final result to rd
          - "FMADD.S computes (rs1 &Atilde;\x97 rs2)+rs3 ."
  fmax.d:
    opcode:
    - fmax.d
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=1
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmax.q:
    opcode:
    - fmax.q
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=1
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmax.s:
    opcode:
    - fmax.s
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=1
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmin.d:
    opcode:
    - fmin.d
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=0
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmin.q:
    opcode:
    - fmin.q
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=0
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmin.s:
    opcode:
    - fmin.s
    - rd
    - rs1
    - rs2
    - 31..27=0x05
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - Floating-point minimum-number and maximum-number instructions FMIN.S and
            FMAX.S write, respectively, the smaller or larger of rs1 and rs2 rd
          - Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions
            were amended to implement the proposed IEEE 754-201x minimumNumber and
            maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum
            operations
  fmsub.d:
    opcode:
    - fmsub.d
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=1
    - 6..2=0x11
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FMSUB.S multiplies the values in rs1 and rs2 , subtracts the value in
            rs3 , and writes the final result to rd
          - "FMSUB.S computes (rs1 &Atilde;\x97 rs2)-rs3 ."
  fmsub.q:
    opcode:
    - fmsub.q
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=3
    - 6..2=0x11
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FMSUB.S multiplies the values in rs1 and rs2 , subtracts the value in
            rs3 , and writes the final result to rd
          - "FMSUB.S computes (rs1 &Atilde;\x97 rs2)-rs3 ."
  fmsub.s:
    opcode:
    - fmsub.s
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=0
    - 6..2=0x11
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FMSUB.S multiplies the values in rs1 and rs2 , subtracts the value in
            rs3 , and writes the final result to rd
          - "FMSUB.S computes (rs1 &Atilde;\x97 rs2)-rs3 ."
  fmul.d:
    opcode:
    - fmul.d
    - rd
    - rs1
    - rs2
    - 31..27=0x02
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fmul.q:
    opcode:
    - fmul.q
    - rd
    - rs1
    - rs2
    - 31..27=0x02
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fmul.s:
    opcode:
    - fmul.s
    - rd
    - rs1
    - rs2
    - 31..27=0x02
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FADD.S and FMUL.S perform single-precision floating-point addition and
            multiplication respectively, between rs1 and rs2
  fmv.d.x:
    opcode:
    - fmv.d.x
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1E
    - 14..12=0
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FMV.D.X moves the double-precision value encoded in IEEE 754-2008 standard
            encoding from the integer register rs1 to the floating-point register
            rd .
          - FMV.X.D and FMV.D.X do not modify the bits being transferred; in particular,
            the payloads of non-canonical NaNs are preserved.
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
  fmv.q.x:
    opcode:
    - fmv.q.x
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1E
    - 14..12=0
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv128.html"
    main_desc: rv128
    main_id: "#rv128"
    desc:
      rv128:
        "#rv128":
          text:
          - The floating-point instruction set is unchanged, although the 128-bit
            Q floating-point extension can now support FMV.X.Q and FMV.Q.X instructions,
            together with additional FCVT instructions to and from the T (128-bit)
            integer format.
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FMV.X.Q and FMV.Q.X instructions are not provided in RV32 or RV64, so
            quad-precision bit patterns must be moved to the integer registers via
            memory.
          - RV128 will support FMV.X.Q and FMV.Q.X in the Q extension.
  fmv.w.x:
    opcode:
    - fmv.w.x
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1E
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FMV.W.X moves the single-precision value encoded in IEEE 754-2008 standard
            encoding from the lower 32 bits of integer register rs1 to the floating-point
            register rd
          - The FMV.W.X and FMV.X.W instructions were previously called FMV.S.X and
            FMV.X.S
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
  fmv.x.d:
    opcode:
    - fmv.x.d
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=0
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - FMV.X.D moves the double-precision value in floating-point register rs1
            to a representation in IEEE 754-2008 standard encoding in integer register
            rd
          - FMV.X.D and FMV.D.X do not modify the bits being transferred; in particular,
            the payloads of non-canonical NaNs are preserved.
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
  fmv.x.q:
    opcode:
    - fmv.x.q
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=0
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv128.html"
    main_desc: rv128
    main_id: "#rv128"
    desc:
      rv128:
        "#rv128":
          text:
          - The floating-point instruction set is unchanged, although the 128-bit
            Q floating-point extension can now support FMV.X.Q and FMV.Q.X instructions,
            together with additional FCVT instructions to and from the T (128-bit)
            integer format.
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - FMV.X.Q and FMV.Q.X instructions are not provided in RV32 or RV64, so
            quad-precision bit patterns must be moved to the integer registers via
            memory.
          - RV128 will support FMV.X.Q and FMV.Q.X in the Q extension.
  fmv.x.w:
    opcode:
    - fmv.x.w
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x1C
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - FMV.X.W moves the single-precision value in floating-point register rs1
            rd
          - The FMV.W.X and FMV.X.W instructions were previously called FMV.S.X and
            FMV.X.S
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
  fnmadd.d:
    opcode:
    - fnmadd.d
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=1
    - 6..2=0x13
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FNMADD.S multiplies the values in rs1 and rs2 , negates the product, subtracts
            the value in rs3 , and writes the final result to rd
          - "FNMADD.S computes -(rs1 &Atilde;\x97 rs2)-rs3 ."
  fnmadd.q:
    opcode:
    - fnmadd.q
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=3
    - 6..2=0x13
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FNMADD.S multiplies the values in rs1 and rs2 , negates the product, subtracts
            the value in rs3 , and writes the final result to rd
          - "FNMADD.S computes -(rs1 &Atilde;\x97 rs2)-rs3 ."
  fnmadd.s:
    opcode:
    - fnmadd.s
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=0
    - 6..2=0x13
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FNMADD.S multiplies the values in rs1 and rs2 , negates the product, subtracts
            the value in rs3 , and writes the final result to rd
          - "FNMADD.S computes -(rs1 &Atilde;\x97 rs2)-rs3 ."
  fnmsub.d:
    opcode:
    - fnmsub.d
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=1
    - 6..2=0x12
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FNMSUB.S multiplies the values in rs1 and rs2 , negates the product, adds
            the value in rs3 , and writes the final result to rd
          - "FNMSUB.S computes -(rs1 &Atilde;\x97 rs2)+rs3 ."
  fnmsub.q:
    opcode:
    - fnmsub.q
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=3
    - 6..2=0x12
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FNMSUB.S multiplies the values in rs1 and rs2 , negates the product, adds
            the value in rs3 , and writes the final result to rd
          - "FNMSUB.S computes -(rs1 &Atilde;\x97 rs2)+rs3 ."
  fnmsub.s:
    opcode:
    - fnmsub.s
    - rd
    - rs1
    - rs2
    - rs3
    - rm
    - 26..25=0
    - 6..2=0x12
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *8
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FNMSUB.S multiplies the values in rs1 and rs2 , negates the product, adds
            the value in rs3 , and writes the final result to rd
          - "FNMSUB.S computes -(rs1 &Atilde;\x97 rs2)+rs3 ."
  fsd:
    opcode:
    - fsd
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=3
    - 6..2=0x09
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &9
    - rs1
    - rs2
    - imm12
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#fld_fsd"
    desc:
      d:
        "#fld_fsd":
          text:
          - FSD stores a double-precision value from the floating-point registers
            to memory
          - FLD and FSD are only guaranteed to execute atomically if the effective
            address is naturally aligned and XLEN
          - FLD and FSD do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      rvwmo:
        "#sec:rvwmo:primitives":
          text:
          - Second, FLD and FSD instructions may each give rise to multiple memory
            operations if XLEN
          - An FLD or FSD instruction for which XLEN
      zfinx:
        "#zdinx":
          text:
          - The Zdinx extension adds all of the instructions that the D extension
            adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D,
            C.FLD[SP], and C.FSD[SP].
      machine:
        "#priority-and-matching-logic":
          text:
          - The same behavior may manifest for floating-point stores wider than XLEN
            bits (e.g., the FSD instruction in RV32D), even when the store address
            is naturally aligned.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLD/FSD
  fsgnj.d:
    opcode:
    - fsgnj.d
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=0
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.D,
            FSGNJN.D, and FSGNJX.D are defined analogously to the single-precision
            sign-injection instruction.
      zfinx:
        "#processing-of-wider-values":
          text:
          - Register moves need only a single FSGNJ.D instruction, however.
  fsgnj.q:
    opcode:
    - fsgnj.q
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=0
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.Q,
            FSGNJN.Q, and FSGNJX.Q are defined analogously to the double-precision
            sign-injection instruction.
  fsgnj.s:
    opcode:
    - fsgnj.s
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=0
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.S,
            FSGNJN.S, and FSGNJX.S, produce a result that takes all bits except the
            sign bit from rs1
          - Note, FSGNJ.S rx, ry, ry moves ry to rx (assembler pseudoinstruction FMV.S
            rx, ry ); FSGNJN.S rx, ry, ry moves the negation of ry to rx (assembler
            pseudoinstruction FNEG.S rx, ry ); and FSGNJX.S rx, ry, ry moves the absolute
            value of ry to rx (assembler pseudoinstruction FABS.S rx, ry ).
      zfh:
        "#zfhmin-standard-extension-for-minimal-half-precision-floating-point-support":
          text:
          - Zfhmin does not include the FSGNJ.H instruction, because it suffices to
            instead use the FSGNJ.S instruction to move half-precision values between
            floating-point registers.
  fsgnjn.d:
    opcode:
    - fsgnjn.d
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=1
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.D,
            FSGNJN.D, and FSGNJX.D are defined analogously to the single-precision
            sign-injection instruction.
  fsgnjn.q:
    opcode:
    - fsgnjn.q
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=1
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.Q,
            FSGNJN.Q, and FSGNJX.Q are defined analogously to the double-precision
            sign-injection instruction.
  fsgnjn.s:
    opcode:
    - fsgnjn.s
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=1
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.S,
            FSGNJN.S, and FSGNJX.S, produce a result that takes all bits except the
            sign bit from rs1
          - Note, FSGNJ.S rx, ry, ry moves ry to rx (assembler pseudoinstruction FMV.S
            rx, ry ); FSGNJN.S rx, ry, ry moves the negation of ry to rx (assembler
            pseudoinstruction FNEG.S rx, ry ); and FSGNJX.S rx, ry, ry moves the absolute
            value of ry to rx (assembler pseudoinstruction FABS.S rx, ry ).
  fsgnjx.d:
    opcode:
    - fsgnjx.d
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=2
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    main_desc: d
    main_id: "#double-precision-floating-point-conversion-and-move-instructions"
    desc:
      d:
        "#double-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.D,
            FSGNJN.D, and FSGNJX.D are defined analogously to the single-precision
            sign-injection instruction.
  fsgnjx.q:
    opcode:
    - fsgnjx.q
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=2
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-convert-and-move-instructions"
    desc:
      q:
        "#quad-precision-convert-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.Q,
            FSGNJN.Q, and FSGNJX.Q are defined analogously to the double-precision
            sign-injection instruction.
  fsgnjx.s:
    opcode:
    - fsgnjx.s
    - rd
    - rs1
    - rs2
    - 31..27=0x04
    - 14..12=2
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-floating-point-conversion-and-move-instructions"
    desc:
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - Floating-point to floating-point sign-injection instructions, FSGNJ.S,
            FSGNJN.S, and FSGNJX.S, produce a result that takes all bits except the
            sign bit from rs1
          - Note, FSGNJ.S rx, ry, ry moves ry to rx (assembler pseudoinstruction FMV.S
            rx, ry ); FSGNJN.S rx, ry, ry moves the negation of ry to rx (assembler
            pseudoinstruction FNEG.S rx, ry ); and FSGNJX.S rx, ry, ry moves the absolute
            value of ry to rx (assembler pseudoinstruction FABS.S rx, ry ).
  fsq:
    opcode:
    - fsq
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=4
    - 6..2=0x09
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    main_desc: q
    main_id: "#quad-precision-load-and-store-instructions"
    desc:
      q:
        "#quad-precision-load-and-store-instructions":
          text:
          - FLQ and FSQ are only guaranteed to execute atomically if the effective
            address is naturally aligned and XLEN=128.
          - FLQ and FSQ do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLQ/FSQ
  fsqrt.d:
    opcode:
    - fsqrt.d
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x0B
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FSQRT.S computes the square root of rs1
  fsqrt.q:
    opcode:
    - fsqrt.q
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x0B
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FSQRT.S computes the square root of rs1
  fsqrt.s:
    opcode:
    - fsqrt.s
    - rd
    - rs1
    - 24..20=0
    - 31..27=0x0B
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FSQRT.S computes the square root of rs1
  fsub.d:
    opcode:
    - fsub.d
    - rd
    - rs1
    - rs2
    - 31..27=0x01
    - rm
    - 26..25=1
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: d
    main_id: "#sec:single-float-compute"
    desc:
      d:
        "#sec:single-float-compute":
          text:
          - FSUB.S performs the single-precision floating-point subtraction of rs2
            from rs1
  fsub.q:
    opcode:
    - fsub.q
    - rd
    - rs1
    - rs2
    - 31..27=0x01
    - rm
    - 26..25=3
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_desc: q
    main_id: "#sec:single-float-compute"
    desc:
      q:
        "#sec:single-float-compute":
          text:
          - FSUB.S performs the single-precision floating-point subtraction of rs2
            from rs1
  fsub.s:
    opcode:
    - fsub.s
    - rd
    - rs1
    - rs2
    - 31..27=0x01
    - rm
    - 26..25=0
    - 6..2=0x14
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#sec:single-float-compute"
    desc:
      f:
        "#sec:single-float-compute":
          text:
          - FSUB.S performs the single-precision floating-point subtraction of rs2
            from rs1
  fsw:
    opcode:
    - fsw
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=2
    - 6..2=0x09
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    main_desc: f
    main_id: "#single-precision-load-and-store-instructions"
    desc:
      f:
        "#single-precision-load-and-store-instructions":
          text:
          - FSW stores a single-precision value from floating-point register rs2 to
            memory.
          - FLW and FSW are only guaranteed to execute atomically if the effective
            address is naturally aligned.
          - FLW and FSW do not modify the bits being transferred; in particular, the
            payloads of non-canonical NaNs are preserved.
      zfinx:
        "#sec:zfinx":
          text:
          - The Zfinx extension adds all of the instructions that the F extension
            adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W,
            C.FLW[SP], and C.FSW[SP].
      hypervisor:
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#sec-vector-loadstore-width-encoding":
          text:
          - FLW/FSW
  hfence.bvma:
    opcode:
    - hfence.bvma
    - 11..7=0
    - rs1
    - rs2
    - 31..25=0x11
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &10
    - rs1
    - rs2
  hfence.gvma:
    opcode:
    - hfence.gvma
    - 11..7=0
    - rs1
    - rs2
    - 31..25=0x51
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *10
    main_url_base: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html"
    main_desc: supervisor
    main_id: "#svinval"
    desc:
      supervisor:
        "#svinval":
          text:
          - The Svinval extension splits SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA
            instructions into finer-grained invalidation and ordering operations that
            can be more efficiently batched or pipelined on certain classes of high-performance
            implementation.
          - These have the same semantics as SINVAL.VMA, except that they combine
            with SFENCE.W.INVAL and SFENCE.INVAL.IR to replace HFENCE.VVMA and HFENCE.GVMA,
            respectively, instead of SFENCE.VMA
          - SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA require the same permissions
            and raise the same exceptions as SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA,
            respectively
          - High-performance implementations will be able to pipeline the address-translation
            cache invalidation operations, and will defer any pipeline stalls or other
            memory ordering enforcement until an SFENCE.W.INVAL, SFENCE.INVAL.IR,
            SFENCE.VMA, HFENCE.GVMA, or HFENCE.VVMA instruction is executed.
          - Simpler implementations may implement SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA
            identically to SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA, respectively,
            while implementing SFENCE.W.INVAL and SFENCE.INVAL.IR instructions as
            no-ops.
      hypervisor:
        "#sec:hgatp":
          text:
          - "If the new virtual machine&acirc;\x80\x99s guest physical page tables
            have been modified, or if a VMID is reused, it may be necessary to execute
            an HFENCE.GVMA instruction (see Section&Acirc;&nbsp;"
        "#sec:hfence.vma":
          text:
          - The hypervisor memory-management fence instructions, HFENCE.VVMA and HFENCE.GVMA,
            perform a function similar to SFENCE.VMA (Section&Acirc;&nbsp;
          - "(HFENCE.GVMA)"
          - HFENCE.GVMA is valid only in HS-mode when
          - Executing an HFENCE.GVMA instruction guarantees that any previous stores
            already visible to the current hart are ordered before all subsequent
            implicit reads by that hart of guest-physical memory-management data structures
            done for instructions that follow the HFENCE.GVMA
          - Simpler implementations of HFENCE.GVMA can ignore the guest physical address
            in rs1 and the VMID value in rs2 and always perform a global fence for
            the guest-physical memory management of all virtual machines, or even
            a global fence for all memory-management data structures.
          - ".MODE is changed for a given VMID, an HFENCE.GVMA with rs1 ="
          - Attempts to execute HFENCE.VVMA or HFENCE.GVMA when V=1 cause a virtual
            instruction trap, while attempts to do the same in U-mode cause an illegal
            instruction trap
          - Attempting to execute HFENCE.GVMA in HS-mode when
        "#machine-status-registers-mstatus-and-mstatush":
          text:
          - or executing HFENCE.GVMA or HINVAL.GVMA, but has no effect on accesses
            to
        "#memory-management-fences":
          text:
          - Hypervisor instructions HFENCE.VVMA and HFENCE.GVMA provide additional
            memory-management fences to complement SFENCE.VMA
          - When PMP settings are modified in a manner that affects either the physical
            memory that holds guest-physical page tables or the physical memory to
            which guest-physical page tables point, an HFENCE.GVMA instruction with
            rs1 =
  jal:
    opcode:
    - jal
    - rd
    - jimm20
    - 6..2=0x1b
    - 1..0=3
    opcode_group: opcodes
    opcode_args: &24
    - rd
    - jimm20
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#programmers-model-for-base-integer-isa"
    desc:
      rv32:
        "#programmers-model-for-base-integer-isa":
          text:
          - ". See the descriptions of the JAL and JALR instructions."
        "#integer-register-immediate-instructions":
          text:
          - The current PC can be obtained by setting the U-immediate to 0. Although
            a JAL +4 instruction could also be used to obtain the local PC (of the
            instruction following the JAL), it might cause pipeline breaks in simpler
            microarchitectures or pollute BTB structures in more complex microarchitectures.
        "#unconditional-jumps":
          text:
          - The jump and link (JAL) instruction uses the J-type format, where the
            J-immediate encodes a signed offset in multiples of 2 bytes
          - JAL stores the address of the instruction following the jump (
          - Plain unconditional jumps (assembler pseudoinstruction J) are encoded
            as a JAL with rd =
          - The JAL and JALR instructions will generate an instruction-address-misaligned
            exception if the target address is not aligned to a four-byte boundary.
          - A JAL instruction should push the return address onto a return-address
            stack (RAS) only when rd is
        "#conditional-branches":
          text:
          - Unlike some other architectures, the RISC-V jump (JAL with rd =
  jalr:
    opcode:
    - jalr
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x19
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#programmers-model-for-base-integer-isa"
    desc:
      rv32:
        "#programmers-model-for-base-integer-isa":
          text:
          - ". See the descriptions of the JAL and JALR instructions."
        "#integer-register-immediate-instructions":
          text:
          - The combination of an AUIPC and the 12-bit immediate in a JALR can transfer
            control to any 32-bit PC-relative address, while an AUIPC plus the 12-bit
            immediate offset in regular load or store instructions can access any
            32-bit PC-relative data address.
        "#unconditional-jumps":
          text:
          - The indirect jump instruction JALR (jump and link register) uses the I-type
            encoding
          - The JALR instruction was defined to enable a two-instruction sequence
            to jump anywhere in a 32-bit absolute address range
          - A LUI instruction can first load rs1 with the upper 20 bits of a target
            address, then JALR can add in the lower bits
          - Similarly, AUIPC then JALR can jump anywhere in a 32-bit
          - Note that the JALR instruction does not treat the 12-bit immediate as
            multiples of 2 bytes, unlike the conditional branch instructions
          - In practice, most uses of JALR will have either a zero immediate or be
            paired with a LUI or AUIPC, so the slight reduction in range is not significant.
          - Clearing the least-significant bit when calculating the JALR target address
            both simplifies the hardware slightly and allows the low bit of function
            pointers to be used to store auxiliary information
          - ", JALR can be used to implement a single instruction subroutine call
            to the lowest"
          - The JAL and JALR instructions will generate an instruction-address-misaligned
            exception if the target address is not aligned to a four-byte boundary.
          - ". JALR instructions should push/pop a RAS as shown in the Table&Acirc;&nbsp;"
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - Note that the set of address offsets that can be formed by pairing LUI
            with LD, AUIPC with JALR, etc.in RV64I is [
      a:
        "#sec:lrscseq":
          text:
          - "The dynamic code executed between the LR and SC instructions can only
            contain instructions from the base &acirc;\x80\x9CI&acirc;\x80\x9D instruction
            set, excluding loads, stores, backward jumps, taken backward branches,
            JALR, FENCE, and SYSTEM instructions"
  lb:
    opcode:
    - lb
    - rd
    - rs1
    - imm12
    - 14..12=0
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - LB and LBU are defined analogously for 8-bit values
      rv64:
        "#load-and-store-instructions":
          text:
          - LH and LHU are defined analogously for 16-bit values, as are LB and LBU
            for 8-bit values
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  lbu:
    opcode:
    - lbu
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - LB and LBU are defined analogously for 8-bit values
      rv64:
        "#load-and-store-instructions":
          text:
          - LH and LHU are defined analogously for 16-bit values, as are LB and LBU
            for 8-bit values
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  ld:
    opcode:
    - ld
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - Note that the set of address offsets that can be formed by pairing LUI
            with LD, AUIPC with JALR, etc.in RV64I is [
        "#load-and-store-instructions":
          text:
          - The LD instruction loads a 64-bit value from memory into register rd for
            RV64I.
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  lh:
    opcode:
    - lh
    - rd
    - rs1
    - imm12
    - 14..12=1
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - LH loads a 16-bit value from memory, then sign-extends to 32-bits before
            storing in rd
      rv64:
        "#load-and-store-instructions":
          text:
          - LH and LHU are defined analogously for 16-bit values, as are LB and LBU
            for 8-bit values
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  lhu:
    opcode:
    - lhu
    - rd
    - rs1
    - imm12
    - 14..12=5
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - LHU loads a 16-bit value from memory but then zero extends to 32-bits
            before storing in rd
      rv64:
        "#load-and-store-instructions":
          text:
          - LH and LHU are defined analogously for 16-bit values, as are LB and LBU
            for 8-bit values
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  lr.d:
    opcode:
    - lr.d
    - rd
    - rs1
    - 24..20=0
    - aqrl
    - 31..29=0
    - 28..27=2
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:lrsc"
    desc:
      a:
        "#sec:lrsc":
          text:
          - LR.D and SC.D act analogously on doublewords and are only available on
            RV64. For RV64, LR.W and SC.W sign-extend the value placed in rd .
  lr.w:
    opcode:
    - lr.w
    - rd
    - rs1
    - 24..20=0
    - aqrl
    - 31..29=0
    - 28..27=2
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:lrsc"
    desc:
      a:
        "#sec:lrsc":
          text:
          - "LR.W loads a word from the address in rs1 , places the sign-extended
            value in rd , and registers a reservation set &acirc;\x80\x94a set of
            bytes that subsumes the bytes in the addressed word"
          - LR.D and SC.D act analogously on doublewords and are only available on
            RV64. For RV64, LR.W and SC.W sign-extend the value placed in rd .
  lui:
    opcode:
    - lui
    - rd
    - imm20
    - 6..2=0x0D
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *11
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - LUI (load upper immediate) is used to build 32-bit constants and uses
            the U-type format
          - LUI places the 32-bit U-immediate value into the destination register
            rd , filling in the lowest 12 bits with zeros.
        "#unconditional-jumps":
          text:
          - A LUI instruction can first load rs1 with the upper 20 bits of a target
            address, then JALR can add in the lower bits
          - In practice, most uses of JALR will have either a zero immediate or be
            paired with a LUI or AUIPC, so the slight reduction in range is not significant.
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - LUI (load upper immediate) uses the same opcode as RV32I
          - LUI places the 32-bit U-immediate into register rd , filling in the lowest
            12 bits with zeros
          - Note that the set of address offsets that can be formed by pairing LUI
            with LD, AUIPC with JALR, etc.in RV64I is [
  lw:
    opcode:
    - lw
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - The LW instruction loads a 32-bit value from memory into rd
      rv64:
        "#load-and-store-instructions":
          text:
          - The LW instruction loads a 32-bit value from memory and sign-extends this
            to 64 bits before storing it in register rd for RV64I
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
        "#sec:tinst-vals":
          text:
          - and the register value is the encoding of a standard LW (load word) instruction,
            then the trapping instruction is LW, and the register value is the transformation
            of the trapping LW instruction.
          - is not sufficient to establish that the first case applies and the trapping
            instruction is a standard LW instruction; rather, software must also confirm
            that bits 63:32 of
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  lwu:
    opcode:
    - lwu
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x00
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#load-and-store-instructions"
    desc:
      rv64:
        "#load-and-store-instructions":
          text:
          - The LWU instruction, on the other hand, zero-extends the 32-bit value
            from memory for RV64I
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU,
            and LD, there is a corresponding virtual-machine load instruction: HLV.B,
            HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D'
          - HLVX.WU is valid for RV32, even though LWU and HLV.WU are not
        "#sec:tinst-vals":
          text:
          - For a standard load instruction that is not a compressed instruction and
            is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed
            instruction has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed load instruction (LB, LBU, LH, LHU, LW, LWU,
            LD, FLW, FLD, FLQ, or FLH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  mret:
    opcode:
    - mret
    - 11..7=0
    - 19..15=0
    - 31..20=0x302
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
    main_url_base: "/riscv-priv-isa-manual/Priv-v1.12/machine.html"
    main_desc: machine
    main_id: "#privstack"
    desc:
      machine:
        "#privstack":
          text:
          - An MRET or SRET instruction is used to return from a trap in M-mode or
            S-mode respectively
        "#memory-privilege-in-mstatus-register":
          text:
          - An MRET or SRET instruction that changes the privilege mode to a mode
            less privileged than M also sets MPRV=0.
        "#machine-trap-delegation-registers-medeleg-and-mideleg":
          text:
          - By default, all traps at any privilege level are handled in machine mode,
            though a machine-mode handler can redirect traps back to the appropriate
            level with the MRET instruction (Section&Acirc;&nbsp;
        "#machine-exception-program-counter-mepc":
          text:
          - is masked on reads so that it appears to be 0. This masking occurs also
            for the implicit read by the MRET instruction
        "#otherpriv":
          text:
          - To return after handling a trap, there are separate trap return instructions
            per privilege level, MRET and SRET
          - MRET is always provided
      hypervisor:
        "#machine-status-registers-mstatus-and-mstatush":
          text:
          - When an MRET instruction is executed, the virtualization mode V is set
            to MPV, unless MPP=3, in which case V remains 0.
        "#trap-return":
          text:
          - The MRET instruction is used to return from a trap taken into M-mode
          - MRET first determines what the new privilege mode will be according to
            the values of MPP and MPV in
          - ". MRET then in"
          - sets MPV=0, MPP=0, MIE=MPIE, and MPIE=1. Lastly, MRET sets the privilege
            mode as previously determined, and sets
  mul:
    opcode:
    - mul
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=0
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#multiplication-operations"
    desc:
      m:
        "#multiplication-operations":
          text:
          - MUL performs an XLEN-bit
          - 'If both the high and low bits of the same product are required, then
            the recommended code sequence is: MULH[[S]U] rdh, rs1, rs2 ; MUL rdl,
            rs1, rs2 (source register specifiers must be in same order and rdh cannot
            be the same as rs1 or rs2 )'
          - In RV64, MUL can be used to obtain the upper 32 bits of the 64-bit product,
            but signed arguments must be proper 32-bit signed values, whereas unsigned
            arguments must have their upper 32 bits clear
        "#zmmul-extension-version-0.1":
          text:
          - ", namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW"
  mulh:
    opcode:
    - mulh
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=1
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#multiplication-operations"
    desc:
      m:
        "#multiplication-operations":
          text:
          - MULH, MULHU, and MULHSU perform the same multiplication but return the
            upper XLEN bits of the full 2
          - 'If both the high and low bits of the same product are required, then
            the recommended code sequence is: MULH[[S]U] rdh, rs1, rs2 ; MUL rdl,
            rs1, rs2 (source register specifiers must be in same order and rdh cannot
            be the same as rs1 or rs2 )'
          - If the arguments are not known to be sign- or zero-extended, an alternative
            is to shift both arguments left by 32 bits, then use MULH[[S]U].
        "#zmmul-extension-version-0.1":
          text:
          - ", namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW"
  mulhsu:
    opcode:
    - mulhsu
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=2
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#multiplication-operations"
    desc:
      m:
        "#multiplication-operations":
          text:
          - MULH, MULHU, and MULHSU perform the same multiplication but return the
            upper XLEN bits of the full 2
          - MULHSU is used in multi-word signed multiplication to multiply the most-significant
            word of the multiplicand (which contains the sign bit) with the less-significant
            words of the multiplier (which are unsigned).
        "#zmmul-extension-version-0.1":
          text:
          - ", namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW"
  mulhu:
    opcode:
    - mulhu
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=3
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#multiplication-operations"
    desc:
      m:
        "#multiplication-operations":
          text:
          - MULH, MULHU, and MULHSU perform the same multiplication but return the
            upper XLEN bits of the full 2
        "#zmmul-extension-version-0.1":
          text:
          - ", namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW"
  mulw:
    opcode:
    - mulw
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=0
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#multiplication-operations"
    desc:
      m:
        "#multiplication-operations":
          text:
          - MULW is an RV64 instruction that multiplies the lower 32 bits of the source
            registers, placing the sign-extension of the lower 32 bits of the result
            into the destination register.
        "#zmmul-extension-version-0.1":
          text:
          - ", namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW"
  or:
    opcode:
    - or
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=6
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
        "#integer-register-register-operations":
          text:
          - AND, OR, and XOR perform bitwise logical operations.
      a:
        "#sec:amo":
          text:
          - The operations supported are swap, integer add, bitwise AND, bitwise OR,
            bitwise XOR, and signed and unsigned integer maximum and minimum
      c:
        "#integer-register-register-operations":
          text:
          - "C.OR computes the bitwise OR of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
      machine:
        "#extension-context-status-in-mstatus-register":
          text:
          - The SD bit is read-only and is set when either the FS, VS, or XS bits
            encode a Dirty state (i.e., SD=((FS==11) OR (XS==11) OR (VS==11)))
        "#machine-interrupt-registers-mip-and-mie":
          text:
          - Supervisor-level external interrupts are made pending based on the logical-OR
            of the software-writable SEIP bit and the signal from the external interrupt
            controller
          - destination register is the logical-OR of the software-writable bit and
            the interrupt signal from the interrupt controller, but the signal from
            the interrupt controller is not used to calculate the value written to
            SEIP
      hypervisor:
        "#sec:hinterruptregs":
          text:
          - ", and is the logical-OR of these interrupt sources:"
          - ", and is the logical-OR of"
      v:
        "#_vector_fixed_point_rounding_mode_register_vxrm":
          text:
          - 'round-to-odd (OR bits into LSB, aka "jam") !v[d] & v[d-1:0]&ne;0 The
            rounding functions:'
  ori:
    opcode:
    - ori
    - rd
    - rs1
    - imm12
    - 14..12=6
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
  rem:
    opcode:
    - rem
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=6
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - REM and REMU provide the remainder of the corresponding division operation
          - For REM, the sign of the result equals the sign of the dividend.
          - 'If both the quotient and remainder are required from the same division,
            the recommended code sequence is: DIV[U] rdq, rs1, rs2 ; REM[U] rdr, rs1,
            rs2 ( rdq rs1 or rs2 )'
          - REM[W]
  remu:
    opcode:
    - remu
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=7
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - REM and REMU provide the remainder of the corresponding division operation
          - REMU[W]
  remuw:
    opcode:
    - remuw
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=7
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - REMW and REMUW are RV64 instructions that provide the corresponding signed
            and unsigned remainder operations respectively
          - Both REMW and REMUW always sign-extend the 32-bit result to 64 bits, including
            on a divide by zero.
  remw:
    opcode:
    - remw
    - rd
    - rs1
    - rs2
    - 31..25=1
    - 14..12=6
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    main_desc: m
    main_id: "#division-operations"
    desc:
      m:
        "#division-operations":
          text:
          - REMW and REMUW are RV64 instructions that provide the corresponding signed
            and unsigned remainder operations respectively
          - Both REMW and REMUW always sign-extend the 32-bit result to 64 bits, including
            on a divide by zero.
  sb:
    opcode:
    - sb
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=0
    - 6..2=0x08
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - The SW, SH, and SB instructions store 32-bit, 16-bit, and 8-bit values
            from the low bits of register rs2 to memory.
      rv64:
        "#load-and-store-instructions":
          text:
          - The SD, SW, SH, and SB instructions store 64-bit, 32-bit, 16-bit, and
            8-bit values from the low bits of register rs2 to memory respectively.
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I store instruction, SB, SH, SW, and SD, there
            is a corresponding virtual-machine store instruction: HSV.B, HSV.H, HSV.W,
            and HSV.D'
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  sc.d:
    opcode:
    - sc.d
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=3
    - 14..12=3
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:lrsc"
    desc:
      a:
        "#sec:lrsc":
          text:
          - LR.D and SC.D act analogously on doublewords and are only available on
            RV64. For RV64, LR.W and SC.W sign-extend the value placed in rd .
  sc.w:
    opcode:
    - sc.w
    - rd
    - rs1
    - rs2
    - aqrl
    - 31..29=0
    - 28..27=3
    - 14..12=2
    - 6..2=0x0B
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    main_desc: a
    main_id: "#sec:lrsc"
    desc:
      a:
        "#sec:lrsc":
          text:
          - 'SC.W conditionally writes a word in rs2 to the address in rs1 : the SC.W
            succeeds only if the reservation is still valid and the reservation set
            contains the bytes being written'
          - If the SC.W succeeds, the instruction writes the word in rs2 to memory,
            and it writes zero to rd
          - If the SC.W fails, the instruction does not write to memory, and it writes
            a nonzero value to rd
          - Regardless of success or failure, executing an SC.W instruction invalidates
            any reservation held by this hart
          - LR.D and SC.D act analogously on doublewords and are only available on
            RV64. For RV64, LR.W and SC.W sign-extend the value placed in rd .
  sd:
    opcode:
    - sd
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=3
    - 6..2=0x08
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#load-and-store-instructions"
    desc:
      rv64:
        "#load-and-store-instructions":
          text:
          - The SD, SW, SH, and SB instructions store 64-bit, 32-bit, 16-bit, and
            8-bit values from the low bits of register rs2 to memory respectively.
      machine:
        "#machine-status-registers-mstatus-and-mstatush":
          text:
          - for RV64. Fields SD, SXL, and UXL do not exist in
        "#extension-context-status-in-mstatus-register":
          text:
          - The design anticipates that most context switches will not need to save/restore
            state in either or both of the floating-point unit or other extensions,
            so provides a fast check via the SD bit.
          - The SD bit is a read-only bit that summarizes whether either the FS, VS,
            or XS fields signal the presence of some dirty state that will require
            saving extended user context to memory
          - If FS, XS, and VS are all read-only zero, then SD is also always zero.
          - The SD bit is read-only and is set when either the FS, VS, or XS bits
            encode a Dirty state (i.e., SD=((FS==11) OR (XS==11) OR (VS==11)))
      hypervisor:
        "#virtual-supervisor-status-register-vsstatus":
          text:
          - Read-only fields SD and XS summarize the extension context status as it
            is visible to VS-mode only
          - ".SD."
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I store instruction, SB, SH, SW, and SD, there
            is a corresponding virtual-machine store instruction: HSV.B, HSV.H, HSV.W,
            and HSV.D'
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
      v:
        "#_vector_context_status_in_mstatus":
          text:
          - If mstatus.VS is Dirty, mstatus.SD is 1; otherwise, mstatus.SD is set
            in accordance with existing specifications.
        "#_vector_context_status_in_vsstatus":
          text:
          - If vsstatus.VS is Dirty, vsstatus.SD is 1; otherwise, vsstatus.SD is set
            in accordance with existing specifications.
          - If mstatus.VS is Dirty, mstatus.SD is 1; otherwise, mstatus.SD is set
            in accordance with existing specifications.
  sfence.vma:
    opcode:
    - sfence.vma
    - 11..7=0
    - rs1
    - rs2
    - 31..25=0x09
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *10
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html"
    main_desc: rvwmo
    main_id: "#ch:memorymodel"
    desc:
      rvwmo:
        "#ch:memorymodel":
          text:
          - The interaction of the memory model with I/O memory, instruction fetches,
            FENCE.I, page table walks, and SFENCE.VMA is not (yet) formalized
      machine:
        "#endianness-control-in-mstatus-and-mstatush-registers":
          text:
          - "Since changing SBE alters the implementation&acirc;\x80\x99s interpretation
            of these data structures, if any such data structures remain in use across
            a change to SBE, M-mode software must follow such a change to SBE by executing
            an SFENCE.VMA instruction with rs1 ="
          - In this case, no additional SFENCE.VMA is necessary, beyond what would
            ordinarily be required for a world switch.
        "#virt-control":
          text:
          - CSR or execute an SFENCE.VMA or SINVAL.VMA instruction while executing
            in S-mode will raise an illegal instruction exception
          - accesses and the SFENCE.VMA and SINVAL.VMA instructions provides the hooks
            necessary to lazily populate shadow page tables.
        "#pmp-vmem":
          text:
          - This is accomplished by executing an SFENCE.VMA instruction with rs1 =
          - If page-based virtual memory is not implemented, memory accesses check
            the PMP settings synchronously, so no SFENCE.VMA is needed.
      supervisor:
        "#sec:satp":
          text:
          - is no longer active, unless an SFENCE.VMA instruction matching the address
            and ASID is executed
          - The SFENCE.VMA instruction must be used to ensure that updates to the
            address-translation data structures are observed by subsequent implicit
            reads to those structures by a hart.
          - "If the new address space&acirc;\x80\x99s page tables have been modified,
            or if an ASID is reused, it may be necessary to execute an SFENCE.VMA
            instruction (see Section&Acirc;&nbsp;"
        "#sec:sfence.vma":
          text:
          - The supervisor memory-management fence instruction SFENCE.VMA is used
            to synchronize updates to in-memory memory-management data structures
            with current execution
          - Executing an SFENCE.VMA instruction guarantees that any previous stores
            already visible to the current RISC-V hart are ordered before certain
            implicit references by subsequent instructions in that hart to the memory-management
            data structures
          - The specific set of operations ordered by SFENCE.VMA is determined by
            rs1 and rs2 , as described below
          - SFENCE.VMA is also used to invalidate entries in the address-translation
            cache associated with a hart (see Section&Acirc;&nbsp;
          - The SFENCE.VMA is used to flush any local hardware caches related to address
            translation
          - SFENCE.VMA is also used by higher privilege levels to synchronize page
            table writes and the address translation hardware.
          - "SFENCE.VMA orders only the local hart&acirc;\x80\x99s implicit references
            to the memory-management data structures."
          - One approach is to use 1) a local data fence to ensure local writes are
            visible globally, then 2) an interprocessor interrupt to the other thread,
            then 3) a local SFENCE.VMA in the interrupt handler of the remote thread,
            and finally 4) signal back to originating thread that operation is complete
          - 'The behavior of SFENCE.VMA depends on rs1 and rs2 as follows:'
          - If the value held in rs1 is not a valid virtual address, then the SFENCE.VMA
            instruction has no effect
          - It is always legal to over-fence, e.g., by fencing only based on a subset
            of the bits in rs1 and/or rs2 , and/or by simply treating all SFENCE.VMA
            instructions as having rs1 =
          - An implicit read of the memory-management data structures may return any
            translation for an address that was valid at any time since the most recent
            SFENCE.VMA that subsumes that address
          - The ordering implied by SFENCE.VMA does not place implicit reads and writes
            to the memory-management data structures into the global memory order
            in a way that interacts cleanly with the standard RVWMO ordering rules
          - In particular, even though an SFENCE.VMA orders prior explicit accesses
            before subsequent implicit accesses, and those implicit accesses are ordered
            before their associated explicit accesses, SFENCE.VMA does not necessarily
            place prior explicit accesses before subsequent explicit accesses in the
            global memory order
          - A consequence of this specification is that an implementation may use
            any translation for an address that was valid at any time since the most
            recent SFENCE.VMA that subsumes that address
          - In particular, if a leaf PTE is modified but a subsuming SFENCE.VMA is
            not executed, either the old translation or the new translation will be
            used, but the choice is unpredictable
          - "In a conventional TLB design, it is possible for multiple entries to
            match a single address if, for example, a page is upgraded to a superpage
            without first clearing the original non-leaf PTE&acirc;\x80\x99s valid
            bit and executing an SFENCE.VMA with rs1 ="
          - fields SUM and MXR take effect immediately, without the need to execute
            an SFENCE.VMA instruction
          - ".MODE from Bare to other modes and vice versa also takes effect immediately,
            without the need to execute an SFENCE.VMA instruction"
          - 'The following common situations typically require executing an SFENCE.VMA
            instruction:'
          - to point to the new page table using the recycled ASID, then execute SFENCE.VMA
            with rs1 =
          - Alternatively, software can execute the same SFENCE.VMA instruction while
            a different ASID is loaded into
          - write, software should execute SFENCE.VMA with rs1 =
          - If software modifies a non-leaf PTE, it should execute SFENCE.VMA with
            rs1 =
          - If software modifies a leaf PTE, it should execute SFENCE.VMA with rs1
            set to a virtual address within the page
          - "; otherwise, rs2 For the special cases of increasing the permissions
            on a leaf PTE and changing an invalid PTE to a valid leaf, software may
            choose to execute the SFENCE.VMA lazily"
          - After modifying the PTE but before executing SFENCE.VMA, either the new
            or old permissions will be used
          - In the latter case, a page-fault exception might occur, at which point
            software should execute SFENCE.VMA in accordance with the previous bullet
            point.
          - ".MODE read-only zero (always Bare), attempts to execute an SFENCE.VMA
            instruction might raise an illegal instruction exception."
        "#sec:translation":
          text:
          - "Additionally, they need not be flushed from local address-translation
            caches when an SFENCE.VMA instruction is executed with rs2 &acirc;\x89&nbsp;"
        "#sv32algorithm":
          text:
          - To ensure that implicit reads observe writes to the same memory locations,
            an SFENCE.VMA instruction must be executed after the writes to flush the
            relevant cached translations.
          - "This represents the fact that in a conventional TLB hierarchy, it is
            possible for multiple entries to match a single address if, for example,
            a page is upgraded to a superpage without first clearing the original
            non-leaf PTE&acirc;\x80\x99s valid bit and executing an SFENCE.VMA with
            rs1 ="
          - 'In this case, just as if an SFENCE.VMA is not executed between a write
            to the memory-management tables and subsequent implicit read of the same
            address: it is unpredictable whether the old non-leaf PTE or the new leaf
            PTE is used, but the behavior is otherwise well defined.'
          - Speculative executions of the address-translation algorithm behave as
            non-speculative executions of the algorithm do, except that they must
            not set the dirty bit for a PTE, they must not trigger an exception, and
            they must not create address-translation cache entries if those entries
            would have been invalidated by any SFENCE.VMA instruction executed by
            the hart since the speculative execution of the algorithm began.
          - For instance, it is illegal for both non-speculative and speculative executions
            of the translation algorithm to begin, read the level 2 page table, pause
            while the hart executes an SFENCE.VMA with rs1 = rs2 =
          - In many implementations, an SFENCE.VMA instruction with rs1 =
        "#svnapot":
          text:
          - If an update needs to be made, the OS generally should first mark all
            of the PTEs invalid, then issue SFENCE.VMA instruction(s) covering all
            4&Acirc;&nbsp;KiB regions within the range (either via a single SFENCE.VMA
            with rs1 =
          - ", or with multiple SFENCE.VMA instructions with rs1 &acirc;\x89&nbsp;"
          - 'If any inconsistencies do exist, then the effect is the same as when
            SFENCE.VMA is used incorrectly: one of the translations will be chosen,
            but the choice is unpredictable.'
        "#svinval":
          text:
          - The Svinval extension splits SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA
            instructions into finer-grained invalidation and ordering operations that
            can be more efficiently batched or pipelined on certain classes of high-performance
            implementation.
          - The SINVAL.VMA instruction invalidates any address-translation cache entries
            that an SFENCE.VMA instruction with the same values of rs1 and rs2 The
            SFENCE.W.INVAL instruction guarantees that any previous stores already
            visible to the current RISC-V hart are ordered before subsequent SINVAL.VMA
            instructions executed by the same hart
          - 'When executed in order (but not necessarily consecutively) by a single
            hart, the sequence SFENCE.W.INVAL, SINVAL.VMA, and SFENCE.INVAL.IR has
            the same effect as a hypothetical SFENCE.VMA instruction in which:'
          - the values of rs1 and rs2 for the SFENCE.VMA are the same as those used
            in the SINVAL.VMA,
          - reads and writes prior to the SFENCE.W.INVAL are considered to be those
            prior to the SFENCE.VMA, and
          - reads and writes following the SFENCE.INVAL.IR are considered to be those
            subsequent to the SFENCE.VMA.
          - These have the same semantics as SINVAL.VMA, except that they combine
            with SFENCE.W.INVAL and SFENCE.INVAL.IR to replace HFENCE.VVMA and HFENCE.GVMA,
            respectively, instead of SFENCE.VMA
          - SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA require the same permissions
            and raise the same exceptions as SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA,
            respectively
          - High-performance implementations will be able to pipeline the address-translation
            cache invalidation operations, and will defer any pipeline stalls or other
            memory ordering enforcement until an SFENCE.W.INVAL, SFENCE.INVAL.IR,
            SFENCE.VMA, HFENCE.GVMA, or HFENCE.VVMA instruction is executed.
          - Simpler implementations may implement SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA
            identically to SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA, respectively,
            while implementing SFENCE.W.INVAL and SFENCE.INVAL.IR instructions as
            no-ops.
      hypervisor:
        "#hypervisor-status-register-hstatus":
          text:
          - When VTVM=1, an attempt in VS-mode to execute SFENCE.VMA or SINVAL.VMA
            or to access CSR
        "#sec:hfence.vma":
          text:
          - The hypervisor memory-management fence instructions, HFENCE.VVMA and HFENCE.GVMA,
            perform a function similar to SFENCE.VMA (Section&Acirc;&nbsp;
          - Instruction SFENCE.VMA applies only to the memory-management data structures
            controlled by the current
          - Its effect is much the same as temporarily entering VS-mode and executing
            SFENCE.VMA
        "#memory-management-fences":
          text:
          - The behavior of the SFENCE.VMA instruction is affected by the current
            virtualization mode V
          - When V=1, the virtual-address argument to SFENCE.VMA is a guest virtual
            address within the current virtual machine, and the ASID argument is a
            VS-level ASID within the current virtual machine
          - The SFENCE.VMA instruction orders stores only to the VS-level address-translation
            structures with subsequent VS-stage address translations for the same
            virtual machine, i.e., only when
          - ".VMID is the same as when the SFENCE.VMA executed."
          - Hypervisor instructions HFENCE.VVMA and HFENCE.GVMA provide additional
            memory-management fences to complement SFENCE.VMA
          - For HS-level address translation, this is accomplished by executing in
            M-mode an SFENCE.VMA instruction with rs1 =
        "#trap-cause-codes":
          text:
          - in VS-mode, attempts to execute an SFENCE.VMA or SINVAL.VMA instruction
            or to access
  sh:
    opcode:
    - sh
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=1
    - 6..2=0x08
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - The SW, SH, and SB instructions store 32-bit, 16-bit, and 8-bit values
            from the low bits of register rs2 to memory.
      rv64:
        "#load-and-store-instructions":
          text:
          - The SD, SW, SH, and SB instructions store 64-bit, 32-bit, 16-bit, and
            8-bit values from the low bits of register rs2 to memory respectively.
      hypervisor:
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I store instruction, SB, SH, SW, and SD, there
            is a corresponding virtual-machine store instruction: HSV.B, HSV.H, HSV.W,
            and HSV.D'
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  sll:
    opcode:
    - sll
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=1
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            the lower 5 bits of register rs2 .
      rv64:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            register rs2
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  slli:
    opcode:
    - slli
    - rd
    - rs1
    - 31..26=0
    - shamt
    - 14..12=1
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  slliw:
    opcode:
    - slliw
    - rd
    - rs1
    - 31..25=0
    - shamtw
    - 14..12=1
    - 6..2=0x06
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
          - "SLLIW, SRLIW, and SRAIW encodings with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
          - "Previously, SLLIW, SRLIW, and SRAIW with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
  sllw:
    opcode:
    - sllw
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=1
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-register-operations"
    desc:
      rv64:
        "#integer-register-register-operations":
          text:
          - SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
  slt:
    opcode:
    - slt
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=2
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SLT and SLTU perform signed and unsigned compares respectively, writing
            1 to rd if
      a:
        "#sec:lrsc":
          text:
          - "We reserve a failure code of 1 to mean &acirc;\x80\x9Cunspecified&acirc;\x80\x9D
            so that simple implementations may return this value using the existing
            mux required for the SLT/SLTU instructions"
  slti:
    opcode:
    - slti
    - rd
    - rs1
    - imm12
    - 14..12=2
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - SLTI (set less than immediate) places the value 1 in register rd rs1 is
            less than the sign-extended immediate when both are treated as signed
            numbers, else 0 is written to rd
  sltiu:
    opcode:
    - sltiu
    - rd
    - rs1
    - imm12
    - 14..12=3
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - SLTIU is similar but compares the values as unsigned numbers (i.e., the
            immediate is first sign-extended to XLEN bits then treated as an unsigned
            number)
          - Note, SLTIU rd, rs1, 1 sets rd rs1 equals zero, otherwise sets rd to 0
            (assembler pseudoinstruction SEQZ rd, rs ).
  sltu:
    opcode:
    - sltu
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=3
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SLT and SLTU perform signed and unsigned compares respectively, writing
            1 to rd if
          - Note, SLTU rd , x0 , rs2 sets rd to 1 if rs2 is not equal to zero, otherwise
            sets rd to zero (assembler pseudoinstruction SNEZ rd, rs )
      rv64:
        "#integer-computational-instructions":
          text:
          - Existing 64-bit wide SLTU and unsigned branch compares still operate correctly
            on unsigned 32-bit integers under this invariant
      a:
        "#sec:lrsc":
          text:
          - "We reserve a failure code of 1 to mean &acirc;\x80\x9Cunspecified&acirc;\x80\x9D
            so that simple implementations may return this value using the existing
            mux required for the SLT/SLTU instructions"
  sra:
    opcode:
    - sra
    - rd
    - rs1
    - rs2
    - 31..25=32
    - 14..12=5
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            the lower 5 bits of register rs2 .
      rv64:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            register rs2
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  srai:
    opcode:
    - srai
    - rd
    - rs1
    - 31..26=16
    - shamt
    - 14..12=5
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  sraiw:
    opcode:
    - sraiw
    - rd
    - rs1
    - 31..25=32
    - shamtw
    - 14..12=5
    - 6..2=0x06
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
          - "SLLIW, SRLIW, and SRAIW encodings with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
          - "Previously, SLLIW, SRLIW, and SRAIW with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
  sraw:
    opcode:
    - sraw
    - rd
    - rs1
    - rs2
    - 31..25=32
    - 14..12=5
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-register-operations"
    desc:
      rv64:
        "#integer-register-register-operations":
          text:
          - SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
  sret:
    opcode:
    - sret
    - 11..7=0
    - 19..15=0
    - 31..20=0x102
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
    main_url_base: "/riscv-priv-isa-manual/Priv-v1.12/machine.html"
    main_desc: machine
    main_id: "#privstack"
    desc:
      machine:
        "#privstack":
          text:
          - An MRET or SRET instruction is used to return from a trap in M-mode or
            S-mode respectively
        "#memory-privilege-in-mstatus-register":
          text:
          - An MRET or SRET instruction that changes the privilege mode to a mode
            less privileged than M also sets MPRV=0.
        "#virt-control":
          text:
          - The TSR (Trap SRET) bit is a
          - "&Acirc;&nbsp;field that supports intercepting the supervisor exception
            return instruction, SRET"
          - When TSR=1, attempts to execute SRET while executing in S-mode will raise
            an illegal instruction exception
          - Trapping SRET is necessary to emulate the hypervisor extension (see Chapter&Acirc;&nbsp;
        "#otherpriv":
          text:
          - To return after handling a trap, there are separate trap return instructions
            per privilege level, MRET and SRET
          - SRET must be provided if supervisor mode is supported, and should raise
            an illegal instruction exception otherwise
          - SRET should also raise an illegal instruction exception when TSR=1 in
      supervisor:
        "#sstatus":
          text:
          - When an SRET instruction (see Section&Acirc;&nbsp;
          - When a trap is taken into supervisor mode, SPIE is set to SIE, and SIE
            is set to 0. When an SRET instruction is executed, SIE is set to SPIE,
            then SPIE is set to 1.
        "#supervisor-interrupt-registers-sip-and-sie":
          text:
          - ", and must also be evaluated immediately following the execution of an
            SRET instruction or an explicit write to a CSR on which these interrupt
            trap conditions expressly depend (including"
        "#supervisor-exception-program-counter-sepc":
          text:
          - is masked on reads so that it appears to be 0. This masking occurs also
            for the implicit read by the SRET instruction
        "#supervisor-instructions":
          text:
          - In addition to the SRET instruction defined in Section&Acirc;&nbsp;
      hypervisor:
        "#hypervisor-and-virtual-supervisor-csrs":
          text:
          - Matching VS CSRs exist only for the supervisor CSRs that must be duplicated,
            which are mainly those that get automatically written by traps or that
            impact instruction execution immediately after trap entry and/or right
            before SRET, when software alone is unable to swap a CSR at exactly the
            right moment
        "#hypervisor-status-register-hstatus":
          text:
          - When VTSR=1, an attempt in VS-mode to execute SRET raises a virtual instruction
            exception
          - When an SRET instruction is executed when V=0, V is set to SPV.
          - ".SPP for the effective privilege of their memory accesses, then, even
            with HU=1, U-mode could not access virtual machine memory at VS-level,
            because to enter U-mode using SRET always leaves SPP=0. Unlike SPP, field
            SPVP is untouched by transitions back-and-forth between HS-mode and U-mode."
        "#trap-cause-codes":
          text:
          - ".TW=0, or to execute a supervisor instruction (SRET or SFENCE);"
          - in VS-mode, attempts to execute SRET when
        "#trap-return":
          text:
          - The SRET instruction is used to return from a trap taken into HS-mode
            or VS-mode
          - When executed in M-mode or HS-mode (i.e., V=0), SRET first determines
            what the new privilege mode will be according to the values in
          - ". SRET then sets"
          - sets SPP=0, SIE=SPIE, and SPIE=1. Lastly, SRET sets the privilege mode
            as previously determined, and sets
          - When executed in VS-mode (i.e., V=1), SRET sets the privilege mode according
            to Table&Acirc;&nbsp;
  srl:
    opcode:
    - srl
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=5
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            the lower 5 bits of register rs2 .
      rv64:
        "#integer-register-register-operations":
          text:
          - SLL, SRL, and SRA perform logical left, logical right, and arithmetic
            right shifts on the value in register rs1 by the shift amount held in
            register rs2
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  srli:
    opcode:
    - srli
    - rd
    - rs1
    - 31..26=0
    - shamt
    - 14..12=5
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - The right shift type is encoded in bit 30. SLLI is a logical left shift
            (zeros are shifted into the lower bits); SRLI is a logical right shift
            (zeros are shifted into the upper bits); and SRAI is an arithmetic right
            shift (the original sign bit is copied into the vacated upper bits).
      rv128:
        "#rv128":
          text:
          - Shifts by an immediate (SLLI/SRLI/SRAI) are now encoded using the low
            7 bits of the I-immediate, and variable shifts (SLL/SRL/SRA) use the low
            7 bits of the shift amount source register.
  srliw:
    opcode:
    - srliw
    - rd
    - rs1
    - 31..25=0
    - shamtw
    - 14..12=5
    - 6..2=0x06
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *3
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv64:
        "#integer-register-immediate-instructions":
          text:
          - SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
          - "SLLIW, SRLIW, and SRAIW encodings with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
          - "Previously, SLLIW, SRLIW, and SRAIW with i m m [5]&acirc;\x80\x84&acirc;\x89&nbsp;&acirc;\x80\x840"
  srlw:
    opcode:
    - srlw
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=5
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-register-register-operations"
    desc:
      rv64:
        "#integer-register-register-operations":
          text:
          - SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously
            defined but operate on 32-bit values and sign-extend their 32-bit results
            to 64 bits
  sub:
    opcode:
    - sub
    - rd
    - rs1
    - rs2
    - 31..25=32
    - 14..12=0
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-register-operations"
    desc:
      rv32:
        "#integer-register-register-operations":
          text:
          - SUB performs the subtraction of rs2 from rs1
      rv64:
        "#integer-register-register-operations":
          text:
          - ADDW and SUBW are RV64I-only instructions that are defined analogously
            to ADD and SUB but operate on 32-bit values and produce signed 32-bit
            results
  subw:
    opcode:
    - subw
    - rd
    - rs1
    - rs2
    - 31..25=32
    - 14..12=0
    - 6..2=0x0E
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    main_desc: rv64
    main_id: "#integer-computational-instructions"
    desc:
      rv64:
        "#integer-computational-instructions":
          text:
          - A few new instructions (ADD[I]W/SUBW/SxxW) are required for addition and
            shifts to ensure reasonable performance for 32-bit values.
        "#integer-register-register-operations":
          text:
          - ADDW and SUBW are RV64I-only instructions that are defined analogously
            to ADD and SUB but operate on 32-bit values and produce signed 32-bit
            results
  sw:
    opcode:
    - sw
    - imm12hi
    - rs1
    - rs2
    - imm12lo
    - 14..12=2
    - 6..2=0x08
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *9
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#sec:rv32:ldst"
    desc:
      rv32:
        "#sec:rv32:ldst":
          text:
          - The SW, SH, and SB instructions store 32-bit, 16-bit, and 8-bit values
            from the low bits of register rs2 to memory.
      rv64:
        "#load-and-store-instructions":
          text:
          - The SD, SW, SH, and SB instructions store 64-bit, 32-bit, 16-bit, and
            8-bit values from the low bits of register rs2 to memory respectively.
      machine:
        "#machine-environment-configuration-registers-menvcfg-and-menvcfgh":
          text:
          - Successor device output and memory writes (SW implied)
      supervisor:
        "#supervisor-environment-configuration-register-senvcfg":
          text:
          - Successor device output and memory writes (SW implied)
      hypervisor:
        "#hypervisor-environment-configuration-registers-henvcfg-and-henvcfgh":
          text:
          - Successor device output and memory writes (SW implied)
        "#hypervisor-virtual-machine-load-and-store-instructions":
          text:
          - 'For every RV32I or RV64I store instruction, SB, SH, SW, and SD, there
            is a corresponding virtual-machine store instruction: HSV.B, HSV.H, HSV.W,
            and HSV.D'
        "#sec:tinst-vals":
          text:
          - For a standard store instruction that is not a compressed instruction
            and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction
            has the format shown in Figure&Acirc;&nbsp;
          - Transformed noncompressed store instruction (SB, SH, SW, SD, FSW, FSD,
            FSQ, or FSH)
          - ", once software has determined that the register contains the encoding
            of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ,
            or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is
            not necessary to confirm also that the immediate offset fields (31:25,
            and 24:20 or 11:7) are zeros"
  uret:
    opcode:
    - uret
    - 11..7=0
    - 19..15=0
    - 31..20=0x002
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
  vaadd.vi:
    opcode:
    - vaadd.vi
    - 31..26=0x24
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &13
    - vs2
    - simm5
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_averaging_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_averaging_add_and_subtract":
          text:
          - For vaaddu and vaadd there can be no overflow in the result
          - 'vaadd.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] + vs1[i], 1)'
          - 'vaadd.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] + x[rs1], 1)'
        "#_vector_instruction_listing":
          text:
          - vaadd
  vaadd.vv:
    opcode:
    - vaadd.vv
    - 31..26=0x24
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &12
    - vs2
    - rs1
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_averaging_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_averaging_add_and_subtract":
          text:
          - For vaaddu and vaadd there can be no overflow in the result
          - 'vaadd.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] + vs1[i], 1)'
          - 'vaadd.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] + x[rs1], 1)'
        "#_vector_instruction_listing":
          text:
          - vaadd
  vaadd.vx:
    opcode:
    - vaadd.vx
    - 31..26=0x24
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_averaging_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_averaging_add_and_subtract":
          text:
          - For vaaddu and vaadd there can be no overflow in the result
          - 'vaadd.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] + vs1[i], 1)'
          - 'vaadd.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] + x[rs1], 1)'
        "#_vector_instruction_listing":
          text:
          - vaadd
  vadc.vim:
    opcode:
    - vadc.vim
    - 31..26=0x10
    - 25=1
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - ". Due to encoding constraints, the carry input must come from the implicit
            v0 vadc and vsbc add or subtract the source operands and the carry-in
            or borrow-in, and write the result to vector register vd"
          - For vadc and vsbc , the instruction encoding is reserved if the destination
            vector register is v0 .
          - 'vadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vadc.vvm v4, v4, v8, v0   # Calc new sum'
        "#_vector_instruction_listing":
          text:
          - vadc
  vadc.vvm:
    opcode:
    - vadc.vvm
    - 31..26=0x10
    - 25=1
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - ". Due to encoding constraints, the carry input must come from the implicit
            v0 vadc and vsbc add or subtract the source operands and the carry-in
            or borrow-in, and write the result to vector register vd"
          - For vadc and vsbc , the instruction encoding is reserved if the destination
            vector register is v0 .
          - 'vadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vadc.vvm v4, v4, v8, v0   # Calc new sum'
        "#_vector_instruction_listing":
          text:
          - vadc
  vadc.vxm:
    opcode:
    - vadc.vxm
    - 31..26=0x10
    - 25=1
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - ". Due to encoding constraints, the carry input must come from the implicit
            v0 vadc and vsbc add or subtract the source operands and the carry-in
            or borrow-in, and write the result to vector register vd"
          - For vadc and vsbc , the instruction encoding is reserved if the destination
            vector register is v0 .
          - 'vadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vadc.vvm v4, v4, v8, v0   # Calc new sum'
        "#_vector_instruction_listing":
          text:
          - vadc
  vadd.vi:
    opcode:
    - vadd.vi
    - 31..26=0x00
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - 'vadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vadd
        "#_vector_vector_add_example":
          text:
          - 'vadd.vv v2, v0, v1       # Sum vectors'
        "#_fractional_lmul_example":
          text:
          - "vadd.vv\tv25, v26, v25"
          - "vadd.vv\tv16, v16, v8"
          - "vadd.vv\tv8, v8, v24"
          - "vadd.vv\tv24, v0, v24"
          - "vadd.vv\tv0, v0, v24"
          - "vadd.vv\tv8, v8, v16"
          - "vadd.vv\tv8, v8, v0"
          - "vadd.vv\tv28, v8, v28"
          - "vadd.vv\tv8, v12, v8"
          - "vadd.vv\tv12, v20, v16"
          - "vadd.vv\tv16, v20, v16"
          - "vadd.vv\tv28, v28, v12"
          - "vadd.vv\tv28, v28, v16"
          - "vadd.vv\tv28, v28, v20"
  vadd.vv:
    opcode:
    - vadd.vv
    - 31..26=0x00
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - 'vadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vadd
        "#_vector_vector_add_example":
          text:
          - 'vadd.vv v2, v0, v1       # Sum vectors'
        "#_fractional_lmul_example":
          text:
          - "vadd.vv\tv25, v26, v25"
          - "vadd.vv\tv16, v16, v8"
          - "vadd.vv\tv8, v8, v24"
          - "vadd.vv\tv24, v0, v24"
          - "vadd.vv\tv0, v0, v24"
          - "vadd.vv\tv8, v8, v16"
          - "vadd.vv\tv8, v8, v0"
          - "vadd.vv\tv28, v8, v28"
          - "vadd.vv\tv8, v12, v8"
          - "vadd.vv\tv12, v20, v16"
          - "vadd.vv\tv16, v20, v16"
          - "vadd.vv\tv28, v28, v12"
          - "vadd.vv\tv28, v28, v16"
          - "vadd.vv\tv28, v28, v20"
  vadd.vx:
    opcode:
    - vadd.vx
    - 31..26=0x00
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - 'vadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vadd
        "#_vector_vector_add_example":
          text:
          - 'vadd.vv v2, v0, v1       # Sum vectors'
        "#_fractional_lmul_example":
          text:
          - "vadd.vv\tv25, v26, v25"
          - "vadd.vv\tv16, v16, v8"
          - "vadd.vv\tv8, v8, v24"
          - "vadd.vv\tv24, v0, v24"
          - "vadd.vv\tv0, v0, v24"
          - "vadd.vv\tv8, v8, v16"
          - "vadd.vv\tv8, v8, v0"
          - "vadd.vv\tv28, v8, v28"
          - "vadd.vv\tv8, v12, v8"
          - "vadd.vv\tv12, v20, v16"
          - "vadd.vv\tv16, v20, v16"
          - "vadd.vv\tv28, v28, v12"
          - "vadd.vv\tv28, v28, v16"
          - "vadd.vv\tv28, v28, v20"
  vand.vi:
    opcode:
    - vand.vi
    - 31..26=0x09
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vand.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vand.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vand.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vand
  vand.vv:
    opcode:
    - vand.vv
    - 31..26=0x09
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vand.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vand.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vand.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vand
  vand.vx:
    opcode:
    - vand.vx
    - 31..26=0x09
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vand.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vand.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vand.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vand
  vasub.vv:
    opcode:
    - vasub.vv
    - 31..26=0x26
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_averaging_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_averaging_add_and_subtract":
          text:
          - For vasub and vasubu , overflow is ignored and the result wraps around.
          - Note vasub , overflow occurs only when subtracting the smallest number
            from the largest number under rnu or rne rounding
          - 'vasub.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] - vs1[i], 1)'
          - 'vasub.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] - x[rs1], 1)'
        "#_vector_instruction_listing":
          text:
          - vasub
  vasub.vx:
    opcode:
    - vasub.vx
    - 31..26=0x26
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_averaging_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_averaging_add_and_subtract":
          text:
          - For vasub and vasubu , overflow is ignored and the result wraps around.
          - Note vasub , overflow occurs only when subtracting the smallest number
            from the largest number under rnu or rne rounding
          - 'vasub.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] - vs1[i], 1)'
          - 'vasub.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] - x[rs1], 1)'
        "#_vector_instruction_listing":
          text:
          - vasub
  vcompress.vm:
    opcode:
    - vcompress.vm
    - 31..26=0x17
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &14
    - vs2
    - vs1
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_compress_instruction"
    desc:
      v:
        "#_vector_compress_instruction":
          text:
          - vcompress is encoded as an unmasked instruction ( vm=1 )
          - A trap on a vcompress instruction is always reported with a vstart of
            0. Executing a vcompress instruction with a non-zero vstart raises an
            illegal instruction exception.
          - Note vcompress is one of the more difficult instructions to restart with
            a non-zero vstart , so assumption is implementations will choose not do
            that but will instead restart from element 0. This does mean elements
            in destination register after vstart will already have been updated
          - 'vcompress.vm vd, vs2, vs1  # Compress into vd elements of vs2 where vs1
            is enabled'
          - Example use of vcompress instruction
          - vcompress.vm v2, v1, v0
        "#_vector_instruction_listing":
          text:
          - vcompress
  vdiv.vv:
    opcode:
    - vdiv.vv
    - 31..26=0x21
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vdiv.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vdiv.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vdiv
  vdiv.vx:
    opcode:
    - vdiv.vx
    - 31..26=0x21
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vdiv.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vdiv.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vdiv
  vdivu.vv:
    opcode:
    - vdivu.vv
    - 31..26=0x20
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vdivu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vdivu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vdivu
  vdivu.vx:
    opcode:
    - vdivu.vx
    - 31..26=0x20
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vdivu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vdivu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vdivu
  vdot.vv:
    opcode:
    - vdot.vv
    - 31..26=0x39
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vdotu.vv:
    opcode:
    - vdotu.vv
    - 31..26=0x38
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vext.x.v:
    opcode:
    - vext.x.v
    - 31..26=0x0c
    - 25=1
    - vs2
    - rs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfadd.vf:
    opcode:
    - vfadd.vf
    - 31..26=0x00
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_addsubtract_instructions":
          text:
          - 'vfadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfadd.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfadd
  vfadd.vv:
    opcode:
    - vfadd.vv
    - 31..26=0x00
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_addsubtract_instructions":
          text:
          - 'vfadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfadd.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfadd
  vfdiv.vf:
    opcode:
    - vfdiv.vf
    - 31..26=0x20
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_multiplydivide_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_multiplydivide_instructions":
          text:
          - 'vfdiv.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfdiv.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfdiv
  vfdiv.vv:
    opcode:
    - vfdiv.vv
    - 31..26=0x20
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_multiplydivide_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_multiplydivide_instructions":
          text:
          - 'vfdiv.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfdiv.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfdiv
  vfdot.vv:
    opcode:
    - vfdot.vv
    - 31..26=0x39
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfeq.vf:
    opcode:
    - vfeq.vf
    - 31..26=0x18
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfeq.vv:
    opcode:
    - vfeq.vv
    - 31..26=0x18
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfge.vf:
    opcode:
    - vfge.vf
    - 31..26=0x1f
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfgt.vf:
    opcode:
    - vfgt.vf
    - 31..26=0x1d
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfle.vf:
    opcode:
    - vfle.vf
    - 31..26=0x19
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfle.vv:
    opcode:
    - vfle.vv
    - 31..26=0x19
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vflt.vf:
    opcode:
    - vflt.vf
    - 31..26=0x1b
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vflt.vv:
    opcode:
    - vflt.vv
    - 31..26=0x1b
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfmacc.vf:
    opcode:
    - vfmacc.vf
    - 31..26=0x2c
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vfmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfmacc
        "#_saxpy_example":
          text:
          - vfmacc.vf v8, fa0, v0
        "#_sgemm_example":
          text:
          - "# Inner loop scheduled assuming 4-clock occupancy of vfmacc instruction
            and single-issue pipeline"
          - vfmacc.vf v0, ft0, v16
          - vfmacc.vf v1, ft1, v16
          - vfmacc.vf v2, ft2, v16
          - vfmacc.vf v3, ft3, v16
          - vfmacc.vf v4, ft4, v16
          - vfmacc.vf v5, ft5, v16
          - vfmacc.vf v6, ft6, v16
          - vfmacc.vf v7, ft7, v16
          - vfmacc.vf v8, ft8, v16
          - vfmacc.vf v9, ft9, v16
          - vfmacc.vf v10, ft10, v16
          - vfmacc.vf v11, ft11, v16
          - '1:  vfmacc.vf v12, ft12, v16'
          - '1:  vfmacc.vf v13, ft13, v16'
          - '1:  vfmacc.vf v14, ft14, v16'
          - vfmacc.vf v15, ft15, v16
          - '1:  vfmacc.vf v15, ft15, v16'
  vfmacc.vv:
    opcode:
    - vfmacc.vv
    - 31..26=0x2c
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vfmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfmacc
        "#_saxpy_example":
          text:
          - vfmacc.vf v8, fa0, v0
        "#_sgemm_example":
          text:
          - "# Inner loop scheduled assuming 4-clock occupancy of vfmacc instruction
            and single-issue pipeline"
          - vfmacc.vf v0, ft0, v16
          - vfmacc.vf v1, ft1, v16
          - vfmacc.vf v2, ft2, v16
          - vfmacc.vf v3, ft3, v16
          - vfmacc.vf v4, ft4, v16
          - vfmacc.vf v5, ft5, v16
          - vfmacc.vf v6, ft6, v16
          - vfmacc.vf v7, ft7, v16
          - vfmacc.vf v8, ft8, v16
          - vfmacc.vf v9, ft9, v16
          - vfmacc.vf v10, ft10, v16
          - vfmacc.vf v11, ft11, v16
          - '1:  vfmacc.vf v12, ft12, v16'
          - '1:  vfmacc.vf v13, ft13, v16'
          - '1:  vfmacc.vf v14, ft14, v16'
          - vfmacc.vf v15, ft15, v16
          - '1:  vfmacc.vf v15, ft15, v16'
  vfmadd.vf:
    opcode:
    - vfmadd.vf
    - 31..26=0x28
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmadd.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) + vs2[i]'
          - 'vfmadd.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfmadd
        "#_square_root_approximation_example":
          text:
          - 'vfmadd.vv v4, v3, v5, v0.t  # 1.5 - 0.5 * x * est * est'
  vfmadd.vv:
    opcode:
    - vfmadd.vv
    - 31..26=0x28
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmadd.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) + vs2[i]'
          - 'vfmadd.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfmadd
        "#_square_root_approximation_example":
          text:
          - 'vfmadd.vv v4, v3, v5, v0.t  # 1.5 - 0.5 * x * est * est'
  vfmax.vf:
    opcode:
    - vfmax.vf
    - 31..26=0x06
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_minmax_instructions"
    desc:
      v:
        "#_vector_floating_point_minmax_instructions":
          text:
          - 'vfmax.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmax.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmax
  vfmax.vv:
    opcode:
    - vfmax.vv
    - 31..26=0x06
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_minmax_instructions"
    desc:
      v:
        "#_vector_floating_point_minmax_instructions":
          text:
          - 'vfmax.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmax.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmax
  vfmerge.vfm:
    opcode:
    - vfmerge.vfm
    - 31..26=0x17
    - 25=0
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_merge_instruction"
    desc:
      v:
        "#_vector_floating_point_merge_instruction":
          text:
          - The vfmerge.vfm instruction is encoded as a masked instruction ( vm=0
            )
          - 'vfmerge.vfm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? f[rs1] : vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfmerge/vfmv
  vfmin.vf:
    opcode:
    - vfmin.vf
    - 31..26=0x04
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_minmax_instructions"
    desc:
      v:
        "#_vector_floating_point_minmax_instructions":
          text:
          - The vector floating-point vfmin and vfmax instructions have the same behavior
            as the corresponding scalar floating-point instructions in version 2.2
            of the RISC-V F/D/Q extension.
          - 'vfmin.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmin.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmin
  vfmin.vv:
    opcode:
    - vfmin.vv
    - 31..26=0x04
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_minmax_instructions"
    desc:
      v:
        "#_vector_floating_point_minmax_instructions":
          text:
          - The vector floating-point vfmin and vfmax instructions have the same behavior
            as the corresponding scalar floating-point instructions in version 2.2
            of the RISC-V F/D/Q extension.
          - 'vfmin.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmin.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmin
  vfmsac.vf:
    opcode:
    - vfmsac.vf
    - 31..26=0x2e
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]'
          - 'vfmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfmsac
  vfmsac.vv:
    opcode:
    - vfmsac.vv
    - 31..26=0x2e
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]'
          - 'vfmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfmsac
  vfmsub.vf:
    opcode:
    - vfmsub.vf
    - 31..26=0x2a
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmsub.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) - vs2[i]'
          - 'vfmsub.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfmsub
  vfmsub.vv:
    opcode:
    - vfmsub.vv
    - 31..26=0x2a
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfmsub.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) - vs2[i]'
          - 'vfmsub.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfmsub
  vfmul.vf:
    opcode:
    - vfmul.vf
    - 31..26=0x24
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_multiplydivide_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_multiplydivide_instructions":
          text:
          - 'vfmul.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmul.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmul
        "#_division_approximation_example":
          text:
          - 'vfmul.vv v3, v3, v4         # Better estimate of 1/v2'
          - 'vfmul.vv v1, v1, v3         # Estimate of v1/v2'
        "#_square_root_approximation_example":
          text:
          - 'vfmul.vf v3, v1, ft0, v0.t  # -0.5 * x'
          - 'vfmul.vv v4, v2, v2, v0.t   # est * est'
          - 'vfmul.vv v1, v1, v4, v0.t   # estimate to 14 bits'
          - 'vfmul.vv v4, v1, v1, v0.t   # est * est'
          - 'vfmul.vv v1, v1, v4, v0.t   # estimate to 23 bits'
  vfmul.vv:
    opcode:
    - vfmul.vv
    - 31..26=0x24
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_multiplydivide_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_multiplydivide_instructions":
          text:
          - 'vfmul.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfmul.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfmul
        "#_division_approximation_example":
          text:
          - 'vfmul.vv v3, v3, v4         # Better estimate of 1/v2'
          - 'vfmul.vv v1, v1, v3         # Estimate of v1/v2'
        "#_square_root_approximation_example":
          text:
          - 'vfmul.vf v3, v1, ft0, v0.t  # -0.5 * x'
          - 'vfmul.vv v4, v2, v2, v0.t   # est * est'
          - 'vfmul.vv v1, v1, v4, v0.t   # estimate to 14 bits'
          - 'vfmul.vv v4, v1, v1, v0.t   # est * est'
          - 'vfmul.vv v1, v1, v4, v0.t   # estimate to 23 bits'
  vfmv.f.s:
    opcode:
    - vfmv.f.s
    - 31..26=0x0c
    - 25=1
    - vs2
    - 19..15=0
    - 14..12=0x1
    - rd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &32
    - vs2
    - rd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_move_instruction"
    desc:
      v:
        "#_vector_floating_point_move_instruction":
          text:
          - Note vfmv.v.f instruction shares the encoding with the vfmerge.vfm vm=1
            and vs2=v0
          - 'vfmv.v.f vd, rs1  # vd[i] = f[rs1]'
        "#_floating_point_scalar_move_instructions":
          text:
          - The vfmv.f.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination scalar floating-point register.
          - Note vfmv.f.s performs its operation even if vstart &ge; vl or vl =0.
          - The vfmv.s.f instruction copies the scalar floating-point register to
            element 0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vfmv.f.s
            vfmv.s.f are reserved.
          - 'vfmv.f.s rd, vs2  # f[rd] = vs2[0] (rs1=0)'
          - 'vfmv.s.f vd, rs1  # vd[0] = f[rs1] (vs2=0)'
        "#_vector_instruction_listing":
          text:
          - vfmv.s.f
          - vfmv.f.s
  vfmv.s.f:
    opcode:
    - vfmv.s.f
    - 31..26=0x0d
    - 25=1
    - 24..20=0
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &15
    - rs1
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_move_instruction"
    desc:
      v:
        "#_vector_floating_point_move_instruction":
          text:
          - Note vfmv.v.f instruction shares the encoding with the vfmerge.vfm vm=1
            and vs2=v0
          - 'vfmv.v.f vd, rs1  # vd[i] = f[rs1]'
        "#_floating_point_scalar_move_instructions":
          text:
          - The vfmv.f.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination scalar floating-point register.
          - Note vfmv.f.s performs its operation even if vstart &ge; vl or vl =0.
          - The vfmv.s.f instruction copies the scalar floating-point register to
            element 0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vfmv.f.s
            vfmv.s.f are reserved.
          - 'vfmv.f.s rd, vs2  # f[rd] = vs2[0] (rs1=0)'
          - 'vfmv.s.f vd, rs1  # vd[0] = f[rs1] (vs2=0)'
        "#_vector_instruction_listing":
          text:
          - vfmv.s.f
          - vfmv.f.s
  vfmv.v.f:
    opcode:
    - vfmv.v.f
    - 31..26=0x17
    - 25=1
    - 24..20=0
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_move_instruction"
    desc:
      v:
        "#_vector_floating_point_move_instruction":
          text:
          - Note vfmv.v.f instruction shares the encoding with the vfmerge.vfm vm=1
            and vs2=v0
          - 'vfmv.v.f vd, rs1  # vd[i] = f[rs1]'
        "#_floating_point_scalar_move_instructions":
          text:
          - The vfmv.f.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination scalar floating-point register.
          - Note vfmv.f.s performs its operation even if vstart &ge; vl or vl =0.
          - The vfmv.s.f instruction copies the scalar floating-point register to
            element 0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vfmv.f.s
            vfmv.s.f are reserved.
          - 'vfmv.f.s rd, vs2  # f[rd] = vs2[0] (rs1=0)'
          - 'vfmv.s.f vd, rs1  # vd[0] = f[rs1] (vs2=0)'
        "#_vector_instruction_listing":
          text:
          - vfmv.s.f
          - vfmv.f.s
  vfne.vf:
    opcode:
    - vfne.vf
    - 31..26=0x1c
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfne.vv:
    opcode:
    - vfne.vv
    - 31..26=0x1c
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfnmacc.vf:
    opcode:
    - vfnmacc.vf
    - 31..26=0x2d
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]'
          - 'vfnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmacc
  vfnmacc.vv:
    opcode:
    - vfnmacc.vv
    - 31..26=0x2d
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]'
          - 'vfnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmacc
  vfnmadd.vf:
    opcode:
    - vfnmadd.vf
    - 31..26=0x29
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmadd.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) - vs2[i]'
          - 'vfnmadd.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmadd
  vfnmadd.vv:
    opcode:
    - vfnmadd.vv
    - 31..26=0x29
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmadd.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) - vs2[i]'
          - 'vfnmadd.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmadd
  vfnmsac.vf:
    opcode:
    - vfnmsac.vf
    - 31..26=0x2f
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vfnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmsac
        "#_division_approximation_example":
          text:
          - 'vfnmsac.vv v4, v2, v3       # 2.0 - v2 * est(1/v2)'
  vfnmsac.vv:
    opcode:
    - vfnmsac.vv
    - 31..26=0x2f
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vfnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmsac
        "#_division_approximation_example":
          text:
          - 'vfnmsac.vv v4, v2, v3       # 2.0 - v2 * est(1/v2)'
  vfnmsub.vf:
    opcode:
    - vfnmsub.vf
    - 31..26=0x2b
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmsub.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) + vs2[i]'
          - 'vfnmsub.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmsub
  vfnmsub.vv:
    opcode:
    - vfnmsub.vv
    - 31..26=0x2b
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfnmsub.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) + vs2[i]'
          - 'vfnmsub.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfnmsub
  vford.vf:
    opcode:
    - vford.vf
    - 31..26=0x1a
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vford.vv:
    opcode:
    - vford.vv
    - 31..26=0x1a
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfrdiv.vf:
    opcode:
    - vfrdiv.vf
    - 31..26=0x21
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_multiplydivide_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_multiplydivide_instructions":
          text:
          - 'vfrdiv.vf vd, vs2, rs1, vm  # scalar-vector, vd[i] = f[rs1]/vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vfrdiv
  vfredmax.vs:
    opcode:
    - vfredmax.vs
    - 31..26=0x07
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce"
    desc:
      v:
        "#sec-vector-float-reduce":
          text:
          - 'vfredmax.vs  vd, vs2, vs1, vm # Maximum value'
        "#_vector_instruction_listing":
          text:
          - vfredmax
  vfredmin.vs:
    opcode:
    - vfredmin.vs
    - 31..26=0x05
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce"
    desc:
      v:
        "#sec-vector-float-reduce":
          text:
          - 'vfredmin.vs  vd, vs2, vs1, vm # Minimum value'
        "#_vector_instruction_listing":
          text:
          - vfredmin
  vfredosum.vs:
    opcode:
    - vfredosum.vs
    - 31..26=0x03
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce"
    desc:
      v:
        "#sec-vector-float-reduce":
          text:
          - 'vfredosum.vs vd, vs2, vs1, vm # Ordered sum'
        "#_vector_ordered_single_width_floating_point_sum_reduction":
          text:
          - 'The vfredosum instruction must sum the floating-point values in element
            order, starting with the scalar in vs1[0] --that is, it performs the computation:'
        "#_vector_unordered_single_width_floating_point_sum_reduction":
          text:
          - Note vfredosum
          - Note vfredosum instruction is a valid implementation of the vfredusum
            instruction
        "#_vector_instruction_listing":
          text:
          - vfredosum
  vfredsum.vs:
    opcode:
    - vfredsum.vs
    - 31..26=0x01
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce"
    desc:
      v:
        "#sec-vector-float-reduce":
          text:
          - Note vfredsum is retained as alias for vfredusum
  vfsgnj.vf:
    opcode:
    - vfsgnj.vf
    - 31..26=0x08
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - 'vfsgnj.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfsgnj.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnj
  vfsgnj.vv:
    opcode:
    - vfsgnj.vv
    - 31..26=0x08
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - 'vfsgnj.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfsgnj.vf vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnj
  vfsgnjn.vf:
    opcode:
    - vfsgnjn.vf
    - 31..26=0x09
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - Note vfneg.v vd,vs vfsgnjn.vv vd,vs,vs
          - 'vfsgnjn.vv vd, vs2, vs1, vm  # Vector-vector'
          - 'vfsgnjn.vf vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnjn
  vfsgnjn.vv:
    opcode:
    - vfsgnjn.vv
    - 31..26=0x09
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - Note vfneg.v vd,vs vfsgnjn.vv vd,vs,vs
          - 'vfsgnjn.vv vd, vs2, vs1, vm  # Vector-vector'
          - 'vfsgnjn.vf vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnjn
  vfsgnjx.vf:
    opcode:
    - vfsgnjx.vf
    - 31..26=0x0a
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - Note vfabs.v vd,vs = vfsgnjx.vv vd,vs,vs
          - 'vfsgnjx.vv vd, vs2, vs1, vm  # Vector-vector'
          - 'vfsgnjx.vf vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnjx
  vfsgnjx.vv:
    opcode:
    - vfsgnjx.vv
    - 31..26=0x0a
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_sign_injection_instructions"
    desc:
      v:
        "#_vector_floating_point_sign_injection_instructions":
          text:
          - Note vfabs.v vd,vs = vfsgnjx.vv vd,vs,vs
          - 'vfsgnjx.vv vd, vs2, vs1, vm  # Vector-vector'
          - 'vfsgnjx.vf vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfsgnjx
  vfsub.vf:
    opcode:
    - vfsub.vf
    - 31..26=0x02
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_addsubtract_instructions":
          text:
          - 'vfsub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfsub.vf vd, vs2, rs1, vm   # Vector-scalar vd[i] = vs2[i] - f[rs1]'
        "#_vector_instruction_listing":
          text:
          - vfsub
  vfsub.vv:
    opcode:
    - vfsub.vv
    - 31..26=0x02
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_single_width_floating_point_addsubtract_instructions":
          text:
          - 'vfsub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vfsub.vf vd, vs2, rs1, vm   # Vector-scalar vd[i] = vs2[i] - f[rs1]'
        "#_vector_instruction_listing":
          text:
          - vfsub
  vfunary0.vv:
    opcode:
    - vfunary0.vv
    - 31..26=0x22
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfunary1.vv:
    opcode:
    - vfunary1.vv
    - 31..26=0x23
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vfwadd.vf:
    opcode:
    - vfwadd.vf
    - 31..26=0x30
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwadd.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwadd
          - vfwadd.w
  vfwadd.vv:
    opcode:
    - vfwadd.vv
    - 31..26=0x30
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwadd.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwadd
          - vfwadd.w
  vfwadd.wf:
    opcode:
    - vfwadd.wf
    - 31..26=0x34
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwadd.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwadd
          - vfwadd.w
  vfwadd.wv:
    opcode:
    - vfwadd.wv
    - 31..26=0x34
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwadd.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwadd.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwadd
          - vfwadd.w
  vfwmacc.vf:
    opcode:
    - vfwmacc.vf
    - 31..26=0x3c
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vfwmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwmacc
  vfwmacc.vv:
    opcode:
    - vfwmacc.vv
    - 31..26=0x3c
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vfwmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwmacc
  vfwmsac.vf:
    opcode:
    - vfwmsac.vf
    - 31..26=0x3e
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]'
          - 'vfwmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwmsac
  vfwmsac.vv:
    opcode:
    - vfwmsac.vv
    - 31..26=0x3e
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]'
          - 'vfwmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwmsac
  vfwmul.vf:
    opcode:
    - vfwmul.vf
    - 31..26=0x38
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_multiply"
    desc:
      v:
        "#_vector_widening_floating_point_multiply":
          text:
          - 'vfwmul.vv    vd, vs2, vs1, vm # vector-vector'
          - 'vfwmul.vf    vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwmul
  vfwmul.vv:
    opcode:
    - vfwmul.vv
    - 31..26=0x38
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_multiply"
    desc:
      v:
        "#_vector_widening_floating_point_multiply":
          text:
          - 'vfwmul.vv    vd, vs2, vs1, vm # vector-vector'
          - 'vfwmul.vf    vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwmul
  vfwnmacc.vf:
    opcode:
    - vfwnmacc.vf
    - 31..26=0x3d
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]'
          - 'vfwnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwnmacc
  vfwnmacc.vv:
    opcode:
    - vfwnmacc.vv
    - 31..26=0x3d
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]'
          - 'vfwnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwnmacc
  vfwnmsac.vf:
    opcode:
    - vfwnmsac.vf
    - 31..26=0x3f
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vfwnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwnmsac
  vfwnmsac.vv:
    opcode:
    - vfwnmsac.vv
    - 31..26=0x3f
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_fused_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_fused_multiply_add_instructions":
          text:
          - 'vfwnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vfwnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vfwnmsac
  vfwredosum.vs:
    opcode:
    - vfwredosum.vs
    - 31..26=0x33
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce-widen"
    desc:
      v:
        "#sec-vector-float-reduce-widen":
          text:
          - Note vfwredosum.vs handles inactive elements and NaN payloads analogously
            to vfredosum.vs ; vfwredusum.vs does so analogously to vfredusum.vs
          - 'vfwredosum.vs vd, vs2, vs1, vm # Ordered sum'
        "#_vector_instruction_listing":
          text:
          - vfwredosum
  vfwredsum.vs:
    opcode:
    - vfwredsum.vs
    - 31..26=0x31
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-float-reduce-widen"
    desc:
      v:
        "#sec-vector-float-reduce-widen":
          text:
          - Note vfwredsum is retained as alias for vfwredusum
  vfwsub.vf:
    opcode:
    - vfwsub.vf
    - 31..26=0x32
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwsub.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwsub
          - vfwsub.w
  vfwsub.vv:
    opcode:
    - vfwsub.vv
    - 31..26=0x32
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwsub.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwsub
          - vfwsub.w
  vfwsub.wf:
    opcode:
    - vfwsub.wf
    - 31..26=0x36
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwsub.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwsub
          - vfwsub.w
  vfwsub.wv:
    opcode:
    - vfwsub.wv
    - 31..26=0x36
    - vm
    - vs2
    - vs1
    - 14..12=0x1
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_floating_point_addsubtract_instructions"
    desc:
      v:
        "#_vector_widening_floating_point_addsubtract_instructions":
          text:
          - 'vfwsub.vv vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.vf vd, vs2, rs1, vm  # vector-scalar'
          - 'vfwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vfwsub.wf  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vfwsub
          - vfwsub.w
  vid.v:
    opcode:
    - vid.v
    - 31..26=0x16
    - vm
    - vs2
    - 19..15=0x11
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &16
    - vs2
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_element_index_instruction"
    desc:
      v:
        "#_vector_element_index_instruction":
          text:
          - The vid.v instruction writes each element&rsquo;s index to the destination
            vector register group, from 0 to vl -1.
          - Note vid.v instruction using the same datapath as viota.m but with an
            implicit set mask source
          - 'vid.v vd, vm  # Write element ID to destination.'
        "#_synthesizing_vdecompress":
          text:
          - '7 6 5 4 3 2 1 0     # vid'
        "#_vector_instruction_listing":
          text:
          - vid
  viota.m:
    opcode:
    - viota.m
    - 31..26=0x16
    - vm
    - vs2
    - 19..15=0x10
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *16
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_iota_instruction"
    desc:
      v:
        "#_vector_iota_instruction":
          text:
          - The viota.m instruction reads a source vector mask register and writes
            to each element of the destination vector register group the sum of all
            the bits of elements in the mask register whose index is less than the
            element, e.g., a parallel prefix sum of the mask values.
          - Traps on viota.m are always reported with a vstart of 0, and execution
            is always restarted from the beginning when resuming after a trap handler
          - The viota.m instruction can be combined with memory scatter instructions
            (indexed stores) to perform vector compress functions.
          - viota.m vd, vs2, vm
          - 'viota.m v4, v2 # Unmasked'
          - 'viota.m v4, v2, v0.t # Masked, vtype.vma=0'
          - 'viota.m v16, v0                # Get destination offsets of active elements'
          - 'vsuxei32.v v8, (a2), v16, v0.t # Scatter using scaled viota results under
            mask'
        "#_synthesizing_vdecompress":
          text:
          - 'viota.m v10, v0                 # Calc iota from mask in v0'
          - '4 4 4 3 2 1 1 0    # v10 result of viota.m'
        "#_vector_instruction_listing":
          text:
          - viota
  vlb.v:
    opcode:
    - vlb.v
    - nf
    - 28..26=4
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlbff.v:
    opcode:
    - vlbff.v
    - 31..29=0
    - 28..26=4
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlbu.v:
    opcode:
    - vlbu.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlbuff.v:
    opcode:
    - vlbuff.v
    - 31..29=0
    - 28..26=0
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vle.v:
    opcode:
    - vle.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x7
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vleff.v:
    opcode:
    - vleff.v
    - 31..29=0
    - 28..26=0
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x7
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlh.v:
    opcode:
    - vlh.v
    - nf
    - 28..26=4
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlhff.v:
    opcode:
    - vlhff.v
    - 31..29=0
    - 28..26=4
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlhu.v:
    opcode:
    - vlhu.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlhuff.v:
    opcode:
    - vlhuff.v
    - 31..29=0
    - 28..26=0
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlsb.v:
    opcode:
    - vlsb.v
    - nf
    - 28..26=6
    - vm
    - rs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: &17
    - rs2
    - rs1
    - vd
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlsbu.v:
    opcode:
    - vlsbu.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlse.v:
    opcode:
    - vlse.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x7
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlsh.v:
    opcode:
    - vlsh.v
    - nf
    - 28..26=6
    - vm
    - rs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlshu.v:
    opcode:
    - vlshu.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlsw.v:
    opcode:
    - vlsw.v
    - nf
    - 28..26=6
    - vm
    - rs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlswu.v:
    opcode:
    - vlswu.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *17
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlw.v:
    opcode:
    - vlw.v
    - nf
    - 28..26=4
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlwff.v:
    opcode:
    - vlwff.v
    - 31..29=0
    - 28..26=4
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlwu.v:
    opcode:
    - vlwu.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlwuff.v:
    opcode:
    - vlwuff.v
    - 31..29=0
    - 28..26=0
    - vm
    - 24..20=0x10
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxb.v:
    opcode:
    - vlxb.v
    - nf
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxbu.v:
    opcode:
    - vlxbu.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxe.v:
    opcode:
    - vlxe.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x7
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxh.v:
    opcode:
    - vlxh.v
    - nf
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxhu.v:
    opcode:
    - vlxhu.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxw.v:
    opcode:
    - vlxw.v
    - nf
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vlxwu.v:
    opcode:
    - vlxwu.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x07
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vmacc.vv:
    opcode:
    - vmacc.vv
    - 31..26=0x2d
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - The integer multiply-add instructions are destructive and are provided
            in two forms, one that overwrites the addend or minuend ( vmacc , vnmsac
            ) and one that overwrites the first multiplicand ( vmadd , vnmsub ).
          - 'vmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vmacc
  vmacc.vx:
    opcode:
    - vmacc.vx
    - 31..26=0x2d
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - The integer multiply-add instructions are destructive and are provided
            in two forms, one that overwrites the addend or minuend ( vmacc , vnmsac
            ) and one that overwrites the first multiplicand ( vmadd , vnmsub ).
          - 'vmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vmacc
  vmadc.vim:
    opcode:
    - vmadc.vim
    - 31..26=0x11
    - 25=1
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - vmadc and vmsbc add or subtract the source operands, optionally add the
            carry-in or subtract the borrow-in if masked ( vm=0 ), and write the result
            back to mask register vd
          - 'vmadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vmadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vmadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vmadc.vv    vd, vs2, vs1      # Vector-vector, no carry-in'
          - 'vmadc.vx    vd, vs2, rs1      # Vector-scalar, no carry-in'
          - 'vmadc.vi    vd, vs2, imm      # Vector-immediate, no carry-in'
          - 'vmadc.vvm v1, v4, v8, v0  # Get carry into temp register v1'
        "#_vector_instruction_listing":
          text:
          - vmadc
  vmadc.vvm:
    opcode:
    - vmadc.vvm
    - 31..26=0x11
    - 25=1
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - vmadc and vmsbc add or subtract the source operands, optionally add the
            carry-in or subtract the borrow-in if masked ( vm=0 ), and write the result
            back to mask register vd
          - 'vmadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vmadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vmadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vmadc.vv    vd, vs2, vs1      # Vector-vector, no carry-in'
          - 'vmadc.vx    vd, vs2, rs1      # Vector-scalar, no carry-in'
          - 'vmadc.vi    vd, vs2, imm      # Vector-immediate, no carry-in'
          - 'vmadc.vvm v1, v4, v8, v0  # Get carry into temp register v1'
        "#_vector_instruction_listing":
          text:
          - vmadc
  vmadc.vxm:
    opcode:
    - vmadc.vxm
    - 31..26=0x11
    - 25=1
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - vmadc and vmsbc add or subtract the source operands, optionally add the
            carry-in or subtract the borrow-in if masked ( vm=0 ), and write the result
            back to mask register vd
          - 'vmadc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vmadc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vmadc.vim   vd, vs2, imm, v0  # Vector-immediate'
          - 'vmadc.vv    vd, vs2, vs1      # Vector-vector, no carry-in'
          - 'vmadc.vx    vd, vs2, rs1      # Vector-scalar, no carry-in'
          - 'vmadc.vi    vd, vs2, imm      # Vector-immediate, no carry-in'
          - 'vmadc.vvm v1, v4, v8, v0  # Get carry into temp register v1'
        "#_vector_instruction_listing":
          text:
          - vmadc
  vmadd.vv:
    opcode:
    - vmadd.vv
    - 31..26=0x29
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - 'vmadd.vv vd, vs1, vs2, vm    # vd[i] = (vs1[i] * vd[i]) + vs2[i]'
          - 'vmadd.vx vd, rs1, vs2, vm    # vd[i] = (x[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vmadd
  vmadd.vx:
    opcode:
    - vmadd.vx
    - 31..26=0x29
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - 'vmadd.vv vd, vs1, vs2, vm    # vd[i] = (vs1[i] * vd[i]) + vs2[i]'
          - 'vmadd.vx vd, rs1, vs2, vm    # vd[i] = (x[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vmadd
  vmand.mm:
    opcode:
    - vmand.mm
    - 31..26=0x19
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_floating_point_compare_instructions"
    desc:
      v:
        "#_vector_floating_point_compare_instructions":
          text:
          - Note vmfeq vmand instruction, but this more efficient sequence incorrectly
            fails to raise the invalid exception when an element of va contains a
            quiet NaN and the corresponding element in vb contains a signaling NaN
          - 'vmand.mm v0, v0, v1        # Only set where A and B are ordered,'
        "#sec-mask-register-logical":
          text:
          - vmand.mm vd, src1, src2
          - vmand.mm vd, src2, src2
          - vmand.mm vd, src1, src1
          - 'vmand.mm vd, vs2, vs1   # vd.mask[i] =   vs2.mask[i] &amp;&amp;  vs1.mask[i]'
          - 'vmmv.m vd, vs  =&gt; vmand.mm vd, vs, vs   # Copy mask register'
        "#_vector_instruction_listing":
          text:
          - vmand
  vmandnot.mm:
    opcode:
    - vmandnot.mm
    - 31..26=0x18
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-mask-register-logical"
    desc:
      v:
        "#sec-mask-register-logical":
          text:
          - Note vmandnot and vmornot have been changed to vmandn and vmorn to be
            consistent with the equivalent scalar instructions
          - 'The old vmandnot and vmornot Several assembler pseudoinstructions are
            defined as shorthand for common uses of mask logical operations:'
        "#_vector_instruction_listing":
          text:
          - vmandnot
  vmax.vv:
    opcode:
    - vmax.vv
    - 31..26=0x07
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmax.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmax.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - Note vmax then clips the resulting unsigned value into the destination
            using vnclipu can be used if setting vxsat value for negative numbers
            is not required
        "#_vector_instruction_listing":
          text:
          - vmax
  vmax.vx:
    opcode:
    - vmax.vx
    - 31..26=0x07
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmax.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmax.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - Note vmax then clips the resulting unsigned value into the destination
            using vnclipu can be used if setting vxsat value for negative numbers
            is not required
        "#_vector_instruction_listing":
          text:
          - vmax
  vmaxu.vv:
    opcode:
    - vmaxu.vv
    - 31..26=0x06
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmaxu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmaxu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmaxu
  vmaxu.vx:
    opcode:
    - vmaxu.vx
    - 31..26=0x06
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmaxu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmaxu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmaxu
  vmerge.vim:
    opcode:
    - vmerge.vim
    - 31..26=0x17
    - 25=0
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_merge_instructions"
    desc:
      v:
        "#_vector_integer_merge_instructions":
          text:
          - The vmerge instructions are encoded as masked instructions ( vm=0 )
          - 'vmerge.vvm vd, vs2, vs1, v0  # vd[i] = v0.mask[i] ? vs1[i] : vs2[i]'
          - 'vmerge.vxm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? x[rs1] : vs2[i]'
          - 'vmerge.vim vd, vs2, imm, v0  # vd[i] = v0.mask[i] ? imm    : vs2[i]'
        "#_whole_vector_register_move":
          text:
          - This encoding is chosen as it is close to the related vmerge encoding,
            and it is unlikely the vsmul instruction would benefit from an immediate
            form
        "#_vector_instruction_listing":
          text:
          - vmerge/vmv
  vmerge.vvm:
    opcode:
    - vmerge.vvm
    - 31..26=0x17
    - 25=0
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_merge_instructions"
    desc:
      v:
        "#_vector_integer_merge_instructions":
          text:
          - The vmerge instructions are encoded as masked instructions ( vm=0 )
          - 'vmerge.vvm vd, vs2, vs1, v0  # vd[i] = v0.mask[i] ? vs1[i] : vs2[i]'
          - 'vmerge.vxm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? x[rs1] : vs2[i]'
          - 'vmerge.vim vd, vs2, imm, v0  # vd[i] = v0.mask[i] ? imm    : vs2[i]'
        "#_whole_vector_register_move":
          text:
          - This encoding is chosen as it is close to the related vmerge encoding,
            and it is unlikely the vsmul instruction would benefit from an immediate
            form
        "#_vector_instruction_listing":
          text:
          - vmerge/vmv
  vmerge.vxm:
    opcode:
    - vmerge.vxm
    - 31..26=0x17
    - 25=0
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_merge_instructions"
    desc:
      v:
        "#_vector_integer_merge_instructions":
          text:
          - The vmerge instructions are encoded as masked instructions ( vm=0 )
          - 'vmerge.vvm vd, vs2, vs1, v0  # vd[i] = v0.mask[i] ? vs1[i] : vs2[i]'
          - 'vmerge.vxm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? x[rs1] : vs2[i]'
          - 'vmerge.vim vd, vs2, imm, v0  # vd[i] = v0.mask[i] ? imm    : vs2[i]'
        "#_whole_vector_register_move":
          text:
          - This encoding is chosen as it is close to the related vmerge encoding,
            and it is unlikely the vsmul instruction would benefit from an immediate
            form
        "#_vector_instruction_listing":
          text:
          - vmerge/vmv
  vmfirst.m:
    opcode:
    - vmfirst.m
    - 31..26=0x15
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - rd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &18
    - vs2
    - vs1
    - rd
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vmin.vv:
    opcode:
    - vmin.vv
    - 31..26=0x05
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmin.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmin.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmin
  vmin.vx:
    opcode:
    - vmin.vx
    - 31..26=0x05
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vmin.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmin.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmin
  vminu.vv:
    opcode:
    - vminu.vv
    - 31..26=0x04
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vminu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vminu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vminu
  vminu.vx:
    opcode:
    - vminu.vx
    - 31..26=0x04
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_minmax_instructions"
    desc:
      v:
        "#_vector_integer_minmax_instructions":
          text:
          - 'vminu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vminu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vminu
  vmnand.mm:
    opcode:
    - vmnand.mm
    - 31..26=0x1d
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_compare_instructions"
    desc:
      v:
        "#_vector_integer_compare_instructions":
          text:
          - 'expansion: vmslt{u}.vx vd, va, x; vmnand.mm vd, vd, vd'
        "#sec-mask-register-logical":
          text:
          - vmnand.mm vd, src1, src1
          - vmnand.mm vd, src2, src2
          - vmnand.mm vd, src1, src2
          - 'vmnand.mm vd, vs2, vs1  # vd.mask[i] = !(vs2.mask[i] &amp;&amp;  vs1.mask[i])'
          - 'vmnot.m vd, vs =&gt; vmnand.mm vd, vs, vs  # Invert bits'
        "#_vector_instruction_listing":
          text:
          - vmnand
  vmnor.mm:
    opcode:
    - vmnor.mm
    - 31..26=0x1e
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-mask-register-logical"
    desc:
      v:
        "#sec-mask-register-logical":
          text:
          - vmnor.mm vd, src1, src2
          - 'vmnor.mm  vd, vs2, vs1  # vd.mask[i] = !(vs2.mask[i] ||  vs1.mask[i])'
        "#_vector_instruction_listing":
          text:
          - vmnor
  vmor.mm:
    opcode:
    - vmor.mm
    - 31..26=0x1a
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_compare_instructions"
    desc:
      v:
        "#_vector_integer_compare_instructions":
          text:
          - 'expansion: vmslt{u}.vx vt, va, x;  vmandn.mm vt, v0, vt;  vmandn.mm vd,
            vd, v0;  vmor.mm vd, vt, vd'
        "#sec-mask-register-logical":
          text:
          - 'vmor.mm  vd, vs2, vs1   # vd.mask[i] =   vs2.mask[i] ||  vs1.mask[i]'
        "#_vector_instruction_listing":
          text:
          - vmor
        "#_c_standard_library_strcmp_example":
          text:
          - 'vmor.mm v0, v0, v1      # Combine exit conditions'
  vmornot.mm:
    opcode:
    - vmornot.mm
    - 31..26=0x1c
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_instruction_listing"
    desc:
      v:
        "#_vector_instruction_listing":
          text:
          - vmornot
  vmpopc.m:
    opcode:
    - vmpopc.m
    - 31..26=0x14
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - rd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *18
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vmsbc.vvm:
    opcode:
    - vmsbc.vvm
    - 31..26=0x13
    - 25=1
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - For vmsbc , the borrow is defined to be 1 iff the difference, prior to
            truncation, is negative.
          - 'vmsbc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vmsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vmsbc.vv    vd, vs2, vs1      # Vector-vector, no borrow-in'
          - 'vmsbc.vx    vd, vs2, rs1      # Vector-scalar, no borrow-in'
        "#_vector_instruction_listing":
          text:
          - vmsbc
  vmsbc.vxm:
    opcode:
    - vmsbc.vxm
    - 31..26=0x13
    - 25=1
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - For vmsbc , the borrow is defined to be 1 iff the difference, prior to
            truncation, is negative.
          - 'vmsbc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vmsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
          - 'vmsbc.vv    vd, vs2, vs1      # Vector-vector, no borrow-in'
          - 'vmsbc.vx    vd, vs2, rs1      # Vector-scalar, no borrow-in'
        "#_vector_instruction_listing":
          text:
          - vmsbc
  vmsbf.m:
    opcode:
    - vmsbf.m
    - 31..26=0x16
    - vm
    - vs2
    - 19..15=0x01
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *16
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-agnostic"
    desc:
      v:
        "#sec-agnostic":
          text:
          - Furthermore, for mask-logical instructions and vmsbf.m , vmsif.m , vmsof.m
            mask-manipulation instructions, any element in the tail of the result
            can be written with the value the mask-producing operation would have
            calculated with vl =VLEN, SEW=8, and LMUL=8 (i.e., all bits of the mask
            register can be overwritten).
        "#_vfirst_find_first_set_mask_bit":
          text:
          - vmsbf.m
        "#_vmsbf_m_set_before_first_mask_bit":
          text:
          - The vmsbf.m instruction takes a mask register as input and writes results
            to a mask register
          - Traps on vmsbf.m are always reported with a vstart of 0. The vmsbf instruction
            will raise an illegal instruction exception if vstart is non-zero.
          - vmsbf.m vd, vs2, vm
          - vmsbf.m v2, v3
          - vmsbf.m v2, v3, v0.t
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmsbf.m v0, v1          # Set mask up to before zero byte.'
        "#_vector_instruction_listing":
          text:
          - vmsbf
  vmsif.m:
    opcode:
    - vmsif.m
    - 31..26=0x16
    - vm
    - vs2
    - 19..15=0x03
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *16
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vmsbf_m_set_before_first_mask_bit"
    desc:
      v:
        "#_vmsbf_m_set_before_first_mask_bit":
          text:
          - vmsif.m
        "#_vmsif_m_set_including_first_mask_bit":
          text:
          - Traps on vmsif.m are always reported with a vstart of 0. The vmsif instruction
            will raise an illegal instruction exception if vstart is non-zero.
          - vmsif.m vd, vs2, vm
          - vmsif.m v2, v3
          - vmsif.m v2, v3, v0.t
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmsif.m v0, v1          # Set mask up to and including zero byte.'
        "#_vector_instruction_listing":
          text:
          - vmsif
  vmsof.m:
    opcode:
    - vmsof.m
    - 31..26=0x16
    - vm
    - vs2
    - 19..15=0x02
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *16
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vmsif_m_set_including_first_mask_bit"
    desc:
      v:
        "#_vmsif_m_set_including_first_mask_bit":
          text:
          - vmsof.m
        "#_vmsof_m_set_only_first_mask_bit":
          text:
          - Traps on vmsof.m are always reported with a vstart of 0. The vmsof instruction
            will raise an illegal instruction exception if vstart is non-zero.
          - vmsof.m vd, vs2, vm
          - vmsof.m v2, v3
          - vmsof.m v2, v3, v0.t
        "#_vector_instruction_listing":
          text:
          - vmsof
  vmul.vv:
    opcode:
    - vmul.vv
    - 31..26=0x25
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - 'vmul.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmul.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmul
  vmul.vx:
    opcode:
    - vmul.vx
    - 31..26=0x25
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - 'vmul.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmul.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmul
  vmulh.vv:
    opcode:
    - vmulh.vv
    - 31..26=0x27
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - Note vmulh* opcodes perform simple fractional multiplies, but with no
            option to scale, round, and/or saturate the result
          - A possible future extension can consider variants of vmulh , vmulhu ,
            vmulhsu that use the vxrm rounding mode when discarding low half of product
          - 'vmulh.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulh.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_zve_vector_extensions_for_embedded_processors":
          text:
          - "), except that the vmulh integer multiply variants that return the high
            word of the product ( vmulh.vv , vmulh.vx , vmulhu.vv , vmulhu.vx , vmulhsu.vv
            , vmulhsu.vx ) are not included for EEW=64 in Zve64*."
          - Note vmulh , vsmul requires a large amount of additional logic, and 64-bit
            fixed-point multiplies are relatively rare
        "#_vector_instruction_listing":
          text:
          - vmulh
  vmulh.vx:
    opcode:
    - vmulh.vx
    - 31..26=0x27
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - Note vmulh* opcodes perform simple fractional multiplies, but with no
            option to scale, round, and/or saturate the result
          - A possible future extension can consider variants of vmulh , vmulhu ,
            vmulhsu that use the vxrm rounding mode when discarding low half of product
          - 'vmulh.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulh.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_zve_vector_extensions_for_embedded_processors":
          text:
          - "), except that the vmulh integer multiply variants that return the high
            word of the product ( vmulh.vv , vmulh.vx , vmulhu.vv , vmulhu.vx , vmulhsu.vv
            , vmulhsu.vx ) are not included for EEW=64 in Zve64*."
          - Note vmulh , vsmul requires a large amount of additional logic, and 64-bit
            fixed-point multiplies are relatively rare
        "#_vector_instruction_listing":
          text:
          - vmulh
  vmulhsu.vv:
    opcode:
    - vmulhsu.vv
    - 31..26=0x26
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - The scalar can be splatted to a vector, then a vmulhsu.vv used
          - 'vmulhsu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulhsu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmulhsu
  vmulhsu.vx:
    opcode:
    - vmulhsu.vx
    - 31..26=0x26
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - The scalar can be splatted to a vector, then a vmulhsu.vv used
          - 'vmulhsu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulhsu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vmulhsu
  vmulhu.vv:
    opcode:
    - vmulhu.vv
    - 31..26=0x24
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - 'vmulhu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulhu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
          text:
          - Note vmulhu and vmulhsu instructions, for the case where rounding is simply
            truncation ( rdn )
        "#_vector_instruction_listing":
          text:
          - vmulhu
  vmulhu.vx:
    opcode:
    - vmulhu.vx
    - 31..26=0x24
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_instructions":
          text:
          - 'vmulhu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vmulhu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
          text:
          - Note vmulhu and vmulhsu instructions, for the case where rounding is simply
            truncation ( rdn )
        "#_vector_instruction_listing":
          text:
          - vmulhu
  vmv.s.x:
    opcode:
    - vmv.s.x
    - 31..26=0x0d
    - 25=1
    - 24..20=0
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_move_instructions"
    desc:
      v:
        "#_vector_integer_move_instructions":
          text:
          - The vmv.v.v variant copies a vector register group, whereas the vmv.v.x
            vmv.v.i variants splat a scalar register or immediate to all active elements
            of the destination vector register group
          - Note vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0
          - The form vmv.v.v vd, vd , which leaves body elements unchanged, can be
            used to indicate that the register will next be used with an EEW equal
            to SEW.
          - Note vmv.v.v vd
          - 'vmv.v.v vd, vs1 # vd[i] = vs1[i]'
          - 'vmv.v.x vd, rs1 # vd[i] = x[rs1]'
          - 'vmv.v.i vd, imm # vd[i] = imm'
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmv.v.i v0, 0           # Splat zero.'
        "#_integer_scalar_move_instructions":
          text:
          - The vmv.x.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination integer register
          - Note vmv.x.s performs its operation even if vstart &ge; vl or vl =0.
          - The vmv.s.x instruction copies the scalar integer register to element
            0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vmv.x.s
            vmv.s.x are reserved.
          - 'vmv.x.s rd, vs2  # x[rd] = vs2[0] (vs1=0)'
          - 'vmv.s.x vd, rs1  # vd[0] = x[rs1] (vs2=0)'
        "#_whole_vector_register_move":
          text:
          - The vmv<nr>r.v instructions copy whole vector registers (i.e., all VLEN
            bits) and can copy whole vector register groups
          - 'vmv&lt;nr&gt;r.v vd, vs2  # General form'
        "#_vector_instruction_listing":
          text:
          - vmv<nr>r
          - vmv.s.x
          - vmv.x.s
        "#_example_with_mixed_width_mask_and_compute":
          text:
          - 'vmv.v.i v4, 1                 # Splat immediate to destination'
        "#_division_approximation_example":
          text:
          - 'vmv.v.x v4, t0              # Splat 2.0'
        "#_square_root_approximation_example":
          text:
          - 'vmv.v.x v5, t0, v0.t        # Splat 1.5'
  vmv.v.i:
    opcode:
    - vmv.v.i
    - 31..26=0x17
    - 25=1
    - 24..20=0
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &33
    - simm5
    - vd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_move_instructions"
    desc:
      v:
        "#_vector_integer_move_instructions":
          text:
          - The vmv.v.v variant copies a vector register group, whereas the vmv.v.x
            vmv.v.i variants splat a scalar register or immediate to all active elements
            of the destination vector register group
          - Note vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0
          - The form vmv.v.v vd, vd , which leaves body elements unchanged, can be
            used to indicate that the register will next be used with an EEW equal
            to SEW.
          - Note vmv.v.v vd
          - 'vmv.v.v vd, vs1 # vd[i] = vs1[i]'
          - 'vmv.v.x vd, rs1 # vd[i] = x[rs1]'
          - 'vmv.v.i vd, imm # vd[i] = imm'
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmv.v.i v0, 0           # Splat zero.'
        "#_integer_scalar_move_instructions":
          text:
          - The vmv.x.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination integer register
          - Note vmv.x.s performs its operation even if vstart &ge; vl or vl =0.
          - The vmv.s.x instruction copies the scalar integer register to element
            0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vmv.x.s
            vmv.s.x are reserved.
          - 'vmv.x.s rd, vs2  # x[rd] = vs2[0] (vs1=0)'
          - 'vmv.s.x vd, rs1  # vd[0] = x[rs1] (vs2=0)'
        "#_whole_vector_register_move":
          text:
          - The vmv<nr>r.v instructions copy whole vector registers (i.e., all VLEN
            bits) and can copy whole vector register groups
          - 'vmv&lt;nr&gt;r.v vd, vs2  # General form'
        "#_vector_instruction_listing":
          text:
          - vmv<nr>r
          - vmv.s.x
          - vmv.x.s
        "#_example_with_mixed_width_mask_and_compute":
          text:
          - 'vmv.v.i v4, 1                 # Splat immediate to destination'
        "#_division_approximation_example":
          text:
          - 'vmv.v.x v4, t0              # Splat 2.0'
        "#_square_root_approximation_example":
          text:
          - 'vmv.v.x v5, t0, v0.t        # Splat 1.5'
  vmv.v.v:
    opcode:
    - vmv.v.v
    - 31..26=0x17
    - 25=1
    - 24..20=0
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_move_instructions"
    desc:
      v:
        "#_vector_integer_move_instructions":
          text:
          - The vmv.v.v variant copies a vector register group, whereas the vmv.v.x
            vmv.v.i variants splat a scalar register or immediate to all active elements
            of the destination vector register group
          - Note vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0
          - The form vmv.v.v vd, vd , which leaves body elements unchanged, can be
            used to indicate that the register will next be used with an EEW equal
            to SEW.
          - Note vmv.v.v vd
          - 'vmv.v.v vd, vs1 # vd[i] = vs1[i]'
          - 'vmv.v.x vd, rs1 # vd[i] = x[rs1]'
          - 'vmv.v.i vd, imm # vd[i] = imm'
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmv.v.i v0, 0           # Splat zero.'
        "#_integer_scalar_move_instructions":
          text:
          - The vmv.x.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination integer register
          - Note vmv.x.s performs its operation even if vstart &ge; vl or vl =0.
          - The vmv.s.x instruction copies the scalar integer register to element
            0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vmv.x.s
            vmv.s.x are reserved.
          - 'vmv.x.s rd, vs2  # x[rd] = vs2[0] (vs1=0)'
          - 'vmv.s.x vd, rs1  # vd[0] = x[rs1] (vs2=0)'
        "#_whole_vector_register_move":
          text:
          - The vmv<nr>r.v instructions copy whole vector registers (i.e., all VLEN
            bits) and can copy whole vector register groups
          - 'vmv&lt;nr&gt;r.v vd, vs2  # General form'
        "#_vector_instruction_listing":
          text:
          - vmv<nr>r
          - vmv.s.x
          - vmv.x.s
        "#_example_with_mixed_width_mask_and_compute":
          text:
          - 'vmv.v.i v4, 1                 # Splat immediate to destination'
        "#_division_approximation_example":
          text:
          - 'vmv.v.x v4, t0              # Splat 2.0'
        "#_square_root_approximation_example":
          text:
          - 'vmv.v.x v5, t0, v0.t        # Splat 1.5'
  vmv.v.x:
    opcode:
    - vmv.v.x
    - 31..26=0x17
    - 25=1
    - 24..20=0
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *15
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_move_instructions"
    desc:
      v:
        "#_vector_integer_move_instructions":
          text:
          - The vmv.v.v variant copies a vector register group, whereas the vmv.v.x
            vmv.v.i variants splat a scalar register or immediate to all active elements
            of the destination vector register group
          - Note vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0
          - The form vmv.v.v vd, vd , which leaves body elements unchanged, can be
            used to indicate that the register will next be used with an EEW equal
            to SEW.
          - Note vmv.v.v vd
          - 'vmv.v.v vd, vs1 # vd[i] = vs1[i]'
          - 'vmv.v.x vd, rs1 # vd[i] = x[rs1]'
          - 'vmv.v.i vd, imm # vd[i] = imm'
        "#_example_using_vector_mask_instructions":
          text:
          - 'vmv.v.i v0, 0           # Splat zero.'
        "#_integer_scalar_move_instructions":
          text:
          - The vmv.x.s instruction copies a single SEW-wide element from index 0
            of the source vector register to a destination integer register
          - Note vmv.x.s performs its operation even if vstart &ge; vl or vl =0.
          - The vmv.s.x instruction copies the scalar integer register to element
            0 of the destination vector register
          - The encodings corresponding to the masked versions ( vm=0 ) of vmv.x.s
            vmv.s.x are reserved.
          - 'vmv.x.s rd, vs2  # x[rd] = vs2[0] (vs1=0)'
          - 'vmv.s.x vd, rs1  # vd[0] = x[rs1] (vs2=0)'
        "#_whole_vector_register_move":
          text:
          - The vmv<nr>r.v instructions copy whole vector registers (i.e., all VLEN
            bits) and can copy whole vector register groups
          - 'vmv&lt;nr&gt;r.v vd, vs2  # General form'
        "#_vector_instruction_listing":
          text:
          - vmv<nr>r
          - vmv.s.x
          - vmv.x.s
        "#_example_with_mixed_width_mask_and_compute":
          text:
          - 'vmv.v.i v4, 1                 # Splat immediate to destination'
        "#_division_approximation_example":
          text:
          - 'vmv.v.x v4, t0              # Splat 2.0'
        "#_square_root_approximation_example":
          text:
          - 'vmv.v.x v5, t0, v0.t        # Splat 1.5'
  vmxnor.mm:
    opcode:
    - vmxnor.mm
    - 31..26=0x1f
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-mask-register-logical"
    desc:
      v:
        "#sec-mask-register-logical":
          text:
          - vmxnor.mm vd, src1, src2
          - vmxnor.mm vd, vd, vd
          - 'vmxnor.mm vd, vs2, vs1  # vd.mask[i] = !(vs2.mask[i] ^^  vs1.mask[i])'
          - 'vmset.m vd     =&gt; vmxnor.mm vd, vd, vd  # Set mask register'
        "#_vector_instruction_listing":
          text:
          - vmxnor
  vmxor.mm:
    opcode:
    - vmxor.mm
    - 31..26=0x1b
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_compare_instructions"
    desc:
      v:
        "#_vector_integer_compare_instructions":
          text:
          - 'expansion: vmslt{u}.vx vd, va, x, v0.t; vmxor.mm vd, vd, v0'
        "#sec-mask-register-logical":
          text:
          - vmxor.mm vd, vd, vd
          - vmxor.mm vd, src1, src2
          - 'vmxor.mm  vd, vs2, vs1  # vd.mask[i] =   vs2.mask[i] ^^  vs1.mask[i]'
          - 'vmclr.m vd     =&gt; vmxor.mm vd, vd, vd   # Clear mask register'
        "#_vector_instruction_listing":
          text:
          - vmxor
  vnclip.vi:
    opcode:
    - vnclip.vi
    - 31..26=0x2f
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - The vnclip instructions are used to pack a fixed-point value into a narrower
            destination
          - For vnclip , the shifted rounded source value is treated as a signed integer
            and saturates if the result would overflow the destination viewed as a
            signed integer.
          - 'vnclip.wv vd, vs2, vs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], vs1[i]))'
          - 'vnclip.wx vd, vs2, rs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], x[rs1]))'
          - 'vnclip.wi vd, vs2, uimm, vm  # vd[i] = clip(roundoff_signed(vs2[i], uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclip
  vnclip.vv:
    opcode:
    - vnclip.vv
    - 31..26=0x2f
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - The vnclip instructions are used to pack a fixed-point value into a narrower
            destination
          - For vnclip , the shifted rounded source value is treated as a signed integer
            and saturates if the result would overflow the destination viewed as a
            signed integer.
          - 'vnclip.wv vd, vs2, vs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], vs1[i]))'
          - 'vnclip.wx vd, vs2, rs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], x[rs1]))'
          - 'vnclip.wi vd, vs2, uimm, vm  # vd[i] = clip(roundoff_signed(vs2[i], uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclip
  vnclip.vx:
    opcode:
    - vnclip.vx
    - 31..26=0x2f
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - The vnclip instructions are used to pack a fixed-point value into a narrower
            destination
          - For vnclip , the shifted rounded source value is treated as a signed integer
            and saturates if the result would overflow the destination viewed as a
            signed integer.
          - 'vnclip.wv vd, vs2, vs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], vs1[i]))'
          - 'vnclip.wx vd, vs2, rs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], x[rs1]))'
          - 'vnclip.wi vd, vs2, uimm, vm  # vd[i] = clip(roundoff_signed(vs2[i], uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclip
  vnclipu.vi:
    opcode:
    - vnclipu.vi
    - 31..26=0x2e
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - For vnclipu / vnclip , the rounding mode is specified in the vxrm For
            vnclipu , the shifted rounded source value is treated as an unsigned integer
            and saturates if the result would overflow the destination viewed as an
            unsigned integer.
          - 'vnclipu.wv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            vs1[i]))'
          - 'vnclipu.wx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            x[rs1]))'
          - 'vnclipu.wi vd, vs2, uimm, vm # vd[i] = clip(roundoff_unsigned(vs2[i],
            uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclipu
  vnclipu.vv:
    opcode:
    - vnclipu.vv
    - 31..26=0x2e
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - For vnclipu / vnclip , the rounding mode is specified in the vxrm For
            vnclipu , the shifted rounded source value is treated as an unsigned integer
            and saturates if the result would overflow the destination viewed as an
            unsigned integer.
          - 'vnclipu.wv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            vs1[i]))'
          - 'vnclipu.wx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            x[rs1]))'
          - 'vnclipu.wi vd, vs2, uimm, vm # vd[i] = clip(roundoff_unsigned(vs2[i],
            uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclipu
  vnclipu.vx:
    opcode:
    - vnclipu.vx
    - 31..26=0x2e
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_narrowing_fixed_point_clip_instructions"
    desc:
      v:
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - For vnclipu / vnclip , the rounding mode is specified in the vxrm For
            vnclipu , the shifted rounded source value is treated as an unsigned integer
            and saturates if the result would overflow the destination viewed as an
            unsigned integer.
          - 'vnclipu.wv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            vs1[i]))'
          - 'vnclipu.wx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_unsigned(vs2[i],
            x[rs1]))'
          - 'vnclipu.wi vd, vs2, uimm, vm # vd[i] = clip(roundoff_unsigned(vs2[i],
            uimm))'
        "#_vector_instruction_listing":
          text:
          - vnclipu
  vnmsac.vv:
    opcode:
    - vnmsac.vv
    - 31..26=0x2f
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - The opcode is vnmsac to match the (unfortunately counterintuitive) floating-point
            fnmsub instruction definition
          - 'vnmsac.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vnmsac.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vnmsac
  vnmsac.vx:
    opcode:
    - vnmsac.vx
    - 31..26=0x2f
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - The opcode is vnmsac to match the (unfortunately counterintuitive) floating-point
            fnmsub instruction definition
          - 'vnmsac.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vs2[i]) + vd[i]'
          - 'vnmsac.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vnmsac
  vnmsub.vv:
    opcode:
    - vnmsub.vv
    - 31..26=0x2b
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - Similarly for the vnmsub opcode
          - 'vnmsub.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vd[i]) + vs2[i]'
          - 'vnmsub.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vnmsub
  vnmsub.vx:
    opcode:
    - vnmsub.vx
    - 31..26=0x2b
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_single_width_integer_multiply_add_instructions":
          text:
          - Similarly for the vnmsub opcode
          - 'vnmsub.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vd[i]) + vs2[i]'
          - 'vnmsub.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vd[i]) + vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vnmsub
  vnsra.vi:
    opcode:
    - vnsra.vi
    - 31..26=0x2d
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-narrowing"
    desc:
      v:
        "#sec-narrowing":
          text:
          - The double-width source vector register group is signified by a w in the
            source operand suffix (e.g., vnsra.wv )
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - 'vnsra.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsra.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsra.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsra
  vnsra.vv:
    opcode:
    - vnsra.vv
    - 31..26=0x2d
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-narrowing"
    desc:
      v:
        "#sec-narrowing":
          text:
          - The double-width source vector register group is signified by a w in the
            source operand suffix (e.g., vnsra.wv )
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - 'vnsra.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsra.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsra.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsra
  vnsra.vx:
    opcode:
    - vnsra.vx
    - 31..26=0x2d
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-narrowing"
    desc:
      v:
        "#sec-narrowing":
          text:
          - The double-width source vector register group is signified by a w in the
            source operand suffix (e.g., vnsra.wv )
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - 'vnsra.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsra.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsra.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsra
  vnsrl.vi:
    opcode:
    - vnsrl.vi
    - 31..26=0x2c
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vec-operands"
    desc:
      v:
        "#sec-vec-operands":
          text:
          - The destination EEW is smaller than the source EEW and the overlap is
            in the lowest-numbered part of the source register group (e.g., when LMUL=1,
            vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not).
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - An assembly pseudoinstruction is provided vncvt.x.x.w vd,vs,vm = vnsrl.wx
            vd,vs,x0,vm
          - 'vnsrl.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsrl.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsrl.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsrl
  vnsrl.vv:
    opcode:
    - vnsrl.vv
    - 31..26=0x2c
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vec-operands"
    desc:
      v:
        "#sec-vec-operands":
          text:
          - The destination EEW is smaller than the source EEW and the overlap is
            in the lowest-numbered part of the source register group (e.g., when LMUL=1,
            vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not).
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - An assembly pseudoinstruction is provided vncvt.x.x.w vd,vs,vm = vnsrl.wx
            vd,vs,x0,vm
          - 'vnsrl.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsrl.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsrl.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsrl
  vnsrl.vx:
    opcode:
    - vnsrl.vx
    - 31..26=0x2c
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vec-operands"
    desc:
      v:
        "#sec-vec-operands":
          text:
          - The destination EEW is smaller than the source EEW and the overlap is
            in the lowest-numbered part of the source register group (e.g., when LMUL=1,
            vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not).
        "#_vector_narrowing_integer_right_shift_instructions":
          text:
          - An assembly pseudoinstruction is provided vncvt.x.x.w vd,vs,vm = vnsrl.wx
            vd,vs,x0,vm
          - 'vnsrl.wv vd, vs2, vs1, vm   # vector-vector'
          - 'vnsrl.wx vd, vs2, rs1, vm   # vector-scalar'
          - 'vnsrl.wi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vnsrl
  vor.vi:
    opcode:
    - vor.vi
    - 31..26=0x0a
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vor
  vor.vv:
    opcode:
    - vor.vv
    - 31..26=0x0a
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vor
  vor.vx:
    opcode:
    - vor.vx
    - 31..26=0x0a
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - 'vor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vor
  vredand.vs:
    opcode:
    - vredand.vs
    - 31..26=0x01
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredand.vs  vd, vs2, vs1, vm   # vd[0] =  and( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredand
  vredmax.vs:
    opcode:
    - vredmax.vs
    - 31..26=0x07
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredmax.vs  vd, vs2, vs1, vm   # vd[0] =  max( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredmax
  vredmaxu.vs:
    opcode:
    - vredmaxu.vs
    - 31..26=0x06
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredmaxu.vs vd, vs2, vs1, vm   # vd[0] = maxu( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredmaxu
  vredmin.vs:
    opcode:
    - vredmin.vs
    - 31..26=0x05
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredmin.vs  vd, vs2, vs1, vm   # vd[0] =  min( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredmin
  vredminu.vs:
    opcode:
    - vredminu.vs
    - 31..26=0x04
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredminu.vs vd, vs2, vs1, vm   # vd[0] = minu( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredminu
  vredor.vs:
    opcode:
    - vredor.vs
    - 31..26=0x02
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredor.vs   vd, vs2, vs1, vm   # vd[0] =   or( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredor
  vredsum.vs:
    opcode:
    - vredsum.vs
    - 31..26=0x00
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredsum.vs  vd, vs2, vs1, vm   # vd[0] =  sum( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredsum
  vredxor.vs:
    opcode:
    - vredxor.vs
    - 31..26=0x03
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce"
    desc:
      v:
        "#sec-vector-integer-reduce":
          text:
          - 'vredxor.vs  vd, vs2, vs1, vm   # vd[0] =  xor( vs1[0] , vs2[*] )'
        "#_vector_instruction_listing":
          text:
          - vredxor
  vrem.vv:
    opcode:
    - vrem.vv
    - 31..26=0x23
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vrem.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vrem.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vrem
  vrem.vx:
    opcode:
    - vrem.vx
    - 31..26=0x23
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vrem.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vrem.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vrem
  vremu.vv:
    opcode:
    - vremu.vv
    - 31..26=0x22
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vremu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vremu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vremu
  vremu.vx:
    opcode:
    - vremu.vx
    - 31..26=0x22
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_divide_instructions"
    desc:
      v:
        "#_vector_integer_divide_instructions":
          text:
          - 'vremu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vremu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vremu
  vrgather.vi:
    opcode:
    - vrgather.vi
    - 31..26=0x0c
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_register_gather_instructions"
    desc:
      v:
        "#_vector_register_gather_instructions":
          text:
          - The vrgather.vv form uses SEW/LMUL for both the data and indices
          - Note vrgather.vv can only reference vector elements 0-255. The vrgatherei16
            form can index 64K elements, and can also be used to reduce the register
            capacity needed to hold indices when SEW > 16.
          - For any vrgather instruction, the destination vector register group cannot
            overlap with the source vector register groups, otherwise the instruction
            encoding is reserved.
          - 'vrgather.vv vd, vs2, vs1, vm     # vd[i] = (vs1[i] &gt;= VLMAX) ? 0 :
            vs2[vs1[i]];'
          - 'vrgather.vx vd, vs2, rs1, vm  # vd[i] = (x[rs1] &gt;= VLMAX) ? 0 : vs2[x[rs1]]'
          - 'vrgather.vi vd, vs2, uimm, vm # vd[i] =  (uimm &gt;= VLMAX)  ? 0 : vs2[uimm]'
        "#_synthesizing_vdecompress":
          text:
          - 'vdecompress There is no inverse vdecompress provided, as this operation
            can be readily synthesized using iota and a masked vrgather:'
          - 'vrgather.vv v11, v1, v10, v0.t  # Expand into destination'
          - 'e q r d c b v a    # v11 destination after vrgather using viota.m under
            mask'
        "#_vector_instruction_listing":
          text:
          - vrgather
  vrgather.vv:
    opcode:
    - vrgather.vv
    - 31..26=0x0c
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_register_gather_instructions"
    desc:
      v:
        "#_vector_register_gather_instructions":
          text:
          - The vrgather.vv form uses SEW/LMUL for both the data and indices
          - Note vrgather.vv can only reference vector elements 0-255. The vrgatherei16
            form can index 64K elements, and can also be used to reduce the register
            capacity needed to hold indices when SEW > 16.
          - For any vrgather instruction, the destination vector register group cannot
            overlap with the source vector register groups, otherwise the instruction
            encoding is reserved.
          - 'vrgather.vv vd, vs2, vs1, vm     # vd[i] = (vs1[i] &gt;= VLMAX) ? 0 :
            vs2[vs1[i]];'
          - 'vrgather.vx vd, vs2, rs1, vm  # vd[i] = (x[rs1] &gt;= VLMAX) ? 0 : vs2[x[rs1]]'
          - 'vrgather.vi vd, vs2, uimm, vm # vd[i] =  (uimm &gt;= VLMAX)  ? 0 : vs2[uimm]'
        "#_synthesizing_vdecompress":
          text:
          - 'vdecompress There is no inverse vdecompress provided, as this operation
            can be readily synthesized using iota and a masked vrgather:'
          - 'vrgather.vv v11, v1, v10, v0.t  # Expand into destination'
          - 'e q r d c b v a    # v11 destination after vrgather using viota.m under
            mask'
        "#_vector_instruction_listing":
          text:
          - vrgather
  vrgather.vx:
    opcode:
    - vrgather.vx
    - 31..26=0x0c
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_register_gather_instructions"
    desc:
      v:
        "#_vector_register_gather_instructions":
          text:
          - The vrgather.vv form uses SEW/LMUL for both the data and indices
          - Note vrgather.vv can only reference vector elements 0-255. The vrgatherei16
            form can index 64K elements, and can also be used to reduce the register
            capacity needed to hold indices when SEW > 16.
          - For any vrgather instruction, the destination vector register group cannot
            overlap with the source vector register groups, otherwise the instruction
            encoding is reserved.
          - 'vrgather.vv vd, vs2, vs1, vm     # vd[i] = (vs1[i] &gt;= VLMAX) ? 0 :
            vs2[vs1[i]];'
          - 'vrgather.vx vd, vs2, rs1, vm  # vd[i] = (x[rs1] &gt;= VLMAX) ? 0 : vs2[x[rs1]]'
          - 'vrgather.vi vd, vs2, uimm, vm # vd[i] =  (uimm &gt;= VLMAX)  ? 0 : vs2[uimm]'
        "#_synthesizing_vdecompress":
          text:
          - 'vdecompress There is no inverse vdecompress provided, as this operation
            can be readily synthesized using iota and a masked vrgather:'
          - 'vrgather.vv v11, v1, v10, v0.t  # Expand into destination'
          - 'e q r d c b v a    # v11 destination after vrgather using viota.m under
            mask'
        "#_vector_instruction_listing":
          text:
          - vrgather
  vrsub.vi:
    opcode:
    - vrsub.vi
    - 31..26=0x03
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - An assembly pseudoinstruction vneg.v vd,vs = vrsub.vx vd,vs,x0 is provided
          - 'vrsub.vx vd, vs2, rs1, vm   # vd[i] = x[rs1] - vs2[i]'
          - 'vrsub.vi vd, vs2, imm, vm   # vd[i] = imm - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vrsub
  vrsub.vx:
    opcode:
    - vrsub.vx
    - 31..26=0x03
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - An assembly pseudoinstruction vneg.v vd,vs = vrsub.vx vd,vs,x0 is provided
          - 'vrsub.vx vd, vs2, rs1, vm   # vd[i] = x[rs1] - vs2[i]'
          - 'vrsub.vi vd, vs2, imm, vm   # vd[i] = imm - vs2[i]'
        "#_vector_instruction_listing":
          text:
          - vrsub
  vsadd.vi:
    opcode:
    - vsadd.vi
    - 31..26=0x21
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsadd
  vsadd.vv:
    opcode:
    - vsadd.vv
    - 31..26=0x21
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsadd
  vsadd.vx:
    opcode:
    - vsadd.vx
    - 31..26=0x21
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsadd.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsadd.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsadd.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsadd
  vsaddu.vi:
    opcode:
    - vsaddu.vi
    - 31..26=0x20
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsaddu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsaddu.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsaddu.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsaddu
  vsaddu.vv:
    opcode:
    - vsaddu.vv
    - 31..26=0x20
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsaddu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsaddu.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsaddu.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsaddu
  vsaddu.vx:
    opcode:
    - vsaddu.vx
    - 31..26=0x20
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vsaddu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsaddu.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsaddu.vi vd, vs2, imm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsaddu
  vsb.v:
    opcode:
    - vsb.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x0
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: &19
    - rs1
    - vs3
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsbc.vvm:
    opcode:
    - vsbc.vvm
    - 31..26=0x12
    - 25=1
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - The subtract with borrow instruction vsbc performs the equivalent function
            to support long word arithmetic for subtraction
          - 'vsbc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vsbc
  vsbc.vxm:
    opcode:
    - vsbc.vxm
    - 31..26=0x12
    - 25=1
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    desc:
      v:
        "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
          text:
          - The subtract with borrow instruction vsbc performs the equivalent function
            to support long word arithmetic for subtraction
          - 'vsbc.vvm   vd, vs2, vs1, v0  # Vector-vector'
          - 'vsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vsbc
  vse.v:
    opcode:
    - vse.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x7
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *19
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vseq.vi:
    opcode:
    - vseq.vi
    - 31..26=0x18
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vseq.vv:
    opcode:
    - vseq.vv
    - 31..26=0x18
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vseq.vx:
    opcode:
    - vseq.vx
    - 31..26=0x18
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsetvl:
    opcode:
    - vsetvl
    - 31=1
    - 30..25=0x0
    - rs2
    - rs1
    - 14..12=0x7
    - rd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &31
    - rs2
    - rs1
    - rd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_state_of_vector_extension_at_reset"
    desc:
      v:
        "#_state_of_vector_extension_at_reset":
          text:
          - In particular, vtype and vl must have values that can be read and then
            restored with a single vsetvl instruction.
        "#sec-inactive-defs":
          text:
          - vsetvl
        "#sec-vector-config":
          text:
          - 'vsetvl  rd, rs1, rs2      # rd = new vl, rs1 = AVL, rs2 = new vtype value'
        "#_vtype_encoding":
          text:
          - The vsetvl variant operates similarly to vsetvli except that it takes
            a vtype value from rs2 and can be used for context restore.
  vsetvli:
    opcode:
    - vsetvli
    - 31=0
    - zimm11
    - rs1
    - 14..12=0x7
    - rd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: &30
    - zimm11
    - rs1
    - rd
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_register_grouping_vlmul20"
    desc:
      v:
        "#_vector_register_grouping_vlmul20":
          text:
          - Note vsetvli instruction attempts to write an LMUL < SEW
        "#sec-agnostic":
          text:
          - 'The assembly syntax adds two mandatory flags to the vsetvli instruction:'
          - Note vsetvli , they defaulted to mask-undisturbed/tail-undisturbed
          - The use of vsetvli without these flags is deprecated, however, and specifying
            a flag setting is now mandatory
          - 'vsetvli t0, a0, e32, m4, ta, ma   # Tail agnostic, mask agnostic'
          - 'vsetvli t0, a0, e32, m4, tu, ma   # Tail undisturbed, mask agnostic'
          - 'vsetvli t0, a0, e32, m4, ta, mu   # Tail agnostic, mask undisturbed'
          - 'vsetvli t0, a0, e32, m4, tu, mu   # Tail undisturbed, mask undisturbed'
        "#_vector_instruction_formats":
          text:
          - 'Format for Vector Load Instructions under LOAD-FP major opcode {reg:
            [ {bits: 7, name: 0x7, attr: ''VL* unit-stride''}, {bits: 5, name: ''vd'',
            attr: ''destination of load'', type: 2}, {bits: 3, name: ''width''}, {bits:
            5, name: ''rs1'', attr: ''base address'', type: 4}, {bits: 5, name: ''lumop''},
            {bits: 1, name: ''vm''}, {bits: 2, name: ''mop''}, {bits: 1, name: ''mew''},
            {bits: 3, name: ''nf''}, ]} {reg: [ {bits: 7, name: 0x7, attr: ''VLS*
            strided''}, {bits: 5, name: ''vd'', attr: ''destination of load'', type:
            2}, {bits: 3, name: ''width''}, {bits: 5, name: ''rs1'', attr: ''base
            address'', type: 4}, {bits: 5, name: ''rs2'', attr: ''stride'', type:
            4}, {bits: 1, name: ''vm''}, {bits: 2, name: ''mop''}, {bits: 1, name:
            ''mew''}, {bits: 3, name: ''nf''}, ]} {reg: [ {bits: 7, name: 0x7, attr:
            ''VLX* indexed''}, {bits: 5, name: ''vd'', attr: ''destination of load'',
            type: 2}, {bits: 3, name: ''width''}, {bits: 5, name: ''rs1'', attr: ''base
            address'', type: 4}, {bits: 5, name: ''vs2'', attr: ''address offsets'',
            type: 2}, {bits: 1, name: ''vm''}, {bits: 2, name: ''mop''}, {bits: 1,
            name: ''mew''}, {bits: 3, name: ''nf''}, ]} Format for Vector Store Instructions
            under STORE-FP major opcode {reg: [ {bits: 7, name: 0x27, attr: ''VS*
            unit-stride''}, {bits: 5, name: ''vs3'', attr: ''store data'', type: 2},
            {bits: 3, name: ''width''}, {bits: 5, name: ''rs1'', attr: ''base address'',
            type: 4}, {bits: 5, name: ''sumop''}, {bits: 1, name: ''vm''}, {bits:
            2, name: ''mop''}, {bits: 1, name: ''mew''}, {bits: 3, name: ''nf''},
            ]} {reg: [ {bits: 7, name: 0x27, attr: ''VSS* strided''}, {bits: 5, name:
            ''vs3'', attr: ''store data'', type: 2}, {bits: 3, name: ''width''}, {bits:
            5, name: ''rs1'', attr: ''base address'', type: 4}, {bits: 5, name: ''rs2'',
            attr: ''stride'', type: 4}, {bits: 1, name: ''vm''}, {bits: 2, name: ''mop''},
            {bits: 1, name: ''mew''}, {bits: 3, name: ''nf''}, ]} {reg: [ {bits: 7,
            name: 0x27, attr: ''VSX* indexed''}, {bits: 5, name: ''vs3'', attr: ''store
            data'', type: 2}, {bits: 3, name: ''width''}, {bits: 5, name: ''rs1'',
            attr: ''base address'', type: 4}, {bits: 5, name: ''vs2'', attr: ''address
            offsets'', type: 2}, {bits: 1, name: ''vm''}, {bits: 2, name: ''mop''},
            {bits: 1, name: ''mew''}, {bits: 3, name: ''nf''}, ]} Formats for Vector
            Arithmetic Instructions under OP-V major opcode {reg: [ {bits: 7, name:
            0x57, attr: ''OPIVV''}, {bits: 5, name: ''vd'', type: 2}, {bits: 3, name:
            0}, {bits: 5, name: ''vs1'', type: 2}, {bits: 5, name: ''vs2'', type:
            2}, {bits: 1, name: ''vm''}, {bits: 6, name: ''funct6''}, ]} {reg: [ {bits:
            7, name: 0x57, attr: ''OPFVV''}, {bits: 5, name: ''vd / rd'', type: 7},
            {bits: 3, name: 1}, {bits: 5, name: ''vs1'', type: 2}, {bits: 5, name:
            ''vs2'', type: 2}, {bits: 1, name: ''vm''}, {bits: 6, name: ''funct6''},
            ]} {reg: [ {bits: 7, name: 0x57, attr: ''OPMVV''}, {bits: 5, name: ''vd
            / rd'', type: 7}, {bits: 3, name: 2}, {bits: 5, name: ''vs1'', type: 2},
            {bits: 5, name: ''vs2'', type: 2}, {bits: 1, name: ''vm''}, {bits: 6,
            name: ''funct6''}, ]} {reg: [ {bits: 7, name: 0x57, attr: [''OPIVI'']},
            {bits: 5, name: ''vd'', type: 2}, {bits: 3, name: 3}, {bits: 5, name:
            ''imm[4:0]'', type: 5}, {bits: 5, name: ''vs2'', type: 2}, {bits: 1, name:
            ''vm''}, {bits: 6, name: ''funct6''}, ]} {reg: [ {bits: 7, name: 0x57,
            attr: ''OPIVX''}, {bits: 5, name: ''vd'', type: 2}, {bits: 3, name: 4},
            {bits: 5, name: ''rs1'', type: 4}, {bits: 5, name: ''vs2'', type: 2},
            {bits: 1, name: ''vm''}, {bits: 6, name: ''funct6''}, ]} {reg: [ {bits:
            7, name: 0x57, attr: ''OPFVF''}, {bits: 5, name: ''vd'', type: 2}, {bits:
            3, name: 5}, {bits: 5, name: ''rs1'', type: 4}, {bits: 5, name: ''vs2'',
            type: 2}, {bits: 1, name: ''vm''}, {bits: 6, name: ''funct6''}, ]} {reg:
            [ {bits: 7, name: 0x57, attr: ''OPMVX''}, {bits: 5, name: ''vd / rd'',
            type: 7}, {bits: 3, name: 6}, {bits: 5, name: ''rs1'', type: 4}, {bits:
            5, name: ''vs2'', type: 2}, {bits: 1, name: ''vm''}, {bits: 6, name: ''funct6''},
            ]} Formats for Vector Configuration Instructions under OP-V major opcode
            {reg: [ {bits: 7, name: 0x57, attr: ''vsetvli''}, {bits: 5, name: ''rd'',
            type: 4}, {bits: 3, name: 7}, {bits: 5, name: ''rs1'', type: 4}, {bits:
            11, name: ''zimm[10:0]'', type: 5}, {bits: 1, name: ''0''}, ]} {reg: [
            {bits: 7, name: 0x57, attr: ''vsetivli''}, {bits: 5, name: ''rd'', type:
            4}, {bits: 3, name: 7}, {bits: 5, name: ''uimm[4:0]'', type: 5}, {bits:
            10, name: ''zimm[9:0]'', type: 5}, {bits: 1, name: ''1''}, {bits: 1, name:
            ''1''}, ]} {reg: [ {bits: 7, name: 0x57, attr: ''vsetvl''}, {bits: 5,
            name: ''rd'', type: 4}, {bits: 3, name: 7}, {bits: 5, name: ''rs1'', type:
            4}, {bits: 5, name: ''rs2'', type: 4}, {bits: 6, name: 0x1000}, {bits:
            1, name: 1}, ]} Vector instructions can have scalar or vector source operands
            and produce scalar or vector results, and most vector instructions can
            be performed either unconditionally or conditionally under a mask.'
        "#sec-inactive-defs":
          text:
          - vsetvli
        "#sec-vector-config":
          text:
          - 'Formats for Vector Configuration Instructions under OP-V major opcode
            {reg: [ {bits: 7, name: 0x57, attr: ''vsetvli''}, {bits: 5, name: ''rd'',
            type: 4}, {bits: 3, name: 7}, {bits: 5, name: ''rs1'', type: 4}, {bits:
            11, name: ''zimm[10:0]'', type: 5}, {bits: 1, name: ''0''}, ]} {reg: [
            {bits: 7, name: 0x57, attr: ''vsetivli''}, {bits: 5, name: ''rd'', type:
            4}, {bits: 3, name: 7}, {bits: 5, name: ''uimm[4:0]'', type: 5}, {bits:
            10, name: ''zimm[9:0]'', type: 5}, {bits: 1, name: ''1''}, {bits: 1, name:
            ''1''}, ]} {reg: [ {bits: 7, name: 0x57, attr: ''vsetvl''}, {bits: 5,
            name: ''rd'', type: 4}, {bits: 3, name: 7}, {bits: 5, name: ''rs1'', type:
            4}, {bits: 5, name: ''rs2'', type: 4}, {bits: 6, name: 0x1000}, {bits:
            1, name: 1}, ]}'
          - 'vsetvli rd, rs1, vtypei   # rd = new vl, rs1 = AVL, vtypei = new vtype
            setting'
        "#_vtype_encoding":
          text:
          - The new vtype setting is encoded in the immediate fields of vsetvli and
            vsetivli , and in the rs2 register for vsetvl .
          - 'vsetvli t0, a0, e8          # SEW= 8, LMUL=1'
          - 'vsetvli t0, a0, e8, m2      # SEW= 8, LMUL=2'
          - 'vsetvli t0, a0, e32, mf2    # SEW=32, LMUL=1/2'
        "#_avl_encoding":
          text:
          - The new vector length setting is based on AVL, which for vsetvli and vsetvl
            is encoded in the rs1 and rd Table 8. AVL used in vsetvli and vsetvl instructions
            rd rs1 AVL value
        "#example-stripmine-sew":
          text:
          - 'vsetvli a3, a0, e16, m4, ta, ma  # vtype = 16-bit integer vectors;'
          - 'vsetvli x0, x0, e32, m8, ta, ma  # Operate on 32b values'
        "#_unit_stride_fault_only_first_loads":
          text:
          - 'vsetvli a1, x0, e8, m8, ta, ma  # Vector of bytes of maximum length'
        "#_vector_unit_stride_segment_loads_and_stores":
          text:
          - vsetvli a1, t0, e8, ta, ma
          - vsetvli a1, t0, e32, ta, ma
        "#_vector_strided_segment_loads_and_stores":
          text:
          - vsetvli a1, t0, e8, ta, ma
          - vsetvli a1, t0, e32, ta, ma
        "#_vector_indexed_segment_loads_and_stores":
          text:
          - vsetvli a1, t0, e8, ta, ma
          - vsetvli a1, t0, e32, ta, ma
        "#_vector_loadstore_whole_register_instructions":
          text:
          - 'vsetvli t1, x0, e8, m8     # Maximum VLMAX'
          - 'vsetvli x0, t0, &lt;new type&gt; # Restore vl (potentially already present)'
        "#_vector_narrowing_fixed_point_clip_instructions":
          text:
          - A vsetvli is required inbetween these two instructions to change SEW
        "#_example_using_vector_mask_instructions":
          text:
          - 'vsetvli x0, t0, e8, m8, ta, ma  # Max length vectors of bytes'
          - 'vsetvli x0, a2, e8, m8, ta, ma   # Vectors of bytes.'
          - 'vsetvli t1, a2, e8, m8, ta, ma   # Vectors of bytes.'
        "#_vector_iota_instruction":
          text:
          - 'vsetvli a5, a0, e32, m8, ta, ma   # 32-bit integers'
        "#_zve_vector_extensions_for_embedded_processors":
          text:
          - Configuration-Setting Instructions ( vsetvli / vsetivli / vsetvl )
        "#_v_vector_extension_for_application_processors":
          text:
          - Configuration-Setting Instructions ( vsetvli / vsetivli / vsetvl )
        "#_vector_vector_add_example":
          text:
          - 'vsetvli t0, a0, e32, ta, ma  # Set vector length based on 32-bit vectors'
        "#_example_with_mixed_width_mask_and_compute":
          text:
          - 'vsetvli a4, a0, e8, m1, ta, ma   # Byte vector for predicate calc'
          - 'vsetvli x0, a0, e32, m4, ta, mu  # Vector of 32-bit values.'
        "#_memcpy_example":
          text:
          - 'vsetvli t0, a2, e8, m8, ta, ma   # Vectors of 8b'
        "#_conditional_example":
          text:
          - 'vsetvli t0, a0, e8, m1, ta, ma # Use 8b elements.'
          - 'vsetvli t0, a0, e16, m2, ta, mu  # Use 16b elements.'
        "#_saxpy_example":
          text:
          - vsetvli a4, a0, e32, m8, ta, ma
        "#_sgemm_example":
          text:
          - 'vsetvli nvl, nt, e32, ta, ma  # 32-bit vectors, LMUL=1'
        "#_c_standard_library_strcmp_example":
          text:
          - 'vsetvli t0, x0, e8, m2, ta, ma  # Max length vectors of bytes'
        "#_fractional_lmul_example":
          text:
          - "vsetvli\ts1, zero, e8,m1,ta,mu"
          - "vsetvli\ts1, zero, e64,m8,ta,mu"
          - "vsetvli\ts1, zero, e8,mf2,ta,mu // LMUL=1/2 !"
          - "vsetvli\ts1, zero, e64,m4,ta,mu // LMUL=4"
  vsgt.vi:
    opcode:
    - vsgt.vi
    - 31..26=0x1f
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsgt.vx:
    opcode:
    - vsgt.vx
    - 31..26=0x1f
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsgtu.vi:
    opcode:
    - vsgtu.vi
    - 31..26=0x1e
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsgtu.vx:
    opcode:
    - vsgtu.vx
    - 31..26=0x1e
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsh.v:
    opcode:
    - vsh.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x5
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *19
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsle.vi:
    opcode:
    - vsle.vi
    - 31..26=0x1d
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsle.vv:
    opcode:
    - vsle.vv
    - 31..26=0x1d
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsle.vx:
    opcode:
    - vsle.vx
    - 31..26=0x1d
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsleu.vi:
    opcode:
    - vsleu.vi
    - 31..26=0x1c
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsleu.vv:
    opcode:
    - vsleu.vv
    - 31..26=0x1c
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsleu.vx:
    opcode:
    - vsleu.vx
    - 31..26=0x1c
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vslide1down.vx:
    opcode:
    - vslide1down.vx
    - 31..26=0x0f
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_slide1down_instruction"
    desc:
      v:
        "#_vector_slide1down_instruction":
          text:
          - The vslide1down instruction copies the first vl -1 active elements values
            from index i +1 in the source vector register group to index i in the
            destination vector register group.
          - The vslide1down instruction places the x register argument at location
            vl -1 in the destination vector register, provided that element vl-1 is
            active, otherwise the destination element is unchanged
          - Note vslide1down instruction can be used to load values into a vector
            register without using memory and without disturbing other vector registers
          - This provides a path for debuggers to modify the contents of a vector
            register, albeit slowly, with multiple repeated vslide1down invocations
          - 'vslide1down.vx  vd, vs2, rs1, vm      # vd[i] = vs2[i+1], vd[vl-1]=x[rs1]'
          - vslide1down behavior
        "#_vector_instruction_listing":
          text:
          - vslide1down
  vslide1up.vx:
    opcode:
    - vslide1up.vx
    - 31..26=0x0e
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_slide1up"
    desc:
      v:
        "#_vector_slide1up":
          text:
          - The vslide1up instruction places the x register argument at location 0
            of the destination vector register group, provided that element 0 is active,
            otherwise the destination element update follows the current mask agnostic/undisturbed
            policy
          - The vslide1up instruction requires that the destination vector register
            group does not overlap the source vector register group
          - 'vslide1up.vx  vd, vs2, rs1, vm        # vd[0]=x[rs1], vd[i+1] = vs2[i]'
          - vslide1up behavior
        "#_vector_instruction_listing":
          text:
          - vslide1up
  vslidedown.vi:
    opcode:
    - vslidedown.vi
    - 31..26=0x0f
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-inactive-defs"
    desc:
      v:
        "#sec-inactive-defs":
          text:
          - Note vslidedown and vrgather may read indices past vl or even VLMAX in
            source vector register groups
        "#_vector_slidedown_instructions":
          text:
          - For vslidedown , the value in vl specifies the maximum number of destination
            elements that are written
          - 'vslidedown.vx vd, vs2, rs1, vm       # vd[i] = vs2[i+rs1]'
          - 'vslidedown.vi vd, vs2, uimm, vm      # vd[i] = vs2[i+uimm]'
          - vslidedown behavior for source elements for element i in slide
          - vslidedown behavior for destination element i in slide
        "#_vector_instruction_listing":
          text:
          - vslidedown
  vslidedown.vx:
    opcode:
    - vslidedown.vx
    - 31..26=0x0f
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-inactive-defs"
    desc:
      v:
        "#sec-inactive-defs":
          text:
          - Note vslidedown and vrgather may read indices past vl or even VLMAX in
            source vector register groups
        "#_vector_slidedown_instructions":
          text:
          - For vslidedown , the value in vl specifies the maximum number of destination
            elements that are written
          - 'vslidedown.vx vd, vs2, rs1, vm       # vd[i] = vs2[i+rs1]'
          - 'vslidedown.vi vd, vs2, uimm, vm      # vd[i] = vs2[i+uimm]'
          - vslidedown behavior for source elements for element i in slide
          - vslidedown behavior for destination element i in slide
        "#_vector_instruction_listing":
          text:
          - vslidedown
  vslideup.vi:
    opcode:
    - vslideup.vi
    - 31..26=0x0e
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_slide_instructions"
    desc:
      v:
        "#_vector_slide_instructions":
          text:
          - Note vslideup and vslidedown
          - For all of the vslideup , vslidedown , v[f]slide1up , and v[f]slide1down
            instructions, if vstart &ge; vl , the instruction performs no operation
            and leaves the destination vector register unchanged.
        "#_vector_slideup_instructions":
          text:
          - For vslideup , the value in vl specifies the maximum number of destination
            elements that are written
          - The destination vector register group for vslideup cannot overlap the
            source vector register group, otherwise the instruction encoding is reserved.
          - 'vslideup.vx vd, vs2, rs1, vm        # vd[i+rs1] = vs2[i]'
          - 'vslideup.vi vd, vs2, uimm, vm       # vd[i+uimm] = vs2[i]'
          - vslideup behavior for destination elements
        "#_vector_instruction_listing":
          text:
          - vslideup
  vslideup.vx:
    opcode:
    - vslideup.vx
    - 31..26=0x0e
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_slide_instructions"
    desc:
      v:
        "#_vector_slide_instructions":
          text:
          - Note vslideup and vslidedown
          - For all of the vslideup , vslidedown , v[f]slide1up , and v[f]slide1down
            instructions, if vstart &ge; vl , the instruction performs no operation
            and leaves the destination vector register unchanged.
        "#_vector_slideup_instructions":
          text:
          - For vslideup , the value in vl specifies the maximum number of destination
            elements that are written
          - The destination vector register group for vslideup cannot overlap the
            source vector register group, otherwise the instruction encoding is reserved.
          - 'vslideup.vx vd, vs2, rs1, vm        # vd[i+rs1] = vs2[i]'
          - 'vslideup.vi vd, vs2, uimm, vm       # vd[i+uimm] = vs2[i]'
          - vslideup behavior for destination elements
        "#_vector_instruction_listing":
          text:
          - vslideup
  vsll.vi:
    opcode:
    - vsll.vi
    - 31..26=0x25
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsll.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsll.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsll.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_iota_instruction":
          text:
          - 'vsll.vi v16, v16, 2, v0.t      # Multiply offsets by four bytes'
        "#_vector_instruction_listing":
          text:
          - vsll
        "#_fractional_lmul_example":
          text:
          - "vsll.vi\tv16, v16, 1"
          - "vsll.vi\tv20, v20, 1"
  vsll.vv:
    opcode:
    - vsll.vv
    - 31..26=0x25
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsll.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsll.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsll.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_iota_instruction":
          text:
          - 'vsll.vi v16, v16, 2, v0.t      # Multiply offsets by four bytes'
        "#_vector_instruction_listing":
          text:
          - vsll
        "#_fractional_lmul_example":
          text:
          - "vsll.vi\tv16, v16, 1"
          - "vsll.vi\tv20, v20, 1"
  vsll.vx:
    opcode:
    - vsll.vx
    - 31..26=0x25
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsll.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsll.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsll.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_iota_instruction":
          text:
          - 'vsll.vi v16, v16, 2, v0.t      # Multiply offsets by four bytes'
        "#_vector_instruction_listing":
          text:
          - vsll
        "#_fractional_lmul_example":
          text:
          - "vsll.vi\tv16, v16, 1"
          - "vsll.vi\tv20, v20, 1"
  vslt.vv:
    opcode:
    - vslt.vv
    - 31..26=0x1b
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vslt.vx:
    opcode:
    - vslt.vx
    - 31..26=0x1b
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsltu.vv:
    opcode:
    - vsltu.vv
    - 31..26=0x1a
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsltu.vx:
    opcode:
    - vsltu.vx
    - 31..26=0x1a
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsmul.vv:
    opcode:
    - vsmul.vv
    - 31..26=0x27
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_fractional_multiply_with_rounding_and_saturation"
    desc:
      v:
        "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
          text:
          - 'vsmul.vv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*vs1[i],
            SEW-1))'
          - 'vsmul.vx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*x[rs1],
            SEW-1))'
        "#_whole_vector_register_move":
          text:
          - Note vsmul vm=1 )
        "#_zve_vector_extensions_for_embedded_processors":
          text:
          - "), except that vsmul.vv and vsmul.vx are not supported for EEW=64 in
            Zve64*."
        "#_vector_instruction_listing":
          text:
          - vsmul
  vsmul.vx:
    opcode:
    - vsmul.vx
    - 31..26=0x27
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_fractional_multiply_with_rounding_and_saturation"
    desc:
      v:
        "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
          text:
          - 'vsmul.vv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*vs1[i],
            SEW-1))'
          - 'vsmul.vx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*x[rs1],
            SEW-1))'
        "#_whole_vector_register_move":
          text:
          - Note vsmul vm=1 )
        "#_zve_vector_extensions_for_embedded_processors":
          text:
          - "), except that vsmul.vv and vsmul.vx are not supported for EEW=64 in
            Zve64*."
        "#_vector_instruction_listing":
          text:
          - vsmul
  vsne.vi:
    opcode:
    - vsne.vi
    - 31..26=0x19
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsne.vv:
    opcode:
    - vsne.vv
    - 31..26=0x19
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsne.vx:
    opcode:
    - vsne.vx
    - 31..26=0x19
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsra.vi:
    opcode:
    - vsra.vi
    - 31..26=0x29
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsra.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsra.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsra.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsra
  vsra.vv:
    opcode:
    - vsra.vv
    - 31..26=0x29
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsra.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsra.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsra.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsra
  vsra.vx:
    opcode:
    - vsra.vx
    - 31..26=0x29
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_shift_instructions"
    desc:
      v:
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsra.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsra.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsra.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsra
  vsrl.vi:
    opcode:
    - vsrl.vi
    - 31..26=0x28
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#example-stripmine-sew"
    desc:
      v:
        "#example-stripmine-sew":
          text:
          - vsrl.vi v8, v8, 3
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsrl.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsrl.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsrl.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsrl
  vsrl.vv:
    opcode:
    - vsrl.vv
    - 31..26=0x28
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#example-stripmine-sew"
    desc:
      v:
        "#example-stripmine-sew":
          text:
          - vsrl.vi v8, v8, 3
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsrl.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsrl.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsrl.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsrl
  vsrl.vx:
    opcode:
    - vsrl.vx
    - 31..26=0x28
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#example-stripmine-sew"
    desc:
      v:
        "#example-stripmine-sew":
          text:
          - vsrl.vi v8, v8, 3
        "#_vector_single_width_shift_instructions":
          text:
          - 'vsrl.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsrl.vx vd, vs2, rs1, vm   # vector-scalar'
          - 'vsrl.vi vd, vs2, uimm, vm   # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vsrl
  vssb.v:
    opcode:
    - vssb.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x0
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: &20
    - rs2
    - rs1
    - vs3
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsse.v:
    opcode:
    - vsse.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x7
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *20
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vssh.v:
    opcode:
    - vssh.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x5
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *20
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vssra.vi:
    opcode:
    - vssra.vi
    - 31..26=0x2b
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - 'vssra.vv vd, vs2, vs1, vm   # vd[i] = roundoff_signed(vs2[i],vs1[i])'
          - 'vssra.vx vd, vs2, rs1, vm   # vd[i] = roundoff_signed(vs2[i], x[rs1])'
          - 'vssra.vi vd, vs2, uimm, vm  # vd[i] = roundoff_signed(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssra
  vssra.vv:
    opcode:
    - vssra.vv
    - 31..26=0x2b
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - 'vssra.vv vd, vs2, vs1, vm   # vd[i] = roundoff_signed(vs2[i],vs1[i])'
          - 'vssra.vx vd, vs2, rs1, vm   # vd[i] = roundoff_signed(vs2[i], x[rs1])'
          - 'vssra.vi vd, vs2, uimm, vm  # vd[i] = roundoff_signed(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssra
  vssra.vx:
    opcode:
    - vssra.vx
    - 31..26=0x2b
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - 'vssra.vv vd, vs2, vs1, vm   # vd[i] = roundoff_signed(vs2[i],vs1[i])'
          - 'vssra.vx vd, vs2, rs1, vm   # vd[i] = roundoff_signed(vs2[i], x[rs1])'
          - 'vssra.vi vd, vs2, uimm, vm  # vd[i] = roundoff_signed(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssra
  vssrl.vi:
    opcode:
    - vssrl.vi
    - 31..26=0x2a
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - The scaling right shifts have both zero-extending ( vssrl ) and sign-extending
            ( vssra ) forms
          - 'vssrl.vv vd, vs2, vs1, vm   # vd[i] = roundoff_unsigned(vs2[i], vs1[i])'
          - 'vssrl.vx vd, vs2, rs1, vm   # vd[i] = roundoff_unsigned(vs2[i], x[rs1])'
          - 'vssrl.vi vd, vs2, uimm, vm  # vd[i] = roundoff_unsigned(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssrl
  vssrl.vv:
    opcode:
    - vssrl.vv
    - 31..26=0x2a
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - The scaling right shifts have both zero-extending ( vssrl ) and sign-extending
            ( vssra ) forms
          - 'vssrl.vv vd, vs2, vs1, vm   # vd[i] = roundoff_unsigned(vs2[i], vs1[i])'
          - 'vssrl.vx vd, vs2, rs1, vm   # vd[i] = roundoff_unsigned(vs2[i], x[rs1])'
          - 'vssrl.vi vd, vs2, uimm, vm  # vd[i] = roundoff_unsigned(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssrl
  vssrl.vx:
    opcode:
    - vssrl.vx
    - 31..26=0x2a
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_scaling_shift_instructions"
    desc:
      v:
        "#_vector_single_width_scaling_shift_instructions":
          text:
          - The scaling right shifts have both zero-extending ( vssrl ) and sign-extending
            ( vssra ) forms
          - 'vssrl.vv vd, vs2, vs1, vm   # vd[i] = roundoff_unsigned(vs2[i], vs1[i])'
          - 'vssrl.vx vd, vs2, rs1, vm   # vd[i] = roundoff_unsigned(vs2[i], x[rs1])'
          - 'vssrl.vi vd, vs2, uimm, vm  # vd[i] = roundoff_unsigned(vs2[i], uimm)'
        "#_vector_instruction_listing":
          text:
          - vssrl
  vssub.vv:
    opcode:
    - vssub.vv
    - 31..26=0x23
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vssub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vssub.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vssub
  vssub.vx:
    opcode:
    - vssub.vx
    - 31..26=0x23
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vssub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vssub.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vssub
  vssubu.vv:
    opcode:
    - vssubu.vv
    - 31..26=0x22
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vssubu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vssubu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vssubu
  vssubu.vx:
    opcode:
    - vssubu.vx
    - 31..26=0x22
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_saturating_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_saturating_add_and_subtract":
          text:
          - 'vssubu.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vssubu.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vssubu
  vssw.v:
    opcode:
    - vssw.v
    - nf
    - 28..26=2
    - vm
    - rs2
    - rs1
    - 14..12=0x6
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *20
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsub.vv:
    opcode:
    - vsub.vv
    - 31..26=0x02
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - 'vsub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsub.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vsub
  vsub.vx:
    opcode:
    - vsub.vx
    - 31..26=0x02
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_single_width_integer_add_and_subtract"
    desc:
      v:
        "#_vector_single_width_integer_add_and_subtract":
          text:
          - 'vsub.vv vd, vs2, vs1, vm   # Vector-vector'
          - 'vsub.vx vd, vs2, rs1, vm   # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vsub
  vsuxb.v:
    opcode:
    - vsuxb.v
    - 31..29=0
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: &21
    - vs2
    - rs1
    - vs3
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsuxe.v:
    opcode:
    - vsuxe.v
    - 31..29=0
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x7
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsuxh.v:
    opcode:
    - vsuxh.v
    - 31..29=0
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsuxw.v:
    opcode:
    - vsuxw.v
    - 31..29=0
    - 28..26=7
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsw.v:
    opcode:
    - vsw.v
    - nf
    - 28..26=0
    - vm
    - 24..20=0
    - rs1
    - 14..12=0x6
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *19
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsxb.v:
    opcode:
    - vsxb.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsxe.v:
    opcode:
    - vsxe.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x7
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsxh.v:
    opcode:
    - vsxh.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x5
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vsxw.v:
    opcode:
    - vsxw.v
    - nf
    - 28..26=3
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vs3
    - 6..0=0x27
    opcode_group: opcodes-rvv
    opcode_args: *21
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwadd.vv:
    opcode:
    - vwadd.vv
    - 31..26=0x31
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - Assembly pseudoinstructions vwcvt.x.x.v vd,vs,vm = vwadd.vx vd,vs,x0,vm
            and vwcvtu.x.x.v vd,vs,vm = vwaddu.vx vd,vs,x0,vm are provided
          - 'vwadd.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwadd
          - vwadd.w
  vwadd.vx:
    opcode:
    - vwadd.vx
    - 31..26=0x31
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - Assembly pseudoinstructions vwcvt.x.x.v vd,vs,vm = vwadd.vx vd,vs,x0,vm
            and vwcvtu.x.x.v vd,vs,vm = vwaddu.vx vd,vs,x0,vm are provided
          - 'vwadd.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwadd
          - vwadd.w
  vwadd.wv:
    opcode:
    - vwadd.wv
    - 31..26=0x35
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - Assembly pseudoinstructions vwcvt.x.x.v vd,vs,vm = vwadd.vx vd,vs,x0,vm
            and vwcvtu.x.x.v vd,vs,vm = vwaddu.vx vd,vs,x0,vm are provided
          - 'vwadd.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwadd
          - vwadd.w
  vwadd.wx:
    opcode:
    - vwadd.wx
    - 31..26=0x35
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - Assembly pseudoinstructions vwcvt.x.x.v vd,vs,vm = vwadd.vx vd,vs,x0,vm
            and vwcvtu.x.x.v vd,vs,vm = vwaddu.vx vd,vs,x0,vm are provided
          - 'vwadd.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwadd.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwadd.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwadd
          - vwadd.w
  vwaddu.vv:
    opcode:
    - vwaddu.vv
    - 31..26=0x30
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwaddu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwaddu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwaddu
          - vwaddu.w
  vwaddu.vx:
    opcode:
    - vwaddu.vx
    - 31..26=0x30
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwaddu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwaddu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwaddu
          - vwaddu.w
  vwaddu.wv:
    opcode:
    - vwaddu.wv
    - 31..26=0x34
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwaddu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwaddu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwaddu
          - vwaddu.w
  vwaddu.wx:
    opcode:
    - vwaddu.wx
    - 31..26=0x34
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwaddu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwaddu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwaddu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwaddu
          - vwaddu.w
  vwmacc.vv:
    opcode:
    - vwmacc.vv
    - 31..26=0x3d
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vwmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmacc
  vwmacc.vx:
    opcode:
    - vwmacc.vx
    - 31..26=0x3d
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vwmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmacc
  vwmaccsu.vv:
    opcode:
    - vwmaccsu.vv
    - 31..26=0x3e
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmaccsu.vv vd, vs1, vs2, vm  # vd[i] = +(signed(vs1[i]) * unsigned(vs2[i]))
            + vd[i]'
          - 'vwmaccsu.vx vd, rs1, vs2, vm  # vd[i] = +(signed(x[rs1]) * unsigned(vs2[i]))
            + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmaccsu
  vwmaccsu.vx:
    opcode:
    - vwmaccsu.vx
    - 31..26=0x3e
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmaccsu.vv vd, vs1, vs2, vm  # vd[i] = +(signed(vs1[i]) * unsigned(vs2[i]))
            + vd[i]'
          - 'vwmaccsu.vx vd, rs1, vs2, vm  # vd[i] = +(signed(x[rs1]) * unsigned(vs2[i]))
            + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmaccsu
  vwmaccu.vv:
    opcode:
    - vwmaccu.vv
    - 31..26=0x3c
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmaccu.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vwmaccu.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmaccu
  vwmaccu.vx:
    opcode:
    - vwmaccu.vx
    - 31..26=0x3c
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmaccu.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]'
          - 'vwmaccu.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmaccu
  vwmaccus.vx:
    opcode:
    - vwmaccus.vx
    - 31..26=0x3f
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_add_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_add_instructions":
          text:
          - 'vwmaccus.vx vd, rs1, vs2, vm  # vd[i] = +(unsigned(x[rs1]) * signed(vs2[i]))
            + vd[i]'
        "#_vector_instruction_listing":
          text:
          - vwmaccus
  vwmul.vv:
    opcode:
    - vwmul.vv
    - 31..26=0x3b
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#example-stripmine-sew"
    desc:
      v:
        "#example-stripmine-sew":
          text:
          - 'vwmul.vx v8, v4, x10    # Widening multiply into 32b in &lt;v8--v15&gt;'
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmul.vv  vd, vs2, vs1, vm # vector-vector'
          - 'vwmul.vx  vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmul
  vwmul.vx:
    opcode:
    - vwmul.vx
    - 31..26=0x3b
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#example-stripmine-sew"
    desc:
      v:
        "#example-stripmine-sew":
          text:
          - 'vwmul.vx v8, v4, x10    # Widening multiply into 32b in &lt;v8--v15&gt;'
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmul.vv  vd, vs2, vs1, vm # vector-vector'
          - 'vwmul.vx  vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmul
  vwmulsu.vv:
    opcode:
    - vwmulsu.vv
    - 31..26=0x3a
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmulsu.vv vd, vs2, vs1, vm # vector-vector'
          - 'vwmulsu.vx vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmulsu
  vwmulsu.vx:
    opcode:
    - vwmulsu.vx
    - 31..26=0x3a
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmulsu.vv vd, vs2, vs1, vm # vector-vector'
          - 'vwmulsu.vx vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmulsu
  vwmulu.vv:
    opcode:
    - vwmulu.vv
    - 31..26=0x38
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmulu.vv vd, vs2, vs1, vm # vector-vector'
          - 'vwmulu.vx vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmulu
  vwmulu.vx:
    opcode:
    - vwmulu.vx
    - 31..26=0x38
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_multiply_instructions"
    desc:
      v:
        "#_vector_widening_integer_multiply_instructions":
          text:
          - 'vwmulu.vv vd, vs2, vs1, vm # vector-vector'
          - 'vwmulu.vx vd, vs2, rs1, vm # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwmulu
  vwredsum.vs:
    opcode:
    - vwredsum.vs
    - 31..26=0x31
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce-widen"
    desc:
      v:
        "#sec-vector-integer-reduce-widen":
          text:
          - The vwredsum.vs instruction sign-extends the SEW-wide vector elements
            before summing them.
          - 'vwredsum.vs  vd, vs2, vs1, vm   # 2*SEW = 2*SEW + sum(sign-extend(SEW))'
        "#_vector_instruction_listing":
          text:
          - vwredsum
  vwredsumu.vs:
    opcode:
    - vwredsumu.vs
    - 31..26=0x30
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#sec-vector-integer-reduce-widen"
    desc:
      v:
        "#sec-vector-integer-reduce-widen":
          text:
          - The unsigned vwredsumu.vs instruction zero-extends the SEW-wide vector
            elements before summing them, then adds the 2*SEW-width scalar element,
            and stores the result in a 2*SEW-width scalar element.
          - For both vwredsumu.vs and vwredsum.vs , overflows wrap around.
          - 'vwredsumu.vs vd, vs2, vs1, vm   # 2*SEW = 2*SEW + sum(zero-extend(SEW))'
        "#_vector_instruction_listing":
          text:
          - vwredsumu
  vwsmacc.vv:
    opcode:
    - vwsmacc.vv
    - 31..26=0x3d
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmacc.vx:
    opcode:
    - vwsmacc.vx
    - 31..26=0x3d
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmaccsu.vv:
    opcode:
    - vwsmaccsu.vv
    - 31..26=0x3e
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmaccsu.vx:
    opcode:
    - vwsmaccsu.vx
    - 31..26=0x3e
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmaccu.vv:
    opcode:
    - vwsmaccu.vv
    - 31..26=0x3c
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmaccu.vx:
    opcode:
    - vwsmaccu.vx
    - 31..26=0x3c
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsmaccus.vx:
    opcode:
    - vwsmaccus.vx
    - 31..26=0x3f
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_desc: v
    main_id: "#_introduction"
    desc:
      v:
        "#_introduction":
          text: []
  vwsub.vv:
    opcode:
    - vwsub.vv
    - 31..26=0x33
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsub.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsub
          - vwsub.w
  vwsub.vx:
    opcode:
    - vwsub.vx
    - 31..26=0x33
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsub.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsub
          - vwsub.w
  vwsub.wv:
    opcode:
    - vwsub.wv
    - 31..26=0x37
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsub.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsub
          - vwsub.w
  vwsub.wx:
    opcode:
    - vwsub.wx
    - 31..26=0x37
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsub.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsub.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsub.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsub
          - vwsub.w
  vwsubu.vv:
    opcode:
    - vwsubu.vv
    - 31..26=0x32
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsubu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsubu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsubu
          - vwsubu.w
  vwsubu.vx:
    opcode:
    - vwsubu.vx
    - 31..26=0x32
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsubu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsubu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsubu
          - vwsubu.w
  vwsubu.wv:
    opcode:
    - vwsubu.wv
    - 31..26=0x36
    - vm
    - vs2
    - vs1
    - 14..12=0x2
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *14
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsubu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsubu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsubu
          - vwsubu.w
  vwsubu.wx:
    opcode:
    - vwsubu.wx
    - 31..26=0x36
    - vm
    - vs2
    - rs1
    - 14..12=0x6
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_widening_integer_addsubtract"
    desc:
      v:
        "#_vector_widening_integer_addsubtract":
          text:
          - 'vwsubu.vv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.vx  vd, vs2, rs1, vm  # vector-scalar'
          - 'vwsubu.wv  vd, vs2, vs1, vm  # vector-vector'
          - 'vwsubu.wx  vd, vs2, rs1, vm  # vector-scalar'
        "#_vector_instruction_listing":
          text:
          - vwsubu
          - vwsubu.w
  vxor.vi:
    opcode:
    - vxor.vi
    - 31..26=0x0b
    - vm
    - vs2
    - simm5
    - 14..12=0x3
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *13
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - Note vxor vnot.v vd,vs,vm = vxor.vi vd,vs,-1,vm
          - 'vxor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vxor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vxor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vxor
  vxor.vv:
    opcode:
    - vxor.vv
    - 31..26=0x0b
    - vm
    - vs2
    - rs1
    - 14..12=0x0
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - Note vxor vnot.v vd,vs,vm = vxor.vi vd,vs,-1,vm
          - 'vxor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vxor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vxor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vxor
  vxor.vx:
    opcode:
    - vxor.vx
    - 31..26=0x0b
    - vm
    - vs2
    - rs1
    - 14..12=0x4
    - vd
    - 6..0=0x57
    opcode_group: opcodes-rvv
    opcode_args: *12
    main_url_base: "/riscv-v-spec/v1.0//v-spec.html"
    main_desc: v
    main_id: "#_vector_bitwise_logical_instructions"
    desc:
      v:
        "#_vector_bitwise_logical_instructions":
          text:
          - Note vxor vnot.v vd,vs,vm = vxor.vi vd,vs,-1,vm
          - 'vxor.vv vd, vs2, vs1, vm    # Vector-vector'
          - 'vxor.vx vd, vs2, rs1, vm    # vector-scalar'
          - 'vxor.vi vd, vs2, imm, vm    # vector-immediate'
        "#_vector_instruction_listing":
          text:
          - vxor
  wfi:
    opcode:
    - wfi
    - 11..7=0
    - 19..15=0
    - 31..20=0x105
    - 14..12=0
    - 6..2=0x1C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *1
    main_url_base: "/riscv-priv-isa-manual/Priv-v1.12/machine.html"
    main_desc: machine
    main_id: "#virt-control"
    desc:
      machine:
        "#virt-control":
          text:
          - "&Acirc;&nbsp;field that supports intercepting the WFI instruction (see
            Section&Acirc;&nbsp;"
          - When TW=0, the WFI instruction may execute in lower privilege modes when
            not prevented for some other reason
          - When TW=1, then if WFI is executed in any less-privileged mode, and it
            does not complete within an implementation-specific, bounded time limit,
            the WFI instruction causes an illegal instruction exception
          - The time limit may always be 0, in which case WFI always causes an illegal
            instruction exception in less-privileged modes when TW=1. TW is read-only
            0 when there are no modes less privileged than M.
          - Trapping the WFI instruction can trigger a world switch to another guest
            OS, rather than wastefully idling in the current guest.
          - When S-mode is implemented, then executing WFI in U-mode causes an illegal
            instruction exception, unless it completes within an implementation-specific,
            bounded time limit
          - A future revision of this specification might add a feature that allows
            S-mode to selectively permit WFI in U-mode
        "#wfi":
          text:
          - The Wait for Interrupt instruction (WFI) provides a hint to the implementation
            that the current hart can be stalled until an interrupt might need servicing
          - Execution of the WFI instruction can also be used to inform the hardware
            platform that suitable interrupts should preferentially be routed to this
            hart
          - WFI is available in all privileged modes, and optionally available to
            U-mode
          - The following instruction takes the interrupt trap so that a simple return
            from the trap handler will execute code after the WFI instruction.
          - The purpose of the WFI instruction is to provide a hint to the implementation,
            and so a legal implementation is to simply implement WFI as a NOP.
          - If the implementation does not stall the hart on execution of the instruction,
            then the interrupt will be taken on some instruction in the idle loop
            containing the WFI, and on a simple return from the handler, the idle
            loop will resume execution.
          - The WFI instruction can also be executed when interrupts are disabled
          - The operation of WFI must be unaffected by the global interrupt bits in
          - "+ 4, and software must determine what action to take, including looping
            back to repeat the WFI if there was no actionable event."
          - By allowing wakeup when interrupts are disabled, an alternate entry point
            to an interrupt handler can be called that does not require saving the
            current context, as the current context can be saved or discarded before
            the WFI is executed.
          - As implementations are free to implement WFI as a NOP, software must explicitly
            check for any relevant pending but disabled interrupts in the code following
            an WFI, and should loop back to the WFI if no suitable interrupt was detected
          - The operation of WFI is unaffected by the delegation register settings.
          - WFI is defined so that an implementation can trap into a higher privilege
            mode, either immediately on encountering the WFI or after some interval
            to initiate a machine-mode transition to a lower power state, for example.
      hypervisor:
        "#hypervisor-status-register-hstatus":
          text:
          - ".TW=0), an attempt in VS-mode to execute WFI raises a virtual instruction
            exception if the WFI does not complete within an implementation-specific,
            bounded time limit"
        "#trap-cause-codes":
          text:
          - in VU-mode, attempts to execute WFI when
          - in VS-mode, attempts to execute WFI when
  xor:
    opcode:
    - xor
    - rd
    - rs1
    - rs2
    - 31..25=0
    - 14..12=4
    - 6..2=0x0C
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *6
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
        "#integer-register-register-operations":
          text:
          - AND, OR, and XOR perform bitwise logical operations.
      a:
        "#sec:amo":
          text:
          - The operations supported are swap, integer add, bitwise AND, bitwise OR,
            bitwise XOR, and signed and unsigned integer maximum and minimum
      f:
        "#single-precision-floating-point-conversion-and-move-instructions":
          text:
          - "For FSGNJ, the result&acirc;\x80\x99s sign bit is rs2 &acirc;\x80\x99s
            sign bit; for FSGNJN, the result&acirc;\x80\x99s sign bit is the opposite
            of rs2 &acirc;\x80\x99s sign bit; and for FSGNJX, the sign bit is the
            XOR of the sign bits of rs1 and rs2"
      c:
        "#integer-register-register-operations":
          text:
          - "C.XOR computes the bitwise XOR of the values in registers rd&acirc;\x80\x86
            &acirc;\x80&sup2; rs2&acirc;\x80\x86 &acirc;\x80&sup2;"
  xori:
    opcode:
    - xori
    - rd
    - rs1
    - imm12
    - 14..12=4
    - 6..2=0x04
    - 1..0=3
    opcode_group: opcodes
    opcode_args: *2
    main_url_base: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    main_desc: rv32
    main_id: "#integer-register-immediate-instructions"
    desc:
      rv32:
        "#integer-register-immediate-instructions":
          text:
          - ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and
            XOR on register rs1 and the sign-extended 12-bit immediate and place the
            result in rd
          - Note, XORI rd, rs1, -1 rs1 (assembler pseudoinstruction NOT rd, rs ).
groups:
  opcodes:
  - add
  - addi
  - addiw
  - addw
  - amoadd.d
  - amoadd.w
  - amoand.d
  - amoand.w
  - amomax.d
  - amomax.w
  - amomaxu.d
  - amomaxu.w
  - amomin.d
  - amomin.w
  - amominu.d
  - amominu.w
  - amoor.d
  - amoor.w
  - amoswap.d
  - amoswap.w
  - amoxor.d
  - amoxor.w
  - and
  - andi
  - auipc
  - beq
  - bge
  - bgeu
  - blt
  - bltu
  - bne
  - csrrc
  - csrrci
  - csrrs
  - csrrsi
  - csrrw
  - csrrwi
  - div
  - divu
  - divuw
  - divw
  - dret
  - ebreak
  - ecall
  - fadd.d
  - fadd.q
  - fadd.s
  - fclass.d
  - fclass.q
  - fclass.s
  - fcvt.d.l
  - fcvt.d.lu
  - fcvt.d.q
  - fcvt.d.s
  - fcvt.d.w
  - fcvt.d.wu
  - fcvt.l.d
  - fcvt.l.q
  - fcvt.l.s
  - fcvt.lu.d
  - fcvt.lu.q
  - fcvt.lu.s
  - fcvt.q.d
  - fcvt.q.l
  - fcvt.q.lu
  - fcvt.q.s
  - fcvt.q.w
  - fcvt.q.wu
  - fcvt.s.d
  - fcvt.s.l
  - fcvt.s.lu
  - fcvt.s.q
  - fcvt.s.w
  - fcvt.s.wu
  - fcvt.w.d
  - fcvt.w.q
  - fcvt.w.s
  - fcvt.wu.d
  - fcvt.wu.q
  - fcvt.wu.s
  - fdiv.d
  - fdiv.q
  - fdiv.s
  - fence
  - fence.i
  - feq.d
  - feq.q
  - feq.s
  - fld
  - fle.d
  - fle.q
  - fle.s
  - flq
  - flt.d
  - flt.q
  - flt.s
  - flw
  - fmadd.d
  - fmadd.q
  - fmadd.s
  - fmax.d
  - fmax.q
  - fmax.s
  - fmin.d
  - fmin.q
  - fmin.s
  - fmsub.d
  - fmsub.q
  - fmsub.s
  - fmul.d
  - fmul.q
  - fmul.s
  - fmv.d.x
  - fmv.q.x
  - fmv.w.x
  - fmv.x.d
  - fmv.x.q
  - fmv.x.w
  - fnmadd.d
  - fnmadd.q
  - fnmadd.s
  - fnmsub.d
  - fnmsub.q
  - fnmsub.s
  - fsd
  - fsgnj.d
  - fsgnj.q
  - fsgnj.s
  - fsgnjn.d
  - fsgnjn.q
  - fsgnjn.s
  - fsgnjx.d
  - fsgnjx.q
  - fsgnjx.s
  - fsq
  - fsqrt.d
  - fsqrt.q
  - fsqrt.s
  - fsub.d
  - fsub.q
  - fsub.s
  - fsw
  - hfence.bvma
  - hfence.gvma
  - jal
  - jalr
  - lb
  - lbu
  - ld
  - lh
  - lhu
  - lr.d
  - lr.w
  - lui
  - lw
  - lwu
  - mret
  - mul
  - mulh
  - mulhsu
  - mulhu
  - mulw
  - or
  - ori
  - rem
  - remu
  - remuw
  - remw
  - sb
  - sc.d
  - sc.w
  - sd
  - sfence.vma
  - sh
  - sll
  - slli
  - slliw
  - sllw
  - slt
  - slti
  - sltiu
  - sltu
  - sra
  - srai
  - sraiw
  - sraw
  - sret
  - srl
  - srli
  - srliw
  - srlw
  - sub
  - subw
  - sw
  - uret
  - wfi
  - xor
  - xori
  opcodes-custom:
  - "@custom0"
  - "@custom0.rd"
  - "@custom0.rd.rs1"
  - "@custom0.rd.rs1.rs2"
  - "@custom0.rs1"
  - "@custom0.rs1.rs2"
  - "@custom1"
  - "@custom1.rd"
  - "@custom1.rd.rs1"
  - "@custom1.rd.rs1.rs2"
  - "@custom1.rs1"
  - "@custom1.rs1.rs2"
  - "@custom2"
  - "@custom2.rd"
  - "@custom2.rd.rs1"
  - "@custom2.rd.rs1.rs2"
  - "@custom2.rs1"
  - "@custom2.rs1.rs2"
  - "@custom3"
  - "@custom3.rd"
  - "@custom3.rd.rs1"
  - "@custom3.rd.rs1.rs2"
  - "@custom3.rs1"
  - "@custom3.rs1.rs2"
  opcodes-pseudo:
  - "@fence.tso"
  - "@fmv.s.x"
  - "@fmv.x.s"
  - "@frcsr"
  - "@frflags"
  - "@frrm"
  - "@fscsr"
  - "@fsflags"
  - "@fsflagsi"
  - "@fsrm"
  - "@fsrmi"
  - "@rdcycle"
  - "@rdcycleh"
  - "@rdinstret"
  - "@rdinstreth"
  - "@rdtime"
  - "@rdtimeh"
  - "@sbreak"
  - "@scall"
  - "@slli.rv32"
  - "@srai.rv32"
  - "@srli.rv32"
  opcodes-rvc:
  - c.add
  - c.addi
  - c.addi4spn
  - c.addw
  - c.and
  - c.andi
  - c.beqz
  - c.bnez
  - c.fld
  - c.fldsp
  - c.flw
  - c.flwsp
  - c.fsd
  - c.fsdsp
  - c.fsw
  - c.fswsp
  - c.j
  - c.jal
  - c.li
  - c.lui
  - c.lw
  - c.lwsp
  - c.mv
  - c.or
  - c.slli
  - c.srai
  - c.srli
  - c.sub
  - c.subw
  - c.sw
  - c.swsp
  - c.xor
  opcodes-rvc-pseudo:
  - "@c.addi16sp"
  - "@c.addiw"
  - "@c.ebreak"
  - "@c.jalr"
  - "@c.jr"
  - "@c.ld"
  - "@c.ldsp"
  - "@c.lq"
  - "@c.lqsp"
  - "@c.nop"
  - "@c.sd"
  - "@c.sdsp"
  - "@c.sq"
  - "@c.sqsp"
  opcodes-rvv:
  - vaadd.vi
  - vaadd.vv
  - vaadd.vx
  - vadc.vim
  - vadc.vvm
  - vadc.vxm
  - vadd.vi
  - vadd.vv
  - vadd.vx
  - vand.vi
  - vand.vv
  - vand.vx
  - vasub.vv
  - vasub.vx
  - vcompress.vm
  - vdiv.vv
  - vdiv.vx
  - vdivu.vv
  - vdivu.vx
  - vdot.vv
  - vdotu.vv
  - vext.x.v
  - vfadd.vf
  - vfadd.vv
  - vfdiv.vf
  - vfdiv.vv
  - vfdot.vv
  - vfeq.vf
  - vfeq.vv
  - vfge.vf
  - vfgt.vf
  - vfle.vf
  - vfle.vv
  - vflt.vf
  - vflt.vv
  - vfmacc.vf
  - vfmacc.vv
  - vfmadd.vf
  - vfmadd.vv
  - vfmax.vf
  - vfmax.vv
  - vfmerge.vfm
  - vfmin.vf
  - vfmin.vv
  - vfmsac.vf
  - vfmsac.vv
  - vfmsub.vf
  - vfmsub.vv
  - vfmul.vf
  - vfmul.vv
  - vfmv.f.s
  - vfmv.s.f
  - vfmv.v.f
  - vfne.vf
  - vfne.vv
  - vfnmacc.vf
  - vfnmacc.vv
  - vfnmadd.vf
  - vfnmadd.vv
  - vfnmsac.vf
  - vfnmsac.vv
  - vfnmsub.vf
  - vfnmsub.vv
  - vford.vf
  - vford.vv
  - vfrdiv.vf
  - vfredmax.vs
  - vfredmin.vs
  - vfredosum.vs
  - vfredsum.vs
  - vfsgnj.vf
  - vfsgnj.vv
  - vfsgnjn.vf
  - vfsgnjn.vv
  - vfsgnjx.vf
  - vfsgnjx.vv
  - vfsub.vf
  - vfsub.vv
  - vfunary0.vv
  - vfunary1.vv
  - vfwadd.vf
  - vfwadd.vv
  - vfwadd.wf
  - vfwadd.wv
  - vfwmacc.vf
  - vfwmacc.vv
  - vfwmsac.vf
  - vfwmsac.vv
  - vfwmul.vf
  - vfwmul.vv
  - vfwnmacc.vf
  - vfwnmacc.vv
  - vfwnmsac.vf
  - vfwnmsac.vv
  - vfwredosum.vs
  - vfwredsum.vs
  - vfwsub.vf
  - vfwsub.vv
  - vfwsub.wf
  - vfwsub.wv
  - vid.v
  - viota.m
  - vlb.v
  - vlbff.v
  - vlbu.v
  - vlbuff.v
  - vle.v
  - vleff.v
  - vlh.v
  - vlhff.v
  - vlhu.v
  - vlhuff.v
  - vlsb.v
  - vlsbu.v
  - vlse.v
  - vlsh.v
  - vlshu.v
  - vlsw.v
  - vlswu.v
  - vlw.v
  - vlwff.v
  - vlwu.v
  - vlwuff.v
  - vlxb.v
  - vlxbu.v
  - vlxe.v
  - vlxh.v
  - vlxhu.v
  - vlxw.v
  - vlxwu.v
  - vmacc.vv
  - vmacc.vx
  - vmadc.vim
  - vmadc.vvm
  - vmadc.vxm
  - vmadd.vv
  - vmadd.vx
  - vmand.mm
  - vmandnot.mm
  - vmax.vv
  - vmax.vx
  - vmaxu.vv
  - vmaxu.vx
  - vmerge.vim
  - vmerge.vvm
  - vmerge.vxm
  - vmfirst.m
  - vmin.vv
  - vmin.vx
  - vminu.vv
  - vminu.vx
  - vmnand.mm
  - vmnor.mm
  - vmor.mm
  - vmornot.mm
  - vmpopc.m
  - vmsbc.vvm
  - vmsbc.vxm
  - vmsbf.m
  - vmsif.m
  - vmsof.m
  - vmul.vv
  - vmul.vx
  - vmulh.vv
  - vmulh.vx
  - vmulhsu.vv
  - vmulhsu.vx
  - vmulhu.vv
  - vmulhu.vx
  - vmv.s.x
  - vmv.v.i
  - vmv.v.v
  - vmv.v.x
  - vmxnor.mm
  - vmxor.mm
  - vnclip.vi
  - vnclip.vv
  - vnclip.vx
  - vnclipu.vi
  - vnclipu.vv
  - vnclipu.vx
  - vnmsac.vv
  - vnmsac.vx
  - vnmsub.vv
  - vnmsub.vx
  - vnsra.vi
  - vnsra.vv
  - vnsra.vx
  - vnsrl.vi
  - vnsrl.vv
  - vnsrl.vx
  - vor.vi
  - vor.vv
  - vor.vx
  - vredand.vs
  - vredmax.vs
  - vredmaxu.vs
  - vredmin.vs
  - vredminu.vs
  - vredor.vs
  - vredsum.vs
  - vredxor.vs
  - vrem.vv
  - vrem.vx
  - vremu.vv
  - vremu.vx
  - vrgather.vi
  - vrgather.vv
  - vrgather.vx
  - vrsub.vi
  - vrsub.vx
  - vsadd.vi
  - vsadd.vv
  - vsadd.vx
  - vsaddu.vi
  - vsaddu.vv
  - vsaddu.vx
  - vsb.v
  - vsbc.vvm
  - vsbc.vxm
  - vse.v
  - vseq.vi
  - vseq.vv
  - vseq.vx
  - vsetvl
  - vsetvli
  - vsgt.vi
  - vsgt.vx
  - vsgtu.vi
  - vsgtu.vx
  - vsh.v
  - vsle.vi
  - vsle.vv
  - vsle.vx
  - vsleu.vi
  - vsleu.vv
  - vsleu.vx
  - vslide1down.vx
  - vslide1up.vx
  - vslidedown.vi
  - vslidedown.vx
  - vslideup.vi
  - vslideup.vx
  - vsll.vi
  - vsll.vv
  - vsll.vx
  - vslt.vv
  - vslt.vx
  - vsltu.vv
  - vsltu.vx
  - vsmul.vv
  - vsmul.vx
  - vsne.vi
  - vsne.vv
  - vsne.vx
  - vsra.vi
  - vsra.vv
  - vsra.vx
  - vsrl.vi
  - vsrl.vv
  - vsrl.vx
  - vssb.v
  - vsse.v
  - vssh.v
  - vssra.vi
  - vssra.vv
  - vssra.vx
  - vssrl.vi
  - vssrl.vv
  - vssrl.vx
  - vssub.vv
  - vssub.vx
  - vssubu.vv
  - vssubu.vx
  - vssw.v
  - vsub.vv
  - vsub.vx
  - vsuxb.v
  - vsuxe.v
  - vsuxh.v
  - vsuxw.v
  - vsw.v
  - vsxb.v
  - vsxe.v
  - vsxh.v
  - vsxw.v
  - vwadd.vv
  - vwadd.vx
  - vwadd.wv
  - vwadd.wx
  - vwaddu.vv
  - vwaddu.vx
  - vwaddu.wv
  - vwaddu.wx
  - vwmacc.vv
  - vwmacc.vx
  - vwmaccsu.vv
  - vwmaccsu.vx
  - vwmaccu.vv
  - vwmaccu.vx
  - vwmaccus.vx
  - vwmul.vv
  - vwmul.vx
  - vwmulsu.vv
  - vwmulsu.vx
  - vwmulu.vv
  - vwmulu.vx
  - vwredsum.vs
  - vwredsumu.vs
  - vwsmacc.vv
  - vwsmacc.vx
  - vwsmaccsu.vv
  - vwsmaccsu.vx
  - vwsmaccu.vv
  - vwsmaccu.vx
  - vwsmaccus.vx
  - vwsub.vv
  - vwsub.vx
  - vwsub.wv
  - vwsub.wx
  - vwsubu.vv
  - vwsubu.vx
  - vwsubu.wv
  - vwsubu.wx
  - vxor.vi
  - vxor.vv
  - vxor.vx
sections:
  a:
    "#sec:amo":
    - amoadd.d
    - amoadd.w
    - amoand.d
    - amoand.w
    - amomax.d
    - amomax.w
    - amomaxu.d
    - amomaxu.w
    - amomin.d
    - amomin.w
    - amominu.d
    - amominu.w
    - amoor.d
    - amoor.w
    - amoswap.d
    - amoswap.w
    - amoxor.d
    - amoxor.w
    "#sec:lrsc":
    - lr.d
    - lr.w
    - sc.d
    - sc.w
  b: {}
  c:
    "#control-transfer-instructions":
    - "@c.ebreak"
    - "@c.jalr"
    - "@c.jr"
    - c.beqz
    - c.bnez
    - c.j
    - c.jal
    "#integer-constant-generation-instructions":
    - "@c.addi16sp"
    - c.li
    - c.lui
    "#integer-register-immediate-operations":
    - "@c.addiw"
    - "@c.nop"
    - c.addi
    - c.addi4spn
    - c.andi
    - c.slli
    - c.srai
    - c.srli
    "#integer-register-register-operations":
    - c.add
    - c.addw
    - c.and
    - c.mv
    - c.or
    - c.sub
    - c.subw
    - c.xor
    "#register-based-loads-and-stores":
    - "@c.ld"
    - "@c.lq"
    - "@c.sd"
    - "@c.sq"
    - c.fld
    - c.flw
    - c.fsd
    - c.fsw
    - c.lw
    - c.sw
    "#stack-pointer-based-loads-and-stores":
    - "@c.ldsp"
    - "@c.lqsp"
    - "@c.sdsp"
    - "@c.sqsp"
    - c.fldsp
    - c.flwsp
    - c.fsdsp
    - c.fswsp
    - c.lwsp
    - c.swsp
  counters:
    "#zicntr-standard-extension-for-base-counters-and-timers":
    - "@rdcycle"
    - "@rdcycleh"
    - "@rdinstret"
    - "@rdinstreth"
    - "@rdtime"
    - "@rdtimeh"
  csr:
    "#csr-instructions":
    - csrrc
    - csrrci
    - csrrs
    - csrrsi
    - csrrw
    - csrrwi
  custom:
    "#":
    - "@custom0"
    - "@custom0.rd"
    - "@custom0.rd.rs1"
    - "@custom0.rd.rs1.rs2"
    - "@custom0.rs1"
    - "@custom0.rs1.rs2"
    - "@custom1"
    - "@custom1.rd"
    - "@custom1.rd.rs1"
    - "@custom1.rd.rs1.rs2"
    - "@custom1.rs1"
    - "@custom1.rs1.rs2"
    - "@custom2"
    - "@custom2.rd"
    - "@custom2.rd.rs1"
    - "@custom2.rd.rs1.rs2"
    - "@custom2.rs1"
    - "@custom2.rs1.rs2"
    - "@custom3"
    - "@custom3.rd"
    - "@custom3.rd.rs1"
    - "@custom3.rd.rs1.rs2"
    - "@custom3.rs1"
    - "@custom3.rs1.rs2"
  d:
    "#double-precision-floating-point-classify-instruction":
    - fclass.d
    "#double-precision-floating-point-conversion-and-move-instructions":
    - fcvt.d.l
    - fcvt.d.lu
    - fcvt.d.s
    - fcvt.d.w
    - fcvt.d.wu
    - fcvt.l.d
    - fcvt.lu.d
    - fcvt.s.d
    - fcvt.w.d
    - fcvt.wu.d
    - fmv.d.x
    - fmv.x.d
    - fsgnj.d
    - fsgnjn.d
    - fsgnjx.d
    "#fld_fsd":
    - fld
    - fsd
    "#sec:single-float-compute":
    - fadd.d
    - fdiv.d
    - fmadd.d
    - fmax.d
    - fmin.d
    - fmsub.d
    - fmul.d
    - fnmadd.d
    - fnmsub.d
    - fsqrt.d
    - fsub.d
    "#single-precision-floating-point-compare-instructions":
    - feq.d
    - fle.d
    - flt.d
  f:
    "#floating-point-control-and-status-register":
    - "@frcsr"
    - "@frflags"
    - "@frrm"
    - "@fscsr"
    - "@fsflags"
    - "@fsrm"
    "#sec:single-float-compute":
    - fadd.s
    - fdiv.s
    - fmadd.s
    - fmax.s
    - fmin.s
    - fmsub.s
    - fmul.s
    - fnmadd.s
    - fnmsub.s
    - fsqrt.s
    - fsub.s
    "#single-precision-floating-point-classify-instruction":
    - fclass.s
    "#single-precision-floating-point-compare-instructions":
    - feq.s
    - fle.s
    - flt.s
    "#single-precision-floating-point-conversion-and-move-instructions":
    - "@fmv.s.x"
    - "@fmv.x.s"
    - fcvt.l.s
    - fcvt.lu.s
    - fcvt.s.l
    - fcvt.s.lu
    - fcvt.s.w
    - fcvt.s.wu
    - fcvt.w.s
    - fcvt.wu.s
    - fmv.w.x
    - fmv.x.w
    - fsgnj.s
    - fsgnjn.s
    - fsgnjx.s
    "#single-precision-load-and-store-instructions":
    - flw
    - fsw
  hypervisor: {}
  j: {}
  m:
    "#division-operations":
    - div
    - divu
    - divuw
    - divw
    - rem
    - remu
    - remuw
    - remw
    "#multiplication-operations":
    - mul
    - mulh
    - mulhsu
    - mulhu
    - mulw
  machine:
    "#privstack":
    - mret
    - sret
    "#virt-control":
    - wfi
  p: {}
  q:
    "#quad-precision-convert-and-move-instructions":
    - fcvt.d.q
    - fcvt.l.q
    - fcvt.lu.q
    - fcvt.q.d
    - fcvt.q.l
    - fcvt.q.lu
    - fcvt.q.s
    - fcvt.q.w
    - fcvt.q.wu
    - fcvt.s.q
    - fcvt.w.q
    - fcvt.wu.q
    - fsgnj.q
    - fsgnjn.q
    - fsgnjx.q
    "#quad-precision-floating-point-classify-instruction":
    - fclass.q
    "#quad-precision-load-and-store-instructions":
    - flq
    - fsq
    "#sec:single-float-compute":
    - fadd.q
    - fdiv.q
    - fmadd.q
    - fmax.q
    - fmin.q
    - fmsub.q
    - fmul.q
    - fnmadd.q
    - fnmsub.q
    - fsqrt.q
    - fsub.q
    "#single-precision-floating-point-compare-instructions":
    - feq.q
    - fle.q
    - flt.q
  rv128:
    "#rv128":
    - fmv.q.x
    - fmv.x.q
  rv32:
    "#conditional-branches":
    - beq
    - bge
    - bgeu
    - blt
    - bltu
    - bne
    "#environment-call-and-breakpoints":
    - "@sbreak"
    - "@scall"
    "#integer-computational-instructions":
    - add
    - addw
    "#integer-register-immediate-instructions":
    - addi
    - and
    - andi
    - auipc
    - lui
    - or
    - ori
    - slli
    - slti
    - sltiu
    - srai
    - srli
    - xor
    - xori
    "#integer-register-register-operations":
    - sll
    - slt
    - sltu
    - sra
    - srl
    - sub
    "#programmers-model-for-base-integer-isa":
    - jal
    - jalr
    "#rv32":
    - ebreak
    - ecall
    - fence
    "#sec:rv32:ldst":
    - lb
    - lbu
    - lh
    - lhu
    - lw
    - sb
    - sh
    - sw
  rv32e: {}
  rv64:
    "#integer-computational-instructions":
    - subw
    "#integer-register-immediate-instructions":
    - addiw
    - ld
    - slliw
    - sraiw
    - srliw
    "#integer-register-register-operations":
    - sllw
    - sraw
    - srlw
    "#load-and-store-instructions":
    - lwu
    - sd
  rvwmo:
    "#ch:memorymodel":
    - sfence.vma
  supervisor:
    "#svinval":
    - hfence.gvma
  v:
    "#_introduction":
    - vdot.vv
    - vdotu.vv
    - vext.x.v
    - vfdot.vv
    - vfeq.vf
    - vfeq.vv
    - vfge.vf
    - vfgt.vf
    - vfle.vf
    - vfle.vv
    - vflt.vf
    - vflt.vv
    - vfne.vf
    - vfne.vv
    - vford.vf
    - vford.vv
    - vfunary0.vv
    - vfunary1.vv
    - vlb.v
    - vlbff.v
    - vlbu.v
    - vlbuff.v
    - vle.v
    - vleff.v
    - vlh.v
    - vlhff.v
    - vlhu.v
    - vlhuff.v
    - vlsb.v
    - vlsbu.v
    - vlse.v
    - vlsh.v
    - vlshu.v
    - vlsw.v
    - vlswu.v
    - vlw.v
    - vlwff.v
    - vlwu.v
    - vlwuff.v
    - vlxb.v
    - vlxbu.v
    - vlxe.v
    - vlxh.v
    - vlxhu.v
    - vlxw.v
    - vlxwu.v
    - vmfirst.m
    - vmpopc.m
    - vsb.v
    - vse.v
    - vseq.vi
    - vseq.vv
    - vseq.vx
    - vsgt.vi
    - vsgt.vx
    - vsgtu.vi
    - vsgtu.vx
    - vsh.v
    - vsle.vi
    - vsle.vv
    - vsle.vx
    - vsleu.vi
    - vsleu.vv
    - vsleu.vx
    - vslt.vv
    - vslt.vx
    - vsltu.vv
    - vsltu.vx
    - vsne.vi
    - vsne.vv
    - vsne.vx
    - vssb.v
    - vsse.v
    - vssh.v
    - vssw.v
    - vsuxb.v
    - vsuxe.v
    - vsuxh.v
    - vsuxw.v
    - vsw.v
    - vsxb.v
    - vsxe.v
    - vsxh.v
    - vsxw.v
    - vwsmacc.vv
    - vwsmacc.vx
    - vwsmaccsu.vv
    - vwsmaccsu.vx
    - vwsmaccu.vv
    - vwsmaccu.vx
    - vwsmaccus.vx
    "#_state_of_vector_extension_at_reset":
    - vsetvl
    "#_vector_bitwise_logical_instructions":
    - vand.vi
    - vand.vv
    - vand.vx
    - vor.vi
    - vor.vv
    - vor.vx
    - vxor.vi
    - vxor.vv
    - vxor.vx
    "#_vector_compress_instruction":
    - vcompress.vm
    "#_vector_element_index_instruction":
    - vid.v
    "#_vector_floating_point_compare_instructions":
    - vmand.mm
    "#_vector_floating_point_merge_instruction":
    - vfmerge.vfm
    "#_vector_floating_point_minmax_instructions":
    - vfmax.vf
    - vfmax.vv
    - vfmin.vf
    - vfmin.vv
    "#_vector_floating_point_move_instruction":
    - vfmv.f.s
    - vfmv.s.f
    - vfmv.v.f
    "#_vector_floating_point_sign_injection_instructions":
    - vfsgnj.vf
    - vfsgnj.vv
    - vfsgnjn.vf
    - vfsgnjn.vv
    - vfsgnjx.vf
    - vfsgnjx.vv
    "#_vector_instruction_listing":
    - vmornot.mm
    "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
    - vadc.vim
    - vadc.vvm
    - vadc.vxm
    - vmadc.vim
    - vmadc.vvm
    - vmadc.vxm
    - vmsbc.vvm
    - vmsbc.vxm
    - vsbc.vvm
    - vsbc.vxm
    "#_vector_integer_compare_instructions":
    - vmnand.mm
    - vmor.mm
    - vmxor.mm
    "#_vector_integer_divide_instructions":
    - vdiv.vv
    - vdiv.vx
    - vdivu.vv
    - vdivu.vx
    - vrem.vv
    - vrem.vx
    - vremu.vv
    - vremu.vx
    "#_vector_integer_merge_instructions":
    - vmerge.vim
    - vmerge.vvm
    - vmerge.vxm
    "#_vector_integer_minmax_instructions":
    - vmax.vv
    - vmax.vx
    - vmaxu.vv
    - vmaxu.vx
    - vmin.vv
    - vmin.vx
    - vminu.vv
    - vminu.vx
    "#_vector_integer_move_instructions":
    - vmv.s.x
    - vmv.v.i
    - vmv.v.v
    - vmv.v.x
    "#_vector_iota_instruction":
    - viota.m
    "#_vector_narrowing_fixed_point_clip_instructions":
    - vnclip.vi
    - vnclip.vv
    - vnclip.vx
    - vnclipu.vi
    - vnclipu.vv
    - vnclipu.vx
    "#_vector_register_gather_instructions":
    - vrgather.vi
    - vrgather.vv
    - vrgather.vx
    "#_vector_register_grouping_vlmul20":
    - vsetvli
    "#_vector_single_width_averaging_add_and_subtract":
    - vaadd.vi
    - vaadd.vv
    - vaadd.vx
    - vasub.vv
    - vasub.vx
    "#_vector_single_width_floating_point_addsubtract_instructions":
    - vfadd.vf
    - vfadd.vv
    - vfsub.vf
    - vfsub.vv
    "#_vector_single_width_floating_point_fused_multiply_add_instructions":
    - vfmacc.vf
    - vfmacc.vv
    - vfmadd.vf
    - vfmadd.vv
    - vfmsac.vf
    - vfmsac.vv
    - vfmsub.vf
    - vfmsub.vv
    - vfnmacc.vf
    - vfnmacc.vv
    - vfnmadd.vf
    - vfnmadd.vv
    - vfnmsac.vf
    - vfnmsac.vv
    - vfnmsub.vf
    - vfnmsub.vv
    "#_vector_single_width_floating_point_multiplydivide_instructions":
    - vfdiv.vf
    - vfdiv.vv
    - vfmul.vf
    - vfmul.vv
    - vfrdiv.vf
    "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
    - vsmul.vv
    - vsmul.vx
    "#_vector_single_width_integer_add_and_subtract":
    - vadd.vi
    - vadd.vv
    - vadd.vx
    - vrsub.vi
    - vrsub.vx
    - vsub.vv
    - vsub.vx
    "#_vector_single_width_integer_multiply_add_instructions":
    - vmacc.vv
    - vmacc.vx
    - vmadd.vv
    - vmadd.vx
    - vnmsac.vv
    - vnmsac.vx
    - vnmsub.vv
    - vnmsub.vx
    "#_vector_single_width_integer_multiply_instructions":
    - vmul.vv
    - vmul.vx
    - vmulh.vv
    - vmulh.vx
    - vmulhsu.vv
    - vmulhsu.vx
    - vmulhu.vv
    - vmulhu.vx
    "#_vector_single_width_saturating_add_and_subtract":
    - vsadd.vi
    - vsadd.vv
    - vsadd.vx
    - vsaddu.vi
    - vsaddu.vv
    - vsaddu.vx
    - vssub.vv
    - vssub.vx
    - vssubu.vv
    - vssubu.vx
    "#_vector_single_width_scaling_shift_instructions":
    - vssra.vi
    - vssra.vv
    - vssra.vx
    - vssrl.vi
    - vssrl.vv
    - vssrl.vx
    "#_vector_single_width_shift_instructions":
    - vsll.vi
    - vsll.vv
    - vsll.vx
    - vsra.vi
    - vsra.vv
    - vsra.vx
    "#_vector_slide1down_instruction":
    - vslide1down.vx
    "#_vector_slide1up":
    - vslide1up.vx
    "#_vector_slide_instructions":
    - vslideup.vi
    - vslideup.vx
    "#_vector_widening_floating_point_addsubtract_instructions":
    - vfwadd.vf
    - vfwadd.vv
    - vfwadd.wf
    - vfwadd.wv
    - vfwsub.vf
    - vfwsub.vv
    - vfwsub.wf
    - vfwsub.wv
    "#_vector_widening_floating_point_fused_multiply_add_instructions":
    - vfwmacc.vf
    - vfwmacc.vv
    - vfwmsac.vf
    - vfwmsac.vv
    - vfwnmacc.vf
    - vfwnmacc.vv
    - vfwnmsac.vf
    - vfwnmsac.vv
    "#_vector_widening_floating_point_multiply":
    - vfwmul.vf
    - vfwmul.vv
    "#_vector_widening_integer_addsubtract":
    - vwadd.vv
    - vwadd.vx
    - vwadd.wv
    - vwadd.wx
    - vwaddu.vv
    - vwaddu.vx
    - vwaddu.wv
    - vwaddu.wx
    - vwsub.vv
    - vwsub.vx
    - vwsub.wv
    - vwsub.wx
    - vwsubu.vv
    - vwsubu.vx
    - vwsubu.wv
    - vwsubu.wx
    "#_vector_widening_integer_multiply_add_instructions":
    - vwmacc.vv
    - vwmacc.vx
    - vwmaccsu.vv
    - vwmaccsu.vx
    - vwmaccu.vv
    - vwmaccu.vx
    - vwmaccus.vx
    "#_vector_widening_integer_multiply_instructions":
    - vwmulsu.vv
    - vwmulsu.vx
    - vwmulu.vv
    - vwmulu.vx
    "#_vmsbf_m_set_before_first_mask_bit":
    - vmsif.m
    "#_vmsif_m_set_including_first_mask_bit":
    - vmsof.m
    "#example-stripmine-sew":
    - vsrl.vi
    - vsrl.vv
    - vsrl.vx
    - vwmul.vv
    - vwmul.vx
    "#sec-agnostic":
    - vmsbf.m
    "#sec-inactive-defs":
    - vslidedown.vi
    - vslidedown.vx
    "#sec-mask-register-logical":
    - vmandnot.mm
    - vmnor.mm
    - vmxnor.mm
    "#sec-narrowing":
    - vnsra.vi
    - vnsra.vv
    - vnsra.vx
    "#sec-vec-operands":
    - vnsrl.vi
    - vnsrl.vv
    - vnsrl.vx
    "#sec-vector-float-reduce":
    - vfredmax.vs
    - vfredmin.vs
    - vfredosum.vs
    - vfredsum.vs
    "#sec-vector-float-reduce-widen":
    - vfwredosum.vs
    - vfwredsum.vs
    "#sec-vector-integer-reduce":
    - vredand.vs
    - vredmax.vs
    - vredmaxu.vs
    - vredmin.vs
    - vredminu.vs
    - vredor.vs
    - vredsum.vs
    - vredxor.vs
    "#sec-vector-integer-reduce-widen":
    - vwredsum.vs
    - vwredsumu.vs
  zam: {}
  zfh: {}
  zfinx: {}
  zifencei: {}
  zihintpause: {}
  ztso: {}
sections_labels:
  a:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html"
    "#atomics":
      headers:
      - '"A" Standard Extension for Atomic Instructions, Version 2.1'
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html#atomics"
    "#sec:amo":
      headers:
      - '"A" Standard Extension for Atomic Instructions, Version 2.1'
      - Atomic Memory Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html#sec:amo"
    "#sec:lrsc":
      headers:
      - '"A" Standard Extension for Atomic Instructions, Version 2.1'
      - Load-Reserved/Store-Conditional Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html#sec:lrsc"
    "#sec:lrscseq":
      headers:
      - '"A" Standard Extension for Atomic Instructions, Version 2.1'
      - Eventual Success of Store-Conditional Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html#sec:lrscseq"
    "#specifying-ordering-of-atomic-instructions":
      headers:
      - '"A" Standard Extension for Atomic Instructions, Version 2.1'
      - Specifying Ordering of Atomic Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/a.html#specifying-ordering-of-atomic-instructions"
  b:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/b.html"
    "#sec:bits":
      headers:
      - '"B" Standard Extension for Bit Manipulation, Version 0.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/b.html#sec:bits"
  c:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html"
    "#breakpoint-instruction":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - Breakpoint Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#breakpoint-instruction"
    "#compressed":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#compressed"
    "#compressed-instruction-formats":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Compressed Instruction Formats
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#compressed-instruction-formats"
    "#control-transfer-instructions":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Control Transfer Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#control-transfer-instructions"
    "#defined-illegal-instruction":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - Defined Illegal Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#defined-illegal-instruction"
    "#integer-computational-instructions":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#integer-computational-instructions"
    "#integer-constant-generation-instructions":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - Integer Constant-Generation Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#integer-constant-generation-instructions"
    "#integer-register-immediate-operations":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - Integer Register-Immediate Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#integer-register-immediate-operations"
    "#integer-register-register-operations":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - Integer Register-Register Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#integer-register-register-operations"
    "#load-and-store-instructions":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#load-and-store-instructions"
    "#nop-instruction":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Integer Computational Instructions
      - NOP Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#nop-instruction"
    "#overview":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Overview
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#overview"
    "#register-based-loads-and-stores":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Load and Store Instructions
      - Register-Based Loads and Stores
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#register-based-loads-and-stores"
    "#rvc-instruction-set-listings":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - RVC Instruction Set Listings
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#rvc-instruction-set-listings"
    "#sec:rvc-hints":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - HINT Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#sec:rvc-hints"
    "#stack-pointer-based-loads-and-stores":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Load and Store Instructions
      - Stack-Pointer-Based Loads and Stores
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#stack-pointer-based-loads-and-stores"
    "#usage-of-c-instructions-in-lrsc-sequences":
      headers:
      - '"C" Standard Extension for Compressed Instructions, Version 2.0'
      - Usage of C Instructions in LR/SC Sequences
      url: "/riscv-user-isa-manual/Priv-v1.12/c.html#usage-of-c-instructions-in-lrsc-sequences"
  counters:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/counters.html"
    "#counters":
      headers:
      - Counters
      url: "/riscv-user-isa-manual/Priv-v1.12/counters.html#counters"
    "#zicntr-standard-extension-for-base-counters-and-timers":
      headers:
      - Counters
      - '"Zicntr" Standard Extension for Base Counters and Timers'
      url: "/riscv-user-isa-manual/Priv-v1.12/counters.html#zicntr-standard-extension-for-base-counters-and-timers"
    "#zihpm-standard-extension-for-hardware-performance-counters":
      headers:
      - Counters
      - '"Zihpm" Standard Extension for Hardware Performance Counters'
      url: "/riscv-user-isa-manual/Priv-v1.12/counters.html#zihpm-standard-extension-for-hardware-performance-counters"
  csr:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/csr.html"
    "#csr-access-ordering":
      headers:
      - '"Zicsr", Control and Status Register (CSR) Instructions, Version 2.0'
      - CSR Instructions
      - CSR Access Ordering
      url: "/riscv-user-isa-manual/Priv-v1.12/csr.html#csr-access-ordering"
    "#csr-instructions":
      headers:
      - '"Zicsr", Control and Status Register (CSR) Instructions, Version 2.0'
      - CSR Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/csr.html#csr-instructions"
    "#csrinsts":
      headers:
      - '"Zicsr", Control and Status Register (CSR) Instructions, Version 2.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/csr.html#csrinsts"
  custom:
    "#":
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/"
  d:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html"
    "#d-register-state":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - D Register State
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#d-register-state"
    "#d-standard-extension-for-double-precision-floating-point-version-2.2":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#d-standard-extension-for-double-precision-floating-point-version-2.2"
    "#double-precision-floating-point-classify-instruction":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - Double-Precision Floating-Point Classify Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#double-precision-floating-point-classify-instruction"
    "#double-precision-floating-point-compare-instructions":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - Double-Precision Floating-Point Compare Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#double-precision-floating-point-compare-instructions"
    "#double-precision-floating-point-computational-instructions":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - Double-Precision Floating-Point Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#double-precision-floating-point-computational-instructions"
    "#double-precision-floating-point-conversion-and-move-instructions":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - Double-Precision Floating-Point Conversion and Move Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#double-precision-floating-point-conversion-and-move-instructions"
    "#fld_fsd":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - Double-Precision Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#fld_fsd"
    "#nanboxing":
      headers:
      - '"D" Standard Extension for Double-Precision Floating-Point, Version 2.2'
      - NaN Boxing of Narrower Values
      url: "/riscv-user-isa-manual/Priv-v1.12/d.html#nanboxing"
    "#sec:single-float-compute":
      headers: &22
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Single-Precision Floating-Point Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12//d.html"
    "#single-precision-floating-point-compare-instructions":
      headers: &23
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Single-Precision Floating-Point Compare Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12//d.html"
  f:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html"
    "#f-register-state":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - F Register State
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#f-register-state"
    "#floating-point-control-and-status-register":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Floating-Point Control and Status Register
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#floating-point-control-and-status-register"
    "#nan-generation-and-propagation":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - NaN Generation and Propagation
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#nan-generation-and-propagation"
    "#sec:single-float":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#sec:single-float"
    "#sec:single-float-compute":
      headers: *22
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#sec:single-float-compute"
    "#single-precision-floating-point-classify-instruction":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Single-Precision Floating-Point Classify Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#single-precision-floating-point-classify-instruction"
    "#single-precision-floating-point-compare-instructions":
      headers: *23
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#single-precision-floating-point-compare-instructions"
    "#single-precision-floating-point-conversion-and-move-instructions":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - ''
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#single-precision-floating-point-conversion-and-move-instructions"
    "#single-precision-load-and-store-instructions":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Single-Precision Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#single-precision-load-and-store-instructions"
    "#subnormal-arithmetic":
      headers:
      - '"F" Standard Extension for Single-Precision Floating-Point, Version 2.2'
      - Subnormal Arithmetic
      url: "/riscv-user-isa-manual/Priv-v1.12/f.html#subnormal-arithmetic"
  hypervisor:
    '':
      headers: []
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html"
    "#guest-page-faults":
      headers:
      - Hypervisor Extension, Version 1.0
      - Two-Stage Address Translation
      - Guest-Page Faults
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#guest-page-faults"
    "#hypervisor":
      headers:
      - Hypervisor Extension, Version 1.0
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor"
    "#hypervisor-and-virtual-supervisor-csrs":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-and-virtual-supervisor-csrs"
    "#hypervisor-counter-enable-register-hcounteren":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-counter-enable-register-hcounteren"
    "#hypervisor-environment-configuration-registers-henvcfg-and-henvcfgh":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-environment-configuration-registers-henvcfg-and-henvcfgh"
    "#hypervisor-instructions":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-instructions"
    "#hypervisor-status-register-hstatus":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-status-register-hstatus"
    "#hypervisor-time-delta-registers-htimedelta-htimedeltah":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-time-delta-registers-htimedelta-htimedeltah"
    "#hypervisor-trap-delegation-registers-hedeleg-and-hideleg":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-trap-delegation-registers-hedeleg-and-hideleg"
    "#hypervisor-trap-instruction-register-htinst":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-trap-instruction-register-htinst"
    "#hypervisor-trap-value-register-htval":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-trap-value-register-htval"
    "#hypervisor-virtual-machine-load-and-store-instructions":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor Instructions
      - Hypervisor Virtual-Machine Load and Store Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#hypervisor-virtual-machine-load-and-store-instructions"
    "#machine-interrupt-delegation-register-mideleg":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-interrupt-delegation-register-mideleg"
    "#machine-interrupt-registers-mip-and-mie":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-interrupt-registers-mip-and-mie"
    "#machine-level-csrs":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-level-csrs"
    "#machine-second-trap-value-register-mtval2":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-second-trap-value-register-mtval2"
    "#machine-status-registers-mstatus-and-mstatush":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-status-registers-mstatus-and-mstatush"
    "#machine-trap-instruction-register-mtinst":
      headers:
      - Hypervisor Extension, Version 1.0
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#machine-trap-instruction-register-mtinst"
    "#memory-management-fences":
      headers:
      - Hypervisor Extension, Version 1.0
      - Two-Stage Address Translation
      - Memory-Management Fences
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#memory-management-fences"
    "#privilege-modes":
      headers:
      - Hypervisor Extension, Version 1.0
      - Privilege Modes
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#privilege-modes"
    "#sec:guest-addr-translation":
      headers:
      - Hypervisor Extension, Version 1.0
      - Two-Stage Address Translation
      - Guest Physical Address Translation
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:guest-addr-translation"
    "#sec:hfence.vma":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor Instructions
      - Hypervisor Memory-Management Fence Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:hfence.vma"
    "#sec:hgatp":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:hgatp"
    "#sec:hgeinterruptregs":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:hgeinterruptregs"
    "#sec:hinterruptregs":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:hinterruptregs"
    "#sec:tinst-vals":
      headers:
      - Hypervisor Extension, Version 1.0
      - Traps
      - or
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:tinst-vals"
    "#sec:two-stage-translation":
      headers:
      - Hypervisor Extension, Version 1.0
      - Two-Stage Address Translation
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#sec:two-stage-translation"
    "#trap-cause-codes":
      headers:
      - Hypervisor Extension, Version 1.0
      - Traps
      - Trap Cause Codes
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#trap-cause-codes"
    "#trap-entry":
      headers:
      - Hypervisor Extension, Version 1.0
      - Traps
      - Trap Entry
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#trap-entry"
    "#trap-return":
      headers:
      - Hypervisor Extension, Version 1.0
      - Traps
      - Trap Return
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#trap-return"
    "#traps":
      headers:
      - Hypervisor Extension, Version 1.0
      - Traps
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#traps"
    "#virtual-supervisor-address-translation-and-protection-register-vsatp":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-address-translation-and-protection-register-vsatp"
    "#virtual-supervisor-cause-register-vscause":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-cause-register-vscause"
    "#virtual-supervisor-exception-program-counter-vsepc":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-exception-program-counter-vsepc"
    "#virtual-supervisor-interrupt-registers-vsip-and-vsie":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-interrupt-registers-vsip-and-vsie"
    "#virtual-supervisor-scratch-register-vsscratch":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-scratch-register-vsscratch"
    "#virtual-supervisor-status-register-vsstatus":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-status-register-vsstatus"
    "#virtual-supervisor-trap-value-register-vstval":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-trap-value-register-vstval"
    "#virtual-supervisor-trap-vector-base-address-register-vstvec":
      headers:
      - Hypervisor Extension, Version 1.0
      - Hypervisor and Virtual Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/hypervisor.html#virtual-supervisor-trap-vector-base-address-register-vstvec"
  j:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/j.html"
    "#sec:j":
      headers:
      - '"J" Standard Extension for Dynamically Translated Languages, Version 0.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/j.html#sec:j"
  m:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/m.html"
    "#division-operations":
      headers:
      - '"M" Standard Extension for Integer Multiplication and Division, Version 2.0'
      - Division Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/m.html#division-operations"
    "#m-standard-extension-for-integer-multiplication-and-division-version-2.0":
      headers:
      - '"M" Standard Extension for Integer Multiplication and Division, Version 2.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/m.html#m-standard-extension-for-integer-multiplication-and-division-version-2.0"
    "#multiplication-operations":
      headers:
      - '"M" Standard Extension for Integer Multiplication and Division, Version 2.0'
      - Multiplication Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/m.html#multiplication-operations"
    "#zmmul-extension-version-0.1":
      headers:
      - '"M" Standard Extension for Integer Multiplication and Division, Version 2.0'
      - Zmmul Extension, Version 0.1
      url: "/riscv-user-isa-manual/Priv-v1.12/m.html#zmmul-extension-version-0.1"
  machine:
    '':
      headers: []
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html"
    "#address-matching":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      - Physical Memory Protection CSRs
      - Address Matching
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#address-matching"
    "#alignment":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Atomicity PMAs
      - Alignment
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#alignment"
    "#amo-pma":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Atomicity PMAs
      - AMO PMA
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#amo-pma"
    "#atomicity-pmas":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Atomicity PMAs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#atomicity-pmas"
    "#coherence-and-cacheability-pmas":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Coherence and Cacheability PMAs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#coherence-and-cacheability-pmas"
    "#endianness-control-in-mstatus-and-mstatush-registers":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - Registers
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#endianness-control-in-mstatus-and-mstatush-registers"
    "#environment-call-and-breakpoint":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Mode Privileged Instructions
      - Environment Call and Breakpoint
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#environment-call-and-breakpoint"
    "#extension-context-status-in-mstatus-register":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#extension-context-status-in-mstatus-register"
    "#hardware-performance-monitor":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Hardware Performance Monitor
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#hardware-performance-monitor"
    "#hart-id-register-mhartid":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Hart ID Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#hart-id-register-mhartid"
    "#idempotency-pmas":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Idempotency PMAs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#idempotency-pmas"
    "#locking-and-privilege-mode":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      - Physical Memory Protection CSRs
      - Locking and Privilege Mode
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#locking-and-privilege-mode"
    "#machine":
      headers:
      - Machine-Level ISA, Version 1.12
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine"
    "#machine-architecture-id-register-marchid":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Machine Architecture ID Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-architecture-id-register-marchid"
    "#machine-configuration-pointer-register-mconfigptr":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-configuration-pointer-register-mconfigptr"
    "#machine-counter-inhibit-csr-mcountinhibit":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-counter-inhibit-csr-mcountinhibit"
    "#machine-environment-configuration-registers-menvcfg-and-menvcfgh":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-environment-configuration-registers-menvcfg-and-menvcfgh"
    "#machine-exception-program-counter-mepc":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-exception-program-counter-mepc"
    "#machine-implementation-id-register-mimpid":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Machine Implementation ID Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-implementation-id-register-mimpid"
    "#machine-interrupt-registers-mip-and-mie":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-interrupt-registers-mip-and-mie"
    "#machine-level-csrs":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-level-csrs"
    "#machine-level-memory-mapped-registers":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level Memory-Mapped Registers
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-level-memory-mapped-registers"
    "#machine-mode-privileged-instructions":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Mode Privileged Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-mode-privileged-instructions"
    "#machine-scratch-register-mscratch":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-scratch-register-mscratch"
    "#machine-status-registers-mstatus-and-mstatush":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-status-registers-mstatus-and-mstatush"
    "#machine-timer-registers-mtime-and-mtimecmp":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level Memory-Mapped Registers
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-timer-registers-mtime-and-mtimecmp"
    "#machine-trap-delegation-registers-medeleg-and-mideleg":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-trap-delegation-registers-medeleg-and-mideleg"
    "#machine-trap-value-register-mtval":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-trap-value-register-mtval"
    "#machine-trap-vector-base-address-register-mtvec":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-trap-vector-base-address-register-mtvec"
    "#machine-vendor-id-register-mvendorid":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Machine Vendor ID Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#machine-vendor-id-register-mvendorid"
    "#main-memory-versus-io-versus-vacant-regions":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Main Memory versus I/O versus Vacant Regions
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#main-memory-versus-io-versus-vacant-regions"
    "#memory-ordering-pmas":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Memory-Ordering PMAs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#memory-ordering-pmas"
    "#memory-privilege-in-mstatus-register":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#memory-privilege-in-mstatus-register"
    "#otherpriv":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Mode Privileged Instructions
      - Trap-Return Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#otherpriv"
    "#physical-memory-protection-csrs":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      - Physical Memory Protection CSRs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#physical-memory-protection-csrs"
    "#pmp-vmem":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      - Physical Memory Protection and Paging
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#pmp-vmem"
    "#priority-and-matching-logic":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      - Physical Memory Protection CSRs
      - Priority and Matching Logic
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#priority-and-matching-logic"
    "#privstack":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#privstack"
    "#reservability-pma":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Atomicity PMAs
      - Reservability PMA
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#reservability-pma"
    "#sec:customsys":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Mode Privileged Instructions
      - Custom SYSTEM Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:customsys"
    "#sec:mcause":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:mcause"
    "#sec:mcounteren":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:mcounteren"
    "#sec:misa":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - Machine ISA Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:misa"
    "#sec:mseccfg":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:mseccfg"
    "#sec:nmi":
      headers:
      - Machine-Level ISA, Version 1.12
      - Non-Maskable Interrupts
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:nmi"
    "#sec:pma":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:pma"
    "#sec:pmp":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Protection
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:pmp"
    "#sec:reset":
      headers:
      - Machine-Level ISA, Version 1.12
      - Reset
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#sec:reset"
    "#supported-access-type-pmas":
      headers:
      - Machine-Level ISA, Version 1.12
      - Physical Memory Attributes
      - Supported Access Type PMAs
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#supported-access-type-pmas"
    "#virt-control":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#virt-control"
    "#wfi":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Mode Privileged Instructions
      - Wait for Interrupt
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#wfi"
    "#xlen-control":
      headers:
      - Machine-Level ISA, Version 1.12
      - Machine-Level CSRs
      - ")"
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/machine.html#xlen-control"
  p:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/p.html"
    "#sec:packedsimd":
      headers:
      - '"P" Standard Extension for Packed-SIMD Instructions, Version 0.2'
      url: "/riscv-user-isa-manual/Priv-v1.12/p.html#sec:packedsimd"
  q:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html"
    "#q-standard-extension-for-quad-precision-floating-point-version-2.2":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#q-standard-extension-for-quad-precision-floating-point-version-2.2"
    "#quad-precision-computational-instructions":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      - Quad-Precision Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#quad-precision-computational-instructions"
    "#quad-precision-convert-and-move-instructions":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      - Quad-Precision Convert and Move Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#quad-precision-convert-and-move-instructions"
    "#quad-precision-floating-point-classify-instruction":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      - Quad-Precision Floating-Point Classify Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#quad-precision-floating-point-classify-instruction"
    "#quad-precision-floating-point-compare-instructions":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      - Quad-Precision Floating-Point Compare Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#quad-precision-floating-point-compare-instructions"
    "#quad-precision-load-and-store-instructions":
      headers:
      - '"Q" Standard Extension for Quad-Precision Floating-Point, Version 2.2'
      - Quad-Precision Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/q.html#quad-precision-load-and-store-instructions"
    "#sec:single-float-compute":
      headers: *22
      url: "/riscv-user-isa-manual/Priv-v1.12//q.html"
    "#single-precision-floating-point-compare-instructions":
      headers: *23
      url: "/riscv-user-isa-manual/Priv-v1.12//q.html"
  rv128:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/rv128.html"
    "#rv128":
      headers:
      - RV128I Base Integer Instruction Set, Version 1.7
      url: "/riscv-user-isa-manual/Priv-v1.12/rv128.html#rv128"
  rv32:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html"
    "#base-instruction-formats":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Base Instruction Formats
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#base-instruction-formats"
    "#conditional-branches":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Control Transfer Instructions
      - Conditional Branches
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#conditional-branches"
    "#control-transfer-instructions":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Control Transfer Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#control-transfer-instructions"
    "#environment-call-and-breakpoints":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Environment Call and Breakpoints
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#environment-call-and-breakpoints"
    "#immediate-encoding-variants":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Immediate Encoding Variants
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#immediate-encoding-variants"
    "#integer-computational-instructions":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#integer-computational-instructions"
    "#integer-register-immediate-instructions":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      - Integer Register-Immediate Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#integer-register-immediate-instructions"
    "#integer-register-register-operations":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      - Integer Register-Register Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#integer-register-register-operations"
    "#nop-instruction":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      - NOP Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#nop-instruction"
    "#programmers-model-for-base-integer-isa":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - "Programmers&acirc;\x80\x99 Model for Base Integer ISA"
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#programmers-model-for-base-integer-isa"
    "#rv32":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#rv32"
    "#sec:fence":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Memory Ordering Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#sec:fence"
    "#sec:rv32:ldst":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#sec:rv32:ldst"
    "#sec:rv32i-hints":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - HINT Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#sec:rv32i-hints"
    "#unconditional-jumps":
      headers:
      - RV32I Base Integer Instruction Set, Version 2.1
      - Control Transfer Instructions
      - Unconditional Jumps
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32.html#unconditional-jumps"
  rv32e:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32e.html"
    "#rv32e":
      headers:
      - RV32E Base Integer Instruction Set, Version 1.9
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32e.html#rv32e"
    "#rv32e-instruction-set":
      headers:
      - RV32E Base Integer Instruction Set, Version 1.9
      - RV32E Instruction Set
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32e.html#rv32e-instruction-set"
    "#rv32e-programmers-model":
      headers:
      - RV32E Base Integer Instruction Set, Version 1.9
      - "RV32E Programmers&acirc;\x80\x99 Model"
      url: "/riscv-user-isa-manual/Priv-v1.12/rv32e.html#rv32e-programmers-model"
  rv64:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html"
    "#integer-computational-instructions":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#integer-computational-instructions"
    "#integer-register-immediate-instructions":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      - Integer Register-Immediate Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#integer-register-immediate-instructions"
    "#integer-register-register-operations":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - Integer Computational Instructions
      - Integer Register-Register Operations
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#integer-register-register-operations"
    "#load-and-store-instructions":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#load-and-store-instructions"
    "#register-state":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - Register State
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#register-state"
    "#rv64":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#rv64"
    "#sec:rv64i-hints":
      headers:
      - RV64I Base Integer Instruction Set, Version 2.1
      - HINT Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/rv64.html#sec:rv64i-hints"
  rvwmo:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html"
    "#ch:memorymodel":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#ch:memorymodel"
    "#memory-model-axioms":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Memory Model Axioms
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#memory-model-axioms"
    "#preserved-program-order":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Preserved Program Order
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#preserved-program-order"
    "#rvwmo:ax:atom":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Memory Model Axioms
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#rvwmo:ax:atom"
    "#rvwmo:ax:load":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Memory Model Axioms
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#rvwmo:ax:load"
    "#rvwmo:ax:prog":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Memory Model Axioms
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#rvwmo:ax:prog"
    "#sec:memorymodel:dependencies":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Syntactic Dependencies
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#sec:memorymodel:dependencies"
    "#sec:rvwmo":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#sec:rvwmo"
    "#sec:rvwmo:primitives":
      headers:
      - RVWMO Memory Consistency Model, Version 2.0
      - Definition of the RVWMO Memory Model
      - Memory Model Primitives
      url: "/riscv-user-isa-manual/Priv-v1.12/rvwmo.html#sec:rvwmo:primitives"
  supervisor:
    '':
      headers: []
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html"
    "#addressing-and-memory-protection":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv39: Page-Based 39-bit Virtual-Memory System'
      - Addressing and Memory Protection
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#addressing-and-memory-protection"
    "#addressing-and-memory-protection-1":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv48: Page-Based 48-bit Virtual-Memory System'
      - Addressing and Memory Protection
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#addressing-and-memory-protection-1"
    "#addressing-and-memory-protection-2":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv57: Page-Based 57-bit Virtual-Memory System'
      - Addressing and Memory Protection
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#addressing-and-memory-protection-2"
    "#base-isa-control-in-sstatus-register":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - Supervisor Status Register (sstatus)
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#base-isa-control-in-sstatus-register"
    "#counter-enable-register-scounteren":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#counter-enable-register-scounteren"
    "#endianness-control-in-sstatus-register":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - Supervisor Status Register (sstatus)
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#endianness-control-in-sstatus-register"
    "#sec:satp":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ") Register"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:satp"
    "#sec:scause":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:scause"
    "#sec:sfence.vma":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor Instructions
      - Supervisor Memory-Management Fence Instruction
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sfence.vma"
    "#sec:sum":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - Supervisor Status Register (sstatus)
      - Register
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sum"
    "#sec:sv32":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv32: Page-Based 32-bit Virtual-Memory Systems'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sv32"
    "#sec:sv39":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv39: Page-Based 39-bit Virtual-Memory System'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sv39"
    "#sec:sv48":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv48: Page-Based 48-bit Virtual-Memory System'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sv48"
    "#sec:sv57":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv57: Page-Based 57-bit Virtual-Memory System'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:sv57"
    "#sec:translation":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv32: Page-Based 32-bit Virtual-Memory Systems'
      - Addressing and Memory Protection
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sec:translation"
    "#sstatus":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - Supervisor Status Register (sstatus)
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sstatus"
    "#supervisor":
      headers:
      - Supervisor-Level ISA, Version 1.12
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor"
    "#supervisor-csrs":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-csrs"
    "#supervisor-environment-configuration-register-senvcfg":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-environment-configuration-register-senvcfg"
    "#supervisor-exception-program-counter-sepc":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-exception-program-counter-sepc"
    "#supervisor-instructions":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor Instructions
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-instructions"
    "#supervisor-interrupt-registers-sip-and-sie":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-interrupt-registers-sip-and-sie"
    "#supervisor-scratch-register-sscratch":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-scratch-register-sscratch"
    "#supervisor-timers-and-performance-counters":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - Supervisor Timers and Performance Counters
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-timers-and-performance-counters"
    "#supervisor-trap-value-stval-register":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ") Register"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-trap-value-stval-register"
    "#supervisor-trap-vector-base-address-register-stvec":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - Supervisor CSRs
      - ")"
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#supervisor-trap-vector-base-address-register-stvec"
    "#sv32algorithm":
      headers:
      - Supervisor-Level ISA, Version 1.12
      - 'Sv32: Page-Based 32-bit Virtual-Memory Systems'
      - Virtual Address Translation Process
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#sv32algorithm"
    "#svinval":
      headers:
      - '"Svinval" Standard Extension for Fine-Grained Address-Translation Cache Invalidation,
        Version 1.0'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#svinval"
    "#svnapot":
      headers:
      - '"Svnapot" Standard Extension for NAPOT Translation Contiguity, Version 1.0'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#svnapot"
    "#svpbmt":
      headers:
      - '"Svpbmt" Standard Extension for Page-Based Memory Types, Version 1.0'
      url: "/riscv-priv-isa-manual/Priv-v1.12/supervisor.html#svpbmt"
  v:
    '':
      headers: []
      url: "/riscv-v-spec/v1.0//v-spec.html"
    "#_avl_encoding":
      headers:
      - ")"
      - 6.2. AVL encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#_avl_encoding"
    "#_c_standard_library_strcmp_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.9. C standard library strcmp example
      url: "/riscv-v-spec/v1.0//v-spec.html#_c_standard_library_strcmp_example"
    "#_calling_convention_not_authoritative_placeholder_only":
      headers:
      - 'Appendix B: Calling Convention (Not authoritative - Placeholder Only)'
      url: "/riscv-v-spec/v1.0//v-spec.html#_calling_convention_not_authoritative_placeholder_only"
    "#_changes_from_v1_0_rc2":
      headers:
      - Changes from v1.0-rc2
      url: "/riscv-v-spec/v1.0//v-spec.html#_changes_from_v1_0_rc2"
    "#_clarified_that_this_it_the_frozen_version_for_public_review":
      headers:
      - Changes from v1.0-rc2
      - Clarified that this it the frozen version for public review.
      url: "/riscv-v-spec/v1.0//v-spec.html#_clarified_that_this_it_the_frozen_version_for_public_review"
    "#_conditional_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.4. Conditional example
      url: "/riscv-v-spec/v1.0//v-spec.html#_conditional_example"
    "#_constraints_on_setting_vl":
      headers:
      - ")"
      - 6.3. Constraints on Setting
      url: "/riscv-v-spec/v1.0//v-spec.html#_constraints_on_setting_vl"
    "#_division_approximation_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.7. Division approximation example
      url: "/riscv-v-spec/v1.0//v-spec.html#_division_approximation_example"
    "#_example_using_vector_mask_instructions":
      headers:
      - 15. Vector Mask Instructions
      - 15.7. Example using vector mask instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_example_using_vector_mask_instructions"
    "#_example_with_mixed_width_mask_and_compute":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.2. Example with mixed-width mask and compute.
      url: "/riscv-v-spec/v1.0//v-spec.html#_example_with_mixed_width_mask_and_compute"
    "#_exception_handling":
      headers:
      - 17. Exception Handling
      url: "/riscv-v-spec/v1.0//v-spec.html#_exception_handling"
    "#_floating_point_scalar_move_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.2. Floating-Point Scalar Move Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_floating_point_scalar_move_instructions"
    "#_fractional_lmul_example":
      headers:
      - 'Appendix C: Fractional Lmul example'
      url: "/riscv-v-spec/v1.0//v-spec.html#_fractional_lmul_example"
    "#_implementation_defined_constant_parameters":
      headers:
      - 2. Implementation-defined Constant Parameters
      url: "/riscv-v-spec/v1.0//v-spec.html#_implementation_defined_constant_parameters"
    "#_imprecise_vector_traps":
      headers:
      - 17. Exception Handling
      - 17.2. Imprecise vector traps
      url: "/riscv-v-spec/v1.0//v-spec.html#_imprecise_vector_traps"
    "#_integer_scalar_move_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.1. Integer Scalar Move Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_integer_scalar_move_instructions"
    "#_introduction":
      headers:
      - 1. Introduction
      url: "/riscv-v-spec/v1.0//v-spec.html#_introduction"
    "#_mapping_for_lmul_1":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      - 4.1. Mapping for LMUL = 1
      url: "/riscv-v-spec/v1.0//v-spec.html#_mapping_for_lmul_1"
    "#_mapping_for_lmul_1_2":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      - 4.2. Mapping for LMUL < 1
      url: "/riscv-v-spec/v1.0//v-spec.html#_mapping_for_lmul_1_2"
    "#_mapping_for_lmul_1_3":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      - 4.3. Mapping for LMUL > 1
      url: "/riscv-v-spec/v1.0//v-spec.html#_mapping_for_lmul_1_3"
    "#_mapping_of_vector_elements_to_vector_register_state":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      url: "/riscv-v-spec/v1.0//v-spec.html#_mapping_of_vector_elements_to_vector_register_state"
    "#_memcpy_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.3. Memcpy example
      url: "/riscv-v-spec/v1.0//v-spec.html#_memcpy_example"
    "#_narrowing_floating_pointinteger_type_convert_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.19. Narrowing Floating-Point/Integer Type-Convert Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_narrowing_floating_pointinteger_type_convert_instructions"
    "#_precise_vector_traps":
      headers:
      - 17. Exception Handling
      - 17.1. Precise vector traps
      url: "/riscv-v-spec/v1.0//v-spec.html#_precise_vector_traps"
    "#_saxpy_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.5. SAXPY example
      url: "/riscv-v-spec/v1.0//v-spec.html#_saxpy_example"
    "#_scalar_operands":
      headers:
      - 5. Vector Instruction Formats
      - 5.1. Scalar Operands
      url: "/riscv-v-spec/v1.0//v-spec.html#_scalar_operands"
    "#_selectable_preciseimprecise_traps":
      headers:
      - 17. Exception Handling
      - 17.3. Selectable precise/imprecise traps
      url: "/riscv-v-spec/v1.0//v-spec.html#_selectable_preciseimprecise_traps"
    "#_sgemm_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.6. SGEMM example
      url: "/riscv-v-spec/v1.0//v-spec.html#_sgemm_example"
    "#_single_width_floating_pointinteger_type_convert_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.17. Single-Width Floating-Point/Integer Type-Convert Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_single_width_floating_pointinteger_type_convert_instructions"
    "#_square_root_approximation_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.8. Square root approximation example
      url: "/riscv-v-spec/v1.0//v-spec.html#_square_root_approximation_example"
    "#_state_of_vector_extension_at_reset":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.11. State of Vector Extension at Reset
      url: "/riscv-v-spec/v1.0//v-spec.html#_state_of_vector_extension_at_reset"
    "#_swappable_traps":
      headers:
      - 17. Exception Handling
      - 17.4. Swappable traps
      url: "/riscv-v-spec/v1.0//v-spec.html#_swappable_traps"
    "#_synthesizing_vdecompress":
      headers:
      - 16. Vector Permutation Instructions
      - 16.5. Vector Compress Instruction
      - 16.5.1. Synthesizing
      url: "/riscv-v-spec/v1.0//v-spec.html#_synthesizing_vdecompress"
    "#_unit_stride_fault_only_first_loads":
      headers:
      - 7. Vector Loads and Stores
      - 7.7. Unit-stride Fault-Only-First Loads
      url: "/riscv-v-spec/v1.0//v-spec.html#_unit_stride_fault_only_first_loads"
    "#_v_vector_extension_for_application_processors":
      headers:
      - 18. Standard Vector Extensions
      - '18.3. V: Vector Extension for Application Processors'
      url: "/riscv-v-spec/v1.0//v-spec.html#_v_vector_extension_for_application_processors"
    "#_vector_arithmetic_instruction_formats":
      headers:
      - 10. Vector Arithmetic Instruction Formats
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_arithmetic_instruction_formats"
    "#_vector_assembly_code_examples":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_assembly_code_examples"
    "#_vector_bitwise_logical_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.5. Vector Bitwise Logical Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_bitwise_logical_instructions"
    "#_vector_byte_length_vlenb":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.6. Vector Byte Length
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_byte_length_vlenb"
    "#_vector_compress_instruction":
      headers:
      - 16. Vector Permutation Instructions
      - 16.5. Vector Compress Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_compress_instruction"
    "#_vector_context_status_in_mstatus":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.2. Vector Context Status in
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_context_status_in_mstatus"
    "#_vector_context_status_in_vsstatus":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.3. Vector Context Status in
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_context_status_in_vsstatus"
    "#_vector_control_and_status_register_vcsr":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.10. Vector Control and Status Register
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_control_and_status_register_vcsr"
    "#_vector_count_population_in_mask_vcpop_m":
      headers:
      - 15. Vector Mask Instructions
      - 15.2. Vector count population in mask
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_count_population_in_mask_vcpop_m"
    "#_vector_element_index_instruction":
      headers:
      - 15. Vector Mask Instructions
      - 15.9. Vector Element Index Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_element_index_instruction"
    "#_vector_extension_programmers_model":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_extension_programmers_model"
    "#_vector_fixed_point_rounding_mode_register_vxrm":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.8. Vector Fixed-Point Rounding Mode Register
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_fixed_point_rounding_mode_register_vxrm"
    "#_vector_fixed_point_saturation_flag_vxsat":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.9. Vector Fixed-Point Saturation Flag
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_fixed_point_saturation_flag_vxsat"
    "#_vector_floating_point_classify_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.14. Vector Floating-Point Classify Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_classify_instruction"
    "#_vector_floating_point_compare_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.13. Vector Floating-Point Compare Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_compare_instructions"
    "#_vector_floating_point_exception_flags":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.1. Vector Floating-Point Exception Flags
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_exception_flags"
    "#_vector_floating_point_merge_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.15. Vector Floating-Point Merge Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_merge_instruction"
    "#_vector_floating_point_minmax_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.11. Vector Floating-Point MIN/MAX Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_minmax_instructions"
    "#_vector_floating_point_move_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.16. Vector Floating-Point Move Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_move_instruction"
    "#_vector_floating_point_reciprocal_estimate_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.10. Vector Floating-Point Reciprocal Estimate Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_reciprocal_estimate_instruction"
    "#_vector_floating_point_reciprocal_square_root_estimate_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.9. Vector Floating-Point Reciprocal Square-Root Estimate Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_reciprocal_square_root_estimate_instruction"
    "#_vector_floating_point_sign_injection_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.12. Vector Floating-Point Sign-Injection Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_sign_injection_instructions"
    "#_vector_floating_point_square_root_instruction":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.8. Vector Floating-Point Square-Root Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_floating_point_square_root_instruction"
    "#_vector_indexed_instructions":
      headers:
      - 7. Vector Loads and Stores
      - 7.6. Vector Indexed Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_indexed_instructions"
    "#_vector_indexed_segment_loads_and_stores":
      headers:
      - 7. Vector Loads and Stores
      - 7.8. Vector Load/Store Segment Instructions
      - 7.8.3. Vector Indexed Segment Loads and Stores
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_indexed_segment_loads_and_stores"
    "#_vector_instruction_formats":
      headers:
      - 5. Vector Instruction Formats
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_instruction_formats"
    "#_vector_instruction_listing":
      headers:
      - 19. Vector Instruction Listing
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_instruction_listing"
    "#_vector_integer_add_with_carry_subtract_with_borrow_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.4. Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_add_with_carry_subtract_with_borrow_instructions"
    "#_vector_integer_compare_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.8. Vector Integer Compare Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_compare_instructions"
    "#_vector_integer_divide_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.11. Vector Integer Divide Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_divide_instructions"
    "#_vector_integer_extension":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.3. Vector Integer Extension
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_extension"
    "#_vector_integer_merge_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.15. Vector Integer Merge Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_merge_instructions"
    "#_vector_integer_minmax_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.9. Vector Integer Min/Max Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_minmax_instructions"
    "#_vector_integer_move_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.16. Vector Integer Move Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_integer_move_instructions"
    "#_vector_iota_instruction":
      headers:
      - 15. Vector Mask Instructions
      - 15.8. Vector Iota Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_iota_instruction"
    "#_vector_length_register_vl":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.5. Vector Length Register
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_length_register_vl"
    "#_vector_loadstore_addressing_modes":
      headers:
      - 7. Vector Loads and Stores
      - 7.2. Vector Load/Store Addressing Modes
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_loadstore_addressing_modes"
    "#_vector_loadstore_instruction_encoding":
      headers:
      - 7. Vector Loads and Stores
      - 7.1. Vector Load/Store Instruction Encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_loadstore_instruction_encoding"
    "#_vector_loadstore_whole_register_instructions":
      headers:
      - 7. Vector Loads and Stores
      - 7.9. Vector Load/Store Whole Register Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_loadstore_whole_register_instructions"
    "#_vector_masking":
      headers:
      - 5. Vector Instruction Formats
      - 5.3. Vector Masking
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_masking"
    "#_vector_memory_alignment_constraints":
      headers:
      - 8. Vector Memory Alignment Constraints
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_memory_alignment_constraints"
    "#_vector_memory_consistency_model":
      headers:
      - 9. Vector Memory Consistency Model
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_memory_consistency_model"
    "#_vector_narrowing_fixed_point_clip_instructions":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      - 12.5. Vector Narrowing Fixed-Point Clip Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_narrowing_fixed_point_clip_instructions"
    "#_vector_narrowing_integer_right_shift_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.7. Vector Narrowing Integer Right Shift Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_narrowing_integer_right_shift_instructions"
    "#_vector_ordered_single_width_floating_point_sum_reduction":
      headers:
      - 14. Vector Reduction Operations
      - 14.3. Vector Single-Width Floating-Point Reduction Instructions
      - 14.3.1. Vector Ordered Single-Width Floating-Point Sum Reduction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_ordered_single_width_floating_point_sum_reduction"
    "#_vector_reduction_operations":
      headers:
      - 14. Vector Reduction Operations
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_reduction_operations"
    "#_vector_register_gather_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.4. Vector Register Gather Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_register_gather_instructions"
    "#_vector_register_grouping_vlmul20":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.4. Vector type register,
      - ")"
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_register_grouping_vlmul20"
    "#_vector_registers":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.1. Vector Registers
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_registers"
    "#_vector_selected_element_width_vsew20":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.4. Vector type register,
      - 3.4.1. Vector selected element width
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_selected_element_width_vsew20"
    "#_vector_single_width_averaging_add_and_subtract":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      - 12.2. Vector Single-Width Averaging Add and Subtract
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_averaging_add_and_subtract"
    "#_vector_single_width_floating_point_addsubtract_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.2. Vector Single-Width Floating-Point Add/Subtract Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_floating_point_addsubtract_instructions"
    "#_vector_single_width_floating_point_fused_multiply_add_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.6. Vector Single-Width Floating-Point Fused Multiply-Add Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_floating_point_fused_multiply_add_instructions"
    "#_vector_single_width_floating_point_max_and_min_reductions":
      headers:
      - 14. Vector Reduction Operations
      - 14.3. Vector Single-Width Floating-Point Reduction Instructions
      - 14.3.3. Vector Single-Width Floating-Point Max and Min Reductions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_floating_point_max_and_min_reductions"
    "#_vector_single_width_floating_point_multiplydivide_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.4. Vector Single-Width Floating-Point Multiply/Divide Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_floating_point_multiplydivide_instructions"
    "#_vector_single_width_fractional_multiply_with_rounding_and_saturation":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      - 12.3. Vector Single-Width Fractional Multiply with Rounding and Saturation
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_fractional_multiply_with_rounding_and_saturation"
    "#_vector_single_width_integer_add_and_subtract":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.1. Vector Single-Width Integer Add and Subtract
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_integer_add_and_subtract"
    "#_vector_single_width_integer_multiply_add_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.13. Vector Single-Width Integer Multiply-Add Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_integer_multiply_add_instructions"
    "#_vector_single_width_integer_multiply_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.10. Vector Single-Width Integer Multiply Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_integer_multiply_instructions"
    "#_vector_single_width_saturating_add_and_subtract":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      - 12.1. Vector Single-Width Saturating Add and Subtract
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_saturating_add_and_subtract"
    "#_vector_single_width_scaling_shift_instructions":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      - 12.4. Vector Single-Width Scaling Shift Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_scaling_shift_instructions"
    "#_vector_single_width_shift_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.6. Vector Single-Width Shift Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_single_width_shift_instructions"
    "#_vector_slide1down_instruction":
      headers:
      - 16. Vector Permutation Instructions
      - 16.3. Vector Slide Instructions
      - 16.3.4. Vector Slide1down Instruction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_slide1down_instruction"
    "#_vector_slide1up":
      headers:
      - 16. Vector Permutation Instructions
      - 16.3. Vector Slide Instructions
      - 16.3.3. Vector Slide1up
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_slide1up"
    "#_vector_slide_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.3. Vector Slide Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_slide_instructions"
    "#_vector_slidedown_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.3. Vector Slide Instructions
      - 16.3.2. Vector Slidedown Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_slidedown_instructions"
    "#_vector_slideup_instructions":
      headers:
      - 16. Vector Permutation Instructions
      - 16.3. Vector Slide Instructions
      - 16.3.1. Vector Slideup Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_slideup_instructions"
    "#_vector_start_index_csr_vstart":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.7. Vector Start Index CSR
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_start_index_csr_vstart"
    "#_vector_strided_instructions":
      headers:
      - 7. Vector Loads and Stores
      - 7.5. Vector Strided Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_strided_instructions"
    "#_vector_strided_segment_loads_and_stores":
      headers:
      - 7. Vector Loads and Stores
      - 7.8. Vector Load/Store Segment Instructions
      - 7.8.2. Vector Strided Segment Loads and Stores
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_strided_segment_loads_and_stores"
    "#_vector_type_illegal_vill":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.4. Vector type register,
      - 3.4.4. Vector Type Illegal
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_type_illegal_vill"
    "#_vector_type_register_vtype":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.4. Vector type register,
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_type_register_vtype"
    "#_vector_unit_stride_instructions":
      headers:
      - 7. Vector Loads and Stores
      - 7.4. Vector Unit-Stride Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_unit_stride_instructions"
    "#_vector_unit_stride_segment_loads_and_stores":
      headers:
      - 7. Vector Loads and Stores
      - 7.8. Vector Load/Store Segment Instructions
      - 7.8.1. Vector Unit-Stride Segment Loads and Stores
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_unit_stride_segment_loads_and_stores"
    "#_vector_unordered_single_width_floating_point_sum_reduction":
      headers:
      - 14. Vector Reduction Operations
      - 14.3. Vector Single-Width Floating-Point Reduction Instructions
      - 14.3.2. Vector Unordered Single-Width Floating-Point Sum Reduction
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_unordered_single_width_floating_point_sum_reduction"
    "#_vector_vector_add_example":
      headers:
      - 'Appendix A: Vector Assembly Code Examples'
      - A.1. Vector-vector add example
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_vector_add_example"
    "#_vector_widening_floating_point_addsubtract_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.3. Vector Widening Floating-Point Add/Subtract Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_floating_point_addsubtract_instructions"
    "#_vector_widening_floating_point_fused_multiply_add_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.7. Vector Widening Floating-Point Fused Multiply-Add Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_floating_point_fused_multiply_add_instructions"
    "#_vector_widening_floating_point_multiply":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.5. Vector Widening Floating-Point Multiply
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_floating_point_multiply"
    "#_vector_widening_integer_addsubtract":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.2. Vector Widening Integer Add/Subtract
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_integer_addsubtract"
    "#_vector_widening_integer_multiply_add_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.14. Vector Widening Integer Multiply-Add Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_integer_multiply_add_instructions"
    "#_vector_widening_integer_multiply_instructions":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      - 11.12. Vector Widening Integer Multiply Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_vector_widening_integer_multiply_instructions"
    "#_vfirst_find_first_set_mask_bit":
      headers:
      - 15. Vector Mask Instructions
      - find-first-set mask bit
      url: "/riscv-v-spec/v1.0//v-spec.html#_vfirst_find_first_set_mask_bit"
    "#_vmsbf_m_set_before_first_mask_bit":
      headers:
      - 15. Vector Mask Instructions
      - set-before-first mask bit
      url: "/riscv-v-spec/v1.0//v-spec.html#_vmsbf_m_set_before_first_mask_bit"
    "#_vmsif_m_set_including_first_mask_bit":
      headers:
      - 15. Vector Mask Instructions
      - set-including-first mask bit
      url: "/riscv-v-spec/v1.0//v-spec.html#_vmsif_m_set_including_first_mask_bit"
    "#_vmsof_m_set_only_first_mask_bit":
      headers:
      - 15. Vector Mask Instructions
      - set-only-first mask bit
      url: "/riscv-v-spec/v1.0//v-spec.html#_vmsof_m_set_only_first_mask_bit"
    "#_vtype_encoding":
      headers:
      - ")"
      - encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#_vtype_encoding"
    "#_whole_vector_register_move":
      headers:
      - 16. Vector Permutation Instructions
      - 16.6. Whole Vector Register Move
      url: "/riscv-v-spec/v1.0//v-spec.html#_whole_vector_register_move"
    "#_widening_floating_pointinteger_type_convert_instructions":
      headers:
      - 13. Vector Floating-Point Instructions
      - 13.18. Widening Floating-Point/Integer Type-Convert Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#_widening_floating_pointinteger_type_convert_instructions"
    "#_zve_vector_extensions_for_embedded_processors":
      headers:
      - 18. Standard Vector Extensions
      - '18.2. Zve*: Vector Extensions for Embedded Processors'
      url: "/riscv-v-spec/v1.0//v-spec.html#_zve_vector_extensions_for_embedded_processors"
    "#_zvl_minimum_vector_length_standard_extensions":
      headers:
      - 18. Standard Vector Extensions
      - '18.1. Zvl*: Minimum Vector Length Standard Extensions'
      url: "/riscv-v-spec/v1.0//v-spec.html#_zvl_minimum_vector_length_standard_extensions"
    "#example-stripmine-sew":
      headers:
      - ")"
      - 6.4. Example of stripmining and changes to SEW
      url: "/riscv-v-spec/v1.0//v-spec.html#example-stripmine-sew"
    "#sec-agnostic":
      headers:
      - 3. Vector Extension Programmer&rsquo;s Model
      - 3.4. Vector type register,
      - and
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-agnostic"
    "#sec-aos":
      headers:
      - 7. Vector Loads and Stores
      - 7.8. Vector Load/Store Segment Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-aos"
    "#sec-arithmetic-encoding":
      headers:
      - 10. Vector Arithmetic Instruction Formats
      - 10.1. Vector Arithmetic Instruction encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-arithmetic-encoding"
    "#sec-inactive-defs":
      headers:
      - 5. Vector Instruction Formats
      - 5.4. Prestart, Active, Inactive, Body, and Tail Element Definitions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-inactive-defs"
    "#sec-mapping-mixed":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      - 4.4. Mapping across Mixed-Width Operations
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-mapping-mixed"
    "#sec-mask-register-layout":
      headers:
      - 4. Mapping of Vector Elements to Vector Register State
      - 4.5. Mask Register Layout
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-mask-register-layout"
    "#sec-mask-register-logical":
      headers:
      - 15. Vector Mask Instructions
      - 15.1. Vector Mask-Register Logical Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-mask-register-logical"
    "#sec-narrowing":
      headers:
      - 10. Vector Arithmetic Instruction Formats
      - 10.3. Narrowing Vector Arithmetic Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-narrowing"
    "#sec-vec-operands":
      headers:
      - 5. Vector Instruction Formats
      - 5.2. Vector Operands
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vec-operands"
    "#sec-vector-config":
      headers:
      - ")"
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-config"
    "#sec-vector-extensions":
      headers:
      - 18. Standard Vector Extensions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-extensions"
    "#sec-vector-fixed-point":
      headers:
      - 12. Vector Fixed-Point Arithmetic Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-fixed-point"
    "#sec-vector-float":
      headers:
      - 13. Vector Floating-Point Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-float"
    "#sec-vector-float-reduce":
      headers:
      - 14. Vector Reduction Operations
      - 14.3. Vector Single-Width Floating-Point Reduction Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-float-reduce"
    "#sec-vector-float-reduce-widen":
      headers:
      - 14. Vector Reduction Operations
      - 14.4. Vector Widening Floating-Point Reduction Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-float-reduce-widen"
    "#sec-vector-integer":
      headers:
      - 11. Vector Integer Arithmetic Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-integer"
    "#sec-vector-integer-reduce":
      headers:
      - 14. Vector Reduction Operations
      - 14.1. Vector Single-Width Integer Reduction Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-integer-reduce"
    "#sec-vector-integer-reduce-widen":
      headers:
      - 14. Vector Reduction Operations
      - 14.2. Vector Widening Integer Reduction Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-integer-reduce-widen"
    "#sec-vector-loadstore-width-encoding":
      headers:
      - 7. Vector Loads and Stores
      - 7.3. Vector Load/Store Width Encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-loadstore-width-encoding"
    "#sec-vector-mask":
      headers:
      - 15. Vector Mask Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-mask"
    "#sec-vector-mask-encoding":
      headers:
      - 5. Vector Instruction Formats
      - 5.3. Vector Masking
      - 5.3.1. Mask Encoding
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-mask-encoding"
    "#sec-vector-memory":
      headers:
      - 7. Vector Loads and Stores
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-memory"
    "#sec-vector-permute":
      headers:
      - 16. Vector Permutation Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-vector-permute"
    "#sec-widening":
      headers:
      - 10. Vector Arithmetic Instruction Formats
      - 10.2. Widening Vector Arithmetic Instructions
      url: "/riscv-v-spec/v1.0//v-spec.html#sec-widening"
  zam:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/zam.html"
    "#rvwmo:ax:misaligned":
      headers:
      - '"Zam" Standard Extension for Misaligned Atomics, v0.1'
      url: "/riscv-user-isa-manual/Priv-v1.12/zam.html#rvwmo:ax:misaligned"
    "#sec:zam":
      headers:
      - '"Zam" Standard Extension for Misaligned Atomics, v0.1'
      url: "/riscv-user-isa-manual/Priv-v1.12/zam.html#sec:zam"
  zfh:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html"
    "#half-precision-computational-instructions":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - Half-Precision Computational Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#half-precision-computational-instructions"
    "#half-precision-convert-and-move-instructions":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - Half-Precision Convert and Move Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#half-precision-convert-and-move-instructions"
    "#half-precision-floating-point-classify-instruction":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - Half-Precision Floating-Point Classify Instruction
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#half-precision-floating-point-classify-instruction"
    "#half-precision-floating-point-compare-instructions":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - Half-Precision Floating-Point Compare Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#half-precision-floating-point-compare-instructions"
    "#half-precision-load-and-store-instructions":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - Half-Precision Load and Store Instructions
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#half-precision-load-and-store-instructions"
    "#zfh-and-zfhmin-standard-extensions-for-half-precision-floating-point-version-0.1":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#zfh-and-zfhmin-standard-extensions-for-half-precision-floating-point-version-0.1"
    "#zfhmin-standard-extension-for-minimal-half-precision-floating-point-support":
      headers:
      - '"Zfh" and "Zfhmin" Standard Extensions for Half-Precision Floating-Point,
        Version 0.1'
      - '"Zfhmin" Standard Extension for Minimal Half-Precision Floating-Point Support'
      url: "/riscv-user-isa-manual/Priv-v1.12/zfh.html#zfhmin-standard-extension-for-minimal-half-precision-floating-point-support"
  zfinx:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html"
    "#privileged-architecture-implications":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Privileged Architecture Implications
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#privileged-architecture-implications"
    "#processing-of-narrower-values":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Processing of Narrower Values
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#processing-of-narrower-values"
    "#processing-of-wider-values":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Processing of Wider Values
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#processing-of-wider-values"
    "#sec:zfinx":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#sec:zfinx"
    "#zdinx":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Zdinx
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#zdinx"
    "#zhinx":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Zhinx
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#zhinx"
    "#zhinxmin":
      headers:
      - '"Zfinx", "Zdinx", "Zhinx", "Zhinxmin": Standard Extensions for Floating-Point
        in Integer Registers, Version 1.0.0-rc'
      - Zhinxmin
      url: "/riscv-user-isa-manual/Priv-v1.12/zfinx.html#zhinxmin"
  zifencei:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/zifencei.html"
    "#chap:zifencei":
      headers:
      - '"Zifencei" Instruction-Fetch Fence, Version 2.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/zifencei.html#chap:zifencei"
  zihintpause:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/zihintpause.html"
    "#chap:zihintpause":
      headers:
      - '"Zihintpause" Pause Hint, Version 2.0'
      url: "/riscv-user-isa-manual/Priv-v1.12/zihintpause.html#chap:zihintpause"
  ztso:
    '':
      headers: []
      url: "/riscv-user-isa-manual/Priv-v1.12/ztso.html"
    "#sec:ztso":
      headers:
      - '"Ztso" Standard Extension for Total Store Ordering, v0.1'
      url: "/riscv-user-isa-manual/Priv-v1.12/ztso.html#sec:ztso"
isa:
  a:
  - amoadd.d
  - amoadd.w
  - amoand.d
  - amoand.w
  - amomax.d
  - amomax.w
  - amomaxu.d
  - amomaxu.w
  - amomin.d
  - amomin.w
  - amominu.d
  - amominu.w
  - amoor.d
  - amoor.w
  - amoswap.d
  - amoswap.w
  - amoxor.d
  - amoxor.w
  - lr.d
  - lr.w
  - sc.d
  - sc.w
  c:
  - "@c.addi16sp"
  - "@c.addiw"
  - "@c.ebreak"
  - "@c.jalr"
  - "@c.jr"
  - "@c.ld"
  - "@c.ldsp"
  - "@c.lq"
  - "@c.lqsp"
  - "@c.nop"
  - "@c.sd"
  - "@c.sdsp"
  - "@c.sq"
  - "@c.sqsp"
  - c.add
  - c.addi
  - c.addi4spn
  - c.addw
  - c.and
  - c.andi
  - c.beqz
  - c.bnez
  - c.fld
  - c.fldsp
  - c.flw
  - c.flwsp
  - c.fsd
  - c.fsdsp
  - c.fsw
  - c.fswsp
  - c.j
  - c.jal
  - c.li
  - c.lui
  - c.lw
  - c.lwsp
  - c.mv
  - c.or
  - c.slli
  - c.srai
  - c.srli
  - c.sub
  - c.subw
  - c.sw
  - c.swsp
  - c.xor
  counters:
  - "@rdcycle"
  - "@rdcycleh"
  - "@rdinstret"
  - "@rdinstreth"
  - "@rdtime"
  - "@rdtimeh"
  csr:
  - csrrc
  - csrrci
  - csrrs
  - csrrsi
  - csrrw
  - csrrwi
  d:
  - fadd.d
  - fclass.d
  - fcvt.d.l
  - fcvt.d.lu
  - fcvt.d.s
  - fcvt.d.w
  - fcvt.d.wu
  - fcvt.l.d
  - fcvt.lu.d
  - fcvt.s.d
  - fcvt.w.d
  - fcvt.wu.d
  - fdiv.d
  - feq.d
  - fld
  - fle.d
  - flt.d
  - fmadd.d
  - fmax.d
  - fmin.d
  - fmsub.d
  - fmul.d
  - fmv.d.x
  - fmv.x.d
  - fnmadd.d
  - fnmsub.d
  - fsd
  - fsgnj.d
  - fsgnjn.d
  - fsgnjx.d
  - fsqrt.d
  - fsub.d
  f:
  - "@fmv.s.x"
  - "@fmv.x.s"
  - "@frcsr"
  - "@frflags"
  - "@frrm"
  - "@fscsr"
  - "@fsflags"
  - "@fsrm"
  - fadd.s
  - fclass.s
  - fcvt.l.s
  - fcvt.lu.s
  - fcvt.s.l
  - fcvt.s.lu
  - fcvt.s.w
  - fcvt.s.wu
  - fcvt.w.s
  - fcvt.wu.s
  - fdiv.s
  - feq.s
  - fle.s
  - flt.s
  - flw
  - fmadd.s
  - fmax.s
  - fmin.s
  - fmsub.s
  - fmul.s
  - fmv.w.x
  - fmv.x.w
  - fnmadd.s
  - fnmsub.s
  - fsgnj.s
  - fsgnjn.s
  - fsgnjx.s
  - fsqrt.s
  - fsub.s
  - fsw
  m:
  - div
  - divu
  - divuw
  - divw
  - mul
  - mulh
  - mulhsu
  - mulhu
  - mulw
  - rem
  - remu
  - remuw
  - remw
  machine:
  - mret
  - sret
  - wfi
  q:
  - fadd.q
  - fclass.q
  - fcvt.d.q
  - fcvt.l.q
  - fcvt.lu.q
  - fcvt.q.d
  - fcvt.q.l
  - fcvt.q.lu
  - fcvt.q.s
  - fcvt.q.w
  - fcvt.q.wu
  - fcvt.s.q
  - fcvt.w.q
  - fcvt.wu.q
  - fdiv.q
  - feq.q
  - fle.q
  - flq
  - flt.q
  - fmadd.q
  - fmax.q
  - fmin.q
  - fmsub.q
  - fmul.q
  - fnmadd.q
  - fnmsub.q
  - fsgnj.q
  - fsgnjn.q
  - fsgnjx.q
  - fsq
  - fsqrt.q
  - fsub.q
  rv128:
  - fmv.q.x
  - fmv.x.q
  rv32:
  - "@sbreak"
  - "@scall"
  - add
  - addi
  - addw
  - and
  - andi
  - auipc
  - beq
  - bge
  - bgeu
  - blt
  - bltu
  - bne
  - ebreak
  - ecall
  - fence
  - jal
  - jalr
  - lb
  - lbu
  - lh
  - lhu
  - lui
  - lw
  - or
  - ori
  - sb
  - sh
  - sll
  - slli
  - slt
  - slti
  - sltiu
  - sltu
  - sra
  - srai
  - srl
  - srli
  - sub
  - sw
  - xor
  - xori
  rv64:
  - addiw
  - ld
  - lwu
  - sd
  - slliw
  - sllw
  - sraiw
  - sraw
  - srliw
  - srlw
  - subw
  rvwmo:
  - sfence.vma
  supervisor:
  - hfence.gvma
  unassigned:
  - "@fence.tso"
  - "@fsflagsi"
  - "@fsrmi"
  - "@slli.rv32"
  - "@srai.rv32"
  - "@srli.rv32"
  - dret
  - fence.i
  - hfence.bvma
  - uret
  v:
  - vaadd.vi
  - vaadd.vv
  - vaadd.vx
  - vadc.vim
  - vadc.vvm
  - vadc.vxm
  - vadd.vi
  - vadd.vv
  - vadd.vx
  - vand.vi
  - vand.vv
  - vand.vx
  - vasub.vv
  - vasub.vx
  - vcompress.vm
  - vdiv.vv
  - vdiv.vx
  - vdivu.vv
  - vdivu.vx
  - vdot.vv
  - vdotu.vv
  - vext.x.v
  - vfadd.vf
  - vfadd.vv
  - vfdiv.vf
  - vfdiv.vv
  - vfdot.vv
  - vfeq.vf
  - vfeq.vv
  - vfge.vf
  - vfgt.vf
  - vfle.vf
  - vfle.vv
  - vflt.vf
  - vflt.vv
  - vfmacc.vf
  - vfmacc.vv
  - vfmadd.vf
  - vfmadd.vv
  - vfmax.vf
  - vfmax.vv
  - vfmerge.vfm
  - vfmin.vf
  - vfmin.vv
  - vfmsac.vf
  - vfmsac.vv
  - vfmsub.vf
  - vfmsub.vv
  - vfmul.vf
  - vfmul.vv
  - vfmv.f.s
  - vfmv.s.f
  - vfmv.v.f
  - vfne.vf
  - vfne.vv
  - vfnmacc.vf
  - vfnmacc.vv
  - vfnmadd.vf
  - vfnmadd.vv
  - vfnmsac.vf
  - vfnmsac.vv
  - vfnmsub.vf
  - vfnmsub.vv
  - vford.vf
  - vford.vv
  - vfrdiv.vf
  - vfredmax.vs
  - vfredmin.vs
  - vfredosum.vs
  - vfredsum.vs
  - vfsgnj.vf
  - vfsgnj.vv
  - vfsgnjn.vf
  - vfsgnjn.vv
  - vfsgnjx.vf
  - vfsgnjx.vv
  - vfsub.vf
  - vfsub.vv
  - vfunary0.vv
  - vfunary1.vv
  - vfwadd.vf
  - vfwadd.vv
  - vfwadd.wf
  - vfwadd.wv
  - vfwmacc.vf
  - vfwmacc.vv
  - vfwmsac.vf
  - vfwmsac.vv
  - vfwmul.vf
  - vfwmul.vv
  - vfwnmacc.vf
  - vfwnmacc.vv
  - vfwnmsac.vf
  - vfwnmsac.vv
  - vfwredosum.vs
  - vfwredsum.vs
  - vfwsub.vf
  - vfwsub.vv
  - vfwsub.wf
  - vfwsub.wv
  - vid.v
  - viota.m
  - vlb.v
  - vlbff.v
  - vlbu.v
  - vlbuff.v
  - vle.v
  - vleff.v
  - vlh.v
  - vlhff.v
  - vlhu.v
  - vlhuff.v
  - vlsb.v
  - vlsbu.v
  - vlse.v
  - vlsh.v
  - vlshu.v
  - vlsw.v
  - vlswu.v
  - vlw.v
  - vlwff.v
  - vlwu.v
  - vlwuff.v
  - vlxb.v
  - vlxbu.v
  - vlxe.v
  - vlxh.v
  - vlxhu.v
  - vlxw.v
  - vlxwu.v
  - vmacc.vv
  - vmacc.vx
  - vmadc.vim
  - vmadc.vvm
  - vmadc.vxm
  - vmadd.vv
  - vmadd.vx
  - vmand.mm
  - vmandnot.mm
  - vmax.vv
  - vmax.vx
  - vmaxu.vv
  - vmaxu.vx
  - vmerge.vim
  - vmerge.vvm
  - vmerge.vxm
  - vmfirst.m
  - vmin.vv
  - vmin.vx
  - vminu.vv
  - vminu.vx
  - vmnand.mm
  - vmnor.mm
  - vmor.mm
  - vmornot.mm
  - vmpopc.m
  - vmsbc.vvm
  - vmsbc.vxm
  - vmsbf.m
  - vmsif.m
  - vmsof.m
  - vmul.vv
  - vmul.vx
  - vmulh.vv
  - vmulh.vx
  - vmulhsu.vv
  - vmulhsu.vx
  - vmulhu.vv
  - vmulhu.vx
  - vmv.s.x
  - vmv.v.i
  - vmv.v.v
  - vmv.v.x
  - vmxnor.mm
  - vmxor.mm
  - vnclip.vi
  - vnclip.vv
  - vnclip.vx
  - vnclipu.vi
  - vnclipu.vv
  - vnclipu.vx
  - vnmsac.vv
  - vnmsac.vx
  - vnmsub.vv
  - vnmsub.vx
  - vnsra.vi
  - vnsra.vv
  - vnsra.vx
  - vnsrl.vi
  - vnsrl.vv
  - vnsrl.vx
  - vor.vi
  - vor.vv
  - vor.vx
  - vredand.vs
  - vredmax.vs
  - vredmaxu.vs
  - vredmin.vs
  - vredminu.vs
  - vredor.vs
  - vredsum.vs
  - vredxor.vs
  - vrem.vv
  - vrem.vx
  - vremu.vv
  - vremu.vx
  - vrgather.vi
  - vrgather.vv
  - vrgather.vx
  - vrsub.vi
  - vrsub.vx
  - vsadd.vi
  - vsadd.vv
  - vsadd.vx
  - vsaddu.vi
  - vsaddu.vv
  - vsaddu.vx
  - vsb.v
  - vsbc.vvm
  - vsbc.vxm
  - vse.v
  - vseq.vi
  - vseq.vv
  - vseq.vx
  - vsetvl
  - vsetvli
  - vsgt.vi
  - vsgt.vx
  - vsgtu.vi
  - vsgtu.vx
  - vsh.v
  - vsle.vi
  - vsle.vv
  - vsle.vx
  - vsleu.vi
  - vsleu.vv
  - vsleu.vx
  - vslide1down.vx
  - vslide1up.vx
  - vslidedown.vi
  - vslidedown.vx
  - vslideup.vi
  - vslideup.vx
  - vsll.vi
  - vsll.vv
  - vsll.vx
  - vslt.vv
  - vslt.vx
  - vsltu.vv
  - vsltu.vx
  - vsmul.vv
  - vsmul.vx
  - vsne.vi
  - vsne.vv
  - vsne.vx
  - vsra.vi
  - vsra.vv
  - vsra.vx
  - vsrl.vi
  - vsrl.vv
  - vsrl.vx
  - vssb.v
  - vsse.v
  - vssh.v
  - vssra.vi
  - vssra.vv
  - vssra.vx
  - vssrl.vi
  - vssrl.vv
  - vssrl.vx
  - vssub.vv
  - vssub.vx
  - vssubu.vv
  - vssubu.vx
  - vssw.v
  - vsub.vv
  - vsub.vx
  - vsuxb.v
  - vsuxe.v
  - vsuxh.v
  - vsuxw.v
  - vsw.v
  - vsxb.v
  - vsxe.v
  - vsxh.v
  - vsxw.v
  - vwadd.vv
  - vwadd.vx
  - vwadd.wv
  - vwadd.wx
  - vwaddu.vv
  - vwaddu.vx
  - vwaddu.wv
  - vwaddu.wx
  - vwmacc.vv
  - vwmacc.vx
  - vwmaccsu.vv
  - vwmaccsu.vx
  - vwmaccu.vv
  - vwmaccu.vx
  - vwmaccus.vx
  - vwmul.vv
  - vwmul.vx
  - vwmulsu.vv
  - vwmulsu.vx
  - vwmulu.vv
  - vwmulu.vx
  - vwredsum.vs
  - vwredsumu.vs
  - vwsmacc.vv
  - vwsmacc.vx
  - vwsmaccsu.vv
  - vwsmaccsu.vx
  - vwsmaccu.vv
  - vwsmaccu.vx
  - vwsmaccus.vx
  - vwsub.vv
  - vwsub.vx
  - vwsub.wv
  - vwsub.wx
  - vwsubu.vv
  - vwsubu.vx
  - vwsubu.wv
  - vwsubu.wx
  - vxor.vi
  - vxor.vv
  - vxor.vx
opcode_args_to_asm_args:
- *7
- *2
- *24
- *11
- *3
- *6
- *9
- *25
- *26
- *10
- *8
- *4
- *5
- *27
- *28
- *29
- *30
- *31
- *15
- *19
- *17
- *20
- *12
- *21
- *14
- *32
- *13
- *33
- *18
- *16
- *1
